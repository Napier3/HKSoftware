#include "stdafx.h"
#include "XLangResource_Native.h"

const CString CXLangResource_Native::g_strXLangRs_Test = _T("Lang_NativeTest");

CXLangResource_Native::CXLangResource_Native()
{
    m_pXLangRsExe = &m_oXLangRs_Test;
    m_oXLangRs_Test.m_strID = g_strXLangRs_Test;
    m_oXLangRs_Test.m_strName = g_strXLangRs_Test;
}

CXLangResource_Native::~CXLangResource_Native()
{
    m_oXLangRs_Test.RemoveAll();
}


CXLangItem* CXLangResource_Native::rs_AddString(const CString &strID, CString *pstrString)
{
    CXLangItem *p = CXLanguage::AddString(strID, pstrString);

    m_oXLangRs_Test.AddTail(p);

    return p;
}


void CXLangResource_Native::InitLangRsByFile()
{
    CXLanguageResourceBase::InitLangRsByFile();

    InitLangRsByFileEx(&m_oXLangRs_Test, g_strXLangRs_Test);
}


void CXLangResource_Native::RegisterLanguageResource()
{
    CXLanguageResourceBase::RegisterLanguageResource();
	rs_AddString(g_sLangID_Native_Amplitude, &g_sLangTxt_Native_Amplitude);
	rs_AddString(g_sLangID_Native_Phase, &g_sLangTxt_Native_Phase);
	rs_AddString(g_sLangID_Native_Freq, &g_sLangTxt_Native_Freq);
	rs_AddString(g_sLangID_Native_Unit, &g_sLangTxt_Native_Unit);
	rs_AddString(g_sLangID_Native_Channel, &g_sLangTxt_Native_Channel);
	rs_AddString(g_sLangID_Native_DC, &g_sLangTxt_Native_DC);
	rs_AddString(g_sLangID_Native_Fundamental, &g_sLangTxt_Native_Fundamental);
	rs_AddString(g_sLangID_Harm_Set, &g_sLangTxt_Harm_Set);
	rs_AddString(g_sLangID_Harm_Content, &g_sLangTxt_Harm_Content);
	rs_AddString(g_sLangID_Harm_Enable, &g_sLangTxt_Harm_Enable);
	rs_AddString(g_sLangID_Harm_UChannel, &g_sLangTxt_Harm_UChannel);
	rs_AddString(g_sLangID_Harm_IChannel, &g_sLangTxt_Harm_IChannel);
	rs_AddString(g_sLangID_Harm_Reset, &g_sLangTxt_Harm_Reset);
	rs_AddString(g_sLangID_Harm_FundFreq, &g_sLangTxt_Harm_FundFreq);
	rs_AddString(g_sLangID_Harm_Times, &g_sLangTxt_Harm_Times);
	rs_AddString(g_sLangID_Native_OK, &g_sLangTxt_Native_OK);
	rs_AddString(g_sLangID_Native_Cancel, &g_sLangTxt_Native_Cancel);
	rs_AddString(g_sLangID_Native_GndA, &g_sLangTxt_Native_GndA);
	rs_AddString(g_sLangID_Native_GndB, &g_sLangTxt_Native_GndB);
	rs_AddString(g_sLangID_Native_GndC, &g_sLangTxt_Native_GndC);
	rs_AddString(g_sLangID_Native_ShortAB, &g_sLangTxt_Native_ShortAB);
	rs_AddString(g_sLangID_Native_ShortBC, &g_sLangTxt_Native_ShortBC);
	rs_AddString(g_sLangID_Native_ShortCA, &g_sLangTxt_Native_ShortCA);
	rs_AddString(g_sLangID_Native_GndShortAB, &g_sLangTxt_Native_GndShortAB);
	rs_AddString(g_sLangID_Native_GndShortBC, &g_sLangTxt_Native_GndShortBC);
	rs_AddString(g_sLangID_Native_GndShortCA, &g_sLangTxt_Native_GndShortCA);
	rs_AddString(g_sLangID_Native_ShortABC, &g_sLangTxt_Native_ShortABC);
	rs_AddString(g_sLangID_Native_SinglePhase, &g_sLangTxt_Native_SinglePhase);
	rs_AddString(g_sLangID_Native_INotChange, &g_sLangTxt_Native_INotChange);
	rs_AddString(g_sLangID_Native_UNotChange, &g_sLangTxt_Native_UNotChange);
	rs_AddString(g_sLangID_Native_ZNotChange, &g_sLangTxt_Native_ZNotChange);	
	rs_AddString(g_sLangID_Native_UZoomOut, &g_sLangTxt_Native_UZoomOut);
	rs_AddString(g_sLangID_Native_UZoomIn, &g_sLangTxt_Native_UZoomIn);
	rs_AddString(g_sLangID_Native_IZoomOut, &g_sLangTxt_Native_IZoomOut);
	rs_AddString(g_sLangID_Native_IZoomIn, &g_sLangTxt_Native_IZoomIn);
	rs_AddString(g_sLangID_Native_PhaseA, &g_sLangTxt_Native_PhaseA);
	rs_AddString(g_sLangID_Native_PhaseB, &g_sLangTxt_Native_PhaseB);
	rs_AddString(g_sLangID_Native_PhaseC, &g_sLangTxt_Native_PhaseC);
	rs_AddString(g_sLangID_Native_PhaseO, &g_sLangTxt_Native_PhaseO);
	rs_AddString(g_sLangID_Native_Relay, &g_sLangTxt_Native_Relay);
	rs_AddString(g_sLangID_Native_Measure, &g_sLangTxt_Native_Measure);
	rs_AddString(g_sLangID_Native_Current, &g_sLangTxt_Native_Current);
	rs_AddString(g_sLangID_Native_Voltage, &g_sLangTxt_Native_Voltage);
	rs_AddString(g_sLangID_Native_EDPhaseV, &g_sLangTxt_Native_EDPhaseV);
	rs_AddString(g_sLangID_Native_EDCurrent, &g_sLangTxt_Native_EDCurrent);
	rs_AddString(g_sLangID_Native_EqualAmp, &g_sLangTxt_Native_EqualAmp);
	rs_AddString(g_sLangID_Native_EqualFreq, &g_sLangTxt_Native_EqualFreq);
	rs_AddString(g_sLangID_Native_PositiveSeq, &g_sLangTxt_Native_PositiveSeq);
	rs_AddString(g_sLangID_Native_NegativeSeq, &g_sLangTxt_Native_NegativeSeq);
	rs_AddString(g_sLangID_Native_ZeroSeq, &g_sLangTxt_Native_ZeroSeq);
	rs_AddString(g_sLangID_Native_Zero, &g_sLangTxt_Native_Zero);
	rs_AddString(g_sLangID_Native_AllGroup, &g_sLangTxt_Native_AllGroup);
	rs_AddString(g_sLangID_Native_CurGroup, &g_sLangTxt_Native_CurGroup);
	rs_AddString(g_sLangID_Native_LastGroup, &g_sLangTxt_Natve_LastGroup);
	rs_AddString(g_sLangID_Native_NextGroup, &g_sLangTxt_Natve_NextGroup);
	rs_AddString(g_sLangID_Native_ExBinSet, &g_sLangTxt_Native_ExBinSet);
	rs_AddString(g_sLangID_Native_ExBoutSet, &g_sLangTxt_Native_ExBoutSet);
	rs_AddString(g_sLangID_Native_GooseDataSet, &g_sLangTxt_Native_GooseDataSet);
	rs_AddString(g_sLangID_Native_Bin, &g_sLangTxt_Native_Bin);
	rs_AddString(g_sLangID_Native_Bout, &g_sLangTxt_Native_Bout);
	rs_AddString(g_sLangID_Native_BinX, &g_sLangTxt_Native_BinX);
	rs_AddString(g_sLangID_Native_BoutX, &g_sLangTxt_Native_BoutX);
	rs_AddString(g_sLangID_Native_BinEx, &g_sLangTxt_Native_BinEx);
	rs_AddString(g_sLangID_Native_BoutEx, &g_sLangTxt_Native_BoutEx);
	rs_AddString(g_sLangID_Native_Time, &g_sLangTxt_Native_Time);
	rs_AddString(g_sLangID_Native_Index, &g_sLangTxt_Native_Index);
	rs_AddString(g_sLangID_Native_ActType, &g_sLangTxt_Native_ActType);
	rs_AddString(g_sLangID_Native_ActionTime, &g_sLangTxt_Native_ActionTime);
	rs_AddString(g_sLangID_Native_ReturnVal, &g_sLangTxt_Native_ReturnVal);
	rs_AddString(g_sLangID_Native_ReturnCoeff, &g_sLangTxt_Native_ReturnCoeff);
	rs_AddString(g_sLangID_Native_CurTypeIdx, &g_sLangTxt_Native_CurTypeIdx);
	rs_AddString(g_sLangID_Native_Group, &g_sLangTxt_Native_Group);
	rs_AddString(g_sLangID_Native_LangSetting, &g_sLangTxt_Native_LangSetting);
	rs_AddString(g_sLangID_Native_LangTip, &g_sLangTxt_Native_LangTip);
	rs_AddString(g_sLangID_Native_LangTipContext, &g_sLangTxt_Native_LangTipContext);
	rs_AddString(g_sLangID_Native_SelectAll, &g_sLangTxt_Native_SelectAll);
	rs_AddString(g_sLangID_Native_Reverse, &g_sLangTxt_Native_Reverse);
	rs_AddString(g_sLangID_Native_Repair, &g_sLangTxt_Native_Repair);
	rs_AddString(g_sLangID_Native_IEDName, &g_sLangTxt_Native_IEDName);
	rs_AddString(g_sLangID_Native_APPID, &g_sLangTxt_Native_APPID);
	rs_AddString(g_sLangID_Native_CommonPara,&g_sLangTxt_Native_CommonPara);
	rs_AddString(g_sLangID_Native_Type,&g_sLangTxt_Native_Type);
	rs_AddString(g_sLangID_Native_LogicOr, &g_sLangTxt_Native_LogicOr);
	rs_AddString(g_sLangID_Native_LogicAnd, &g_sLangTxt_Native_LogicAnd);
	rs_AddString(g_sLangID_Native_Delete, &g_sLangTxt_Native_Delete);
	rs_AddString(g_sLangID_Native_Enter, &g_sLangTxt_Native_Enter);	
	rs_AddString(g_sLangID_Native_Esc, &g_sLangTxt_Native_Esc);	
	rs_AddString(g_sLangID_Native_State, &g_sLangTxt_Native_State);
	rs_AddString(g_sLangID_Native_Group, &g_sLangTxt_Native_Group);
	rs_AddString(g_sLangID_Native_Caps, &g_sLangTxt_Native_Caps);
	rs_AddString(g_sLangID_Native_Space, &g_sLangTxt_Native_Space);
	rs_AddString(g_sLangID_Native_Maps, &g_sLangTxt_Native_Maps);
	rs_AddString(g_sLangID_Native_Chs, &g_sLangTxt_Native_Chs);
	rs_AddString(g_sLangID_Native_Eng, &g_sLangTxt_Native_Eng);
	rs_AddString(g_sLangID_Native_Choose, &g_sLangTxt_Native_Choose);
	rs_AddString(g_sLangID_Native_Name, &g_sLangTxt_Native_Name);
	rs_AddString(g_sLangID_Native_ChooseOpenFile, &g_sLangTxt_Native_ChooseOpenFile);
	rs_AddString(g_sLangID_Native_FileFolder, &g_sLangTxt_Native_FileFolder);
	rs_AddString(g_sLangID_Native_FileName, &g_sLangTxt_Native_FileName);
	rs_AddString(g_sLangID_Native_NoTimeSync, &g_sLangTxt_Native_NoTimeSync);


	rs_AddString(g_sLangID_Manual_IV, &g_sLangTxt_Manual_IV);
	rs_AddString(g_sLangID_Manual_OtherParam, &g_sLangTxt_Manual_OtherParam);
	rs_AddString(g_sLangID_Manual_Changing, &g_sLangTxt_Manual_Changing);
	rs_AddString(g_sLangID_Manual_InitVal, &g_sLangTxt_Manual_InitVal);
	rs_AddString(g_sLangID_Manual_ChangeType, &g_sLangTxt_Manual_ChangeType);
	rs_AddString(g_sLangID_Manual_Channel, &g_sLangTxt_Manual_Channel);
	rs_AddString(g_sLangID_Manual_FinishVal, &g_sLangTxt_Manual_FinishVal);
	rs_AddString(g_sLangID_Manual_Step, &g_sLangTxt_Manual_Step);
	rs_AddString(g_sLangID_Manual_Timer, &g_sLangTxt_Manual_Timer);
	rs_AddString(g_sLangID_Manual_Old, &g_sLangTxt_Manual_Old);
	rs_AddString(g_sLangID_Manual_Auto, &g_sLangTxt_Manual_Auto);
	rs_AddString(g_sLangID_Manual_Delayed, &g_sLangTxt_Manual_Delayed);
	rs_AddString(g_sLangID_Manual_OutSetting, &g_sLangTxt_Manual_OutSetting);
	rs_AddString(g_sLangID_Manual_Out1, &g_sLangTxt_Manual_Out1);
	rs_AddString(g_sLangID_Manual_Out2, &g_sLangTxt_Manual_Out2);
	rs_AddString(g_sLangID_Manual_Out3, &g_sLangTxt_Manual_Out3);
	rs_AddString(g_sLangID_Manual_Out4, &g_sLangTxt_Manual_Out4);
	rs_AddString(g_sLangID_Manual_Out5, &g_sLangTxt_Manual_Out5);
	rs_AddString(g_sLangID_Manual_Out6, &g_sLangTxt_Manual_Out6);
	rs_AddString(g_sLangID_Manual_Out7, &g_sLangTxt_Manual_Out7);
	rs_AddString(g_sLangID_Manual_Out8, &g_sLangTxt_Manual_Out8);
	rs_AddString(g_sLangID_Manual_InSetting, &g_sLangTxt_Manual_InSetting);
	rs_AddString(g_sLangID_Manual_InA, &g_sLangTxt_Manual_InA);
	rs_AddString(g_sLangID_Manual_InB, &g_sLangTxt_Manual_InB);
	rs_AddString(g_sLangID_Manual_InC, &g_sLangTxt_Manual_InC);
	rs_AddString(g_sLangID_Manual_InD, &g_sLangTxt_Manual_InD);
	rs_AddString(g_sLangID_Manual_InE, &g_sLangTxt_Manual_InE);
	rs_AddString(g_sLangID_Manual_InF, &g_sLangTxt_Manual_InF);
	rs_AddString(g_sLangID_Manual_InG, &g_sLangTxt_Manual_InG);
	rs_AddString(g_sLangID_Manual_InH, &g_sLangTxt_Manual_InH);
	rs_AddString(g_sLangID_Manual_Lock, &g_sLangTxt_Manual_Lock);
	rs_AddString(g_sLangID_Manual_UnLock, &g_sLangTxt_Manual_UnLock);
	rs_AddString(g_sLangID_Native_Action, &g_sLangTxt_Native_Action);
	rs_AddString(g_sLangID_Manual_ActionTime, &g_sLangTxt_Manual_ActionTime);
	rs_AddString(g_sLangID_Manual_ReturnTime, &g_sLangTxt_Manual_ReturnTime);
	rs_AddString(g_sLangID_Manual_S_E, &g_sLangTxt_Manual_S_E);
	rs_AddString(g_sLangID_Manual_S_E_S, &g_sLangTxt_Manual_S_E_S);

	rs_AddString(g_sLangID_State_TrigerSetup, &g_sLangTxt_State_TrigerSetup);
	rs_AddString(g_sLangID_State_TrigerCondition, &g_sLangTxt_State_TrigerCondition);
	rs_AddString(g_sLangID_State_OutTime, &g_sLangTxt_State_OutTime);
	rs_AddString(g_sLangID_State_TrigerTime, &g_sLangTxt_State_TrigerTime);
	rs_AddString(g_sLangID_State_Hour, &g_sLangTxt_State_Hour);
	rs_AddString(g_sLangID_State_Minute, &g_sLangTxt_State_Minute);
	rs_AddString(g_sLangID_State_Second, &g_sLangTxt_State_Second);
	rs_AddString(g_sLangID_State_TrigerHoldTime, &g_sLangTxt_State_TrigerHoldTime);
	rs_AddString(g_sLangID_State_HoldTime, &g_sLangTxt_State_HoldTime);
	rs_AddString(g_sLangID_State_ShortCalc, &g_sLangTxt_State_ShortCalc);
	rs_AddString(g_sLangID_State_GradientSet, &g_sLangTxt_State_GradientSet);
	rs_AddString(g_sLangID_State_PasteStateBf, &g_sLangTxt_State_PasteStateBf);
	rs_AddString(g_sLangID_State_InsertStateBf, &g_sLangTxt_State_InsertStateBf);
	rs_AddString(g_sLangID_State_InsertStateAf, &g_sLangTxt_State_InsertStateAf);
	rs_AddString(g_sLangID_State_PasteStateAf, &g_sLangTxt_State_PasteStateAf);
	rs_AddString(g_sLangID_State_CopyCurState, &g_sLangTxt_State_CopyCurState);
	rs_AddString(g_sLangID_State_DeleteCurState, &g_sLangTxt_State_DeleteCurState);
	rs_AddString(g_sLangID_State_UISet, &g_sLangTxt_State_UISet);
	rs_AddString(g_sLangID_State_StateParaSet, &g_sLangTxt_State_StateParaSet);
	rs_AddString(g_sLangID_State_HarmSet, &g_sLangTxt_State_HarmSet);
	rs_AddString(g_sLangID_State_JudgeCondition, &g_sLangTxt_State_JudgeCondition);
	rs_AddString(g_sLangID_State_DCOffSet, &g_sLangTxt_State_DCOffSet);
	rs_AddString(g_sLangID_State_Tou, &g_sLangTxt_State_Tou);
	rs_AddString(g_sLangID_State_RepeatTimes, &g_sLangTxt_State_RepeatTimes);
	rs_AddString(g_sLangID_State_ChGroup, &g_sLangTxt_State_ChGroup);
	rs_AddString(g_sLangID_State_FaultType, &g_sLangTxt_State_FaultType);
	rs_AddString(g_sLangID_State_CalcMode, &g_sLangTxt_State_CalcMode);
	rs_AddString(g_sLangID_State_ShortI, &g_sLangTxt_State_ShortI);
	rs_AddString(g_sLangID_State_ShortU, &g_sLangTxt_State_ShortU);
	rs_AddString(g_sLangID_State_ZeroCoeff, &g_sLangTxt_State_ZeroCoeff);
	rs_AddString(g_sLangID_State_CalcType, &g_sLangTxt_State_CalcType);
	rs_AddString(g_sLangID_State_Amp, &g_sLangTxt_State_Amp);
	rs_AddString(g_sLangID_State_Angle, &g_sLangTxt_State_Angle);
	rs_AddString(g_sLangID_LoadI, &g_sLangTxt_LoadI);
	rs_AddString(g_sLangID_State_LoadAngle, &g_sLangTxt_State_LoadAngle);
	rs_AddString(g_sLangID_State_Trigger_Time, &g_sLangTxt_State_Trigger_Time);
	rs_AddString(g_sLangID_State_Trigger_TimeAndBin, &g_sLangTxt_State_Trigger_TimeAndBin);
	rs_AddString(g_sLangID_State_Trigger_Bin, &g_sLangTxt_State_Trigger_Bin);
	rs_AddString(g_sLangID_State_Trigger_Manu, &g_sLangTxt_State_Trigger_Manu);
	rs_AddString(g_sLangID_State_Trigger_GPSB, &g_sLangTxt_State_Trigger_GPSB);
	rs_AddString(g_sLangID_State_LinearChange, &g_sLangTxt_State_LinearChange);
	rs_AddString(g_sLangID_State_StepChange, &g_sLangTxt_State_StepChange);
	rs_AddString(g_sLangID_State_StepTime, &g_sLangTxt_State_StepTime);
	rs_AddString(g_sLangID_State_SelectChannel, &g_sLangTxt_State_SelectChannel);
	rs_AddString(g_sLangID_State_BeginVal, &g_sLangTxt_State_BeginVal);
	rs_AddString(g_sLangID_State_EndVal, &g_sLangTxt_State_EndVal);
	rs_AddString(g_sLangID_State_Step, &g_sLangTxt_State_Step);
	rs_AddString(g_sLangID_State_AmpGradient, &g_sLangTxt_State_AmpGradient);
	rs_AddString(g_sLangID_State_FreqGradient, &g_sLangTxt_State_FreqGradient);
	rs_AddString(g_sLangID_State_LastState, &g_sLangTxt_State_LastState);
	rs_AddString(g_sLangID_State_FirstState, &g_sLangTxt_State_FirstState);
	rs_AddString(g_sLangID_State_No, &g_sLangTxt_State_No);
	rs_AddString(g_sLangID_State_Yes, &g_sLangTxt_State_Yes);
	rs_AddString(g_sLangID_State_HarmCount, &g_sLangTxt_State_HarmCount);
	rs_AddString(g_sLangID_Gradient_Var, &g_sLangTxt_Gradient_Var);
	rs_AddString(g_sLangID_Gradient_VarType, &g_sLangTxt_Gradient_VarType);
	rs_AddString(g_sLangID_Gradient_Phase, &g_sLangTxt_Gradient_Phase);
	rs_AddString(g_sLangID_Gradient_Init, &g_sLangTxt_Gradient_Init);
	rs_AddString(g_sLangID_Gradient_Finish, &g_sLangTxt_Gradient_Finish);
	rs_AddString(g_sLangID_Gradient_Step, &g_sLangTxt_Gradient_Step);
	rs_AddString(g_sLangID_Gradient_Time, &g_sLangTxt_Gradient_Time);
	rs_AddString(g_sLangID_Gradient_Direction, &g_sLangTxt_Gradient_Direction);
	rs_AddString(g_sLangID_Gradient_MaxAngle, &g_sLangTxt_Gradient_MaxAngle);
	rs_AddString(g_sLangID_Gradient_Clockwise, &g_sLangTxt_Gradient_Clockwise);    
	rs_AddString(g_sLangID_Gradient_Anticlockwise, &g_sLangTxt_Gradient_Anticlockwise);
	rs_AddString(g_sLangID_Gradient_AllFreq, &g_sLangTxt_Gradient_AllFreq);
	rs_AddString(g_sLangID_Gradient_TimeBeforeChange, &g_sLangTxt_Gradient_TimeBeforeChange);
	rs_AddString(g_sLangID_Gradient_TimeBeforeFail, &g_sLangTxt_Gradient_TimeBeforeFail);
	rs_AddString(g_sLangID_Gradient_CurBeforeChange, &g_sLangTxt_Gradient_CurBeforeChange);
	rs_AddString(g_sLangID_Gradient_Normal, &g_sLangTxt_Gradient_Normal);
	rs_AddString(g_sLangID_Gradient_Failure, &g_sLangTxt_Gradient_Failure);
	rs_AddString(g_sLangID_Gradient_VarSet, &g_sLangTxt_Gradient_VarSet);
	rs_AddString(g_sLangID_Gradient_ChangingSet, &g_sLangTxt_Gradient_ChangingSet);
	rs_AddString(g_sLangID_Gradient_UnChangingSet, &g_sLangTxt_Gradient_UnChangingSet);
	rs_AddString(g_sLangID_Gradient_OtherSet, &g_sLangTxt_Gradient_OtherSet);
	rs_AddString(g_sLangID_Gradient_TestResult, &g_sLangTxt_Gradient_TestResult);
	rs_AddString(g_sLangID_Gradient_ParaSet, &g_sLangTxt_Gradient_ParaSet);

	rs_AddString(g_sLangID_Report_TestChoose, &g_sLangTxt_Report_TestChoose);
	rs_AddString(g_sLangID_Report_TestObjInf, &g_sLangTxt_Report_TestObjInf);
	rs_AddString(g_sLangID_Report_SubInformation, &g_sLangTxt_Report_SubInformation);
	rs_AddString(g_sLangID_Report_SubName, &g_sLangTxt_Report_SubName);
	rs_AddString(g_sLangID_Report_SubAddr, &g_sLangTxt_Report_SubAddr);
	rs_AddString(g_sLangID_Report_LoopName, &g_sLangTxt_Report_LoopName);
	rs_AddString(g_sLangID_Report_LoopAddr, &g_sLangTxt_Report_LoopAddr);
	rs_AddString(g_sLangID_Report_Tester, &g_sLangTxt_Report_Tester);
	rs_AddString(g_sLangID_Report_ReportTitle, &g_sLangTxt_Report_ReportTitle);
	rs_AddString(g_sLangID_Report_DeviceName, &g_sLangTxt_Report_DeviceName);
	rs_AddString(g_sLangID_Report_DeviceInfor, &g_sLangTxt_Report_DeviceInfor);
	rs_AddString(g_sLangID_Report_DeviceModel, &g_sLangTxt_Report_DeviceModel);
	rs_AddString(g_sLangID_Report_DeviceAddr, &g_sLangTxt_Report_DeviceAddr);
	rs_AddString(g_sLangID_Report_DeviceFactory, &g_sLangTxt_Report_DeviceFactory);
	rs_AddString(g_sLangID_Report_DeviceSN, &g_sLangTxt_Report_DeviceSN);
	rs_AddString(g_sLangID_Report_SettingsNO, &g_sLangTxt_Report_SettingsNO);
	rs_AddString(g_sLangID_Report_AdditionalInf, &g_sLangTxt_Report_AdditionalInf);
	rs_AddString(g_sLangID_Report_RatedValue, &g_sLangTxt_Report_RatedValue);
	rs_AddString(g_sLangID_Report_TestEquInfo, &g_sLangTxt_Report_TestEquInfo);
	rs_AddString(g_sLangID_Report_DUTs, &g_sLangTxt_Report_DUTs);
	rs_AddString(g_sLangID_Report_Title, &g_sLangTxt_Report_Title);
	rs_AddString(g_sLangID_Report_NomSettings, &g_sLangTxt_Report_NomSettings);    
	rs_AddString(g_sLangID_Report_Vnom, &g_sLangTxt_Report_Vnom);          
	rs_AddString(g_sLangID_Report_Vdc, &g_sLangTxt_Report_Vdc);           
	rs_AddString(g_sLangID_Report_SureTime, &g_sLangTxt_Report_SureTime);        
	rs_AddString(g_sLangID_Report_Inom, &g_sLangTxt_Report_Inom);           
	rs_AddString(g_sLangID_Report_Vprim, &g_sLangTxt_Report_Vprim);         
	rs_AddString(g_sLangID_Report_Fnom, &g_sLangTxt_Report_Fnom);    
	rs_AddString(g_sLangID_Report_Iprim, &g_sLangTxt_Report_Iprim); 
	rs_AddString(g_sLangID_Report_TestAppInfor, &g_sLangTxt_Report_TestAppInfor);
	rs_AddString(g_sLangID_Report_AppModel, &g_sLangTxt_Report_AppModel);
	rs_AddString(g_sLangID_Report_Imax, &g_sLangTxt_Report_Imax);     
	rs_AddString(g_sLangID_Report_AppSN, &g_sLangTxt_Report_AppSN);
	rs_AddString(g_sLangID_Report_TestStartTime, &g_sLangTxt_Report_TestStartTime);
	rs_AddString(g_sLangID_Report_ComPortType , &g_sLangTxt_Report_ComPortType);
	rs_AddString(g_sLangID_Report_TestEndTime, &g_sLangTxt_Report_TestEndTime); 
	rs_AddString(g_sLangID_Report_Vmax, &g_sLangTxt_Report_Vmax);     

	rs_AddString(g_sLangID_ChMaps_Name, &g_sLangTxt_ChMaps_Name);
	rs_AddString(g_sLangID_ChMaps_AnalogCh, &g_sLangTxt_ChMaps_AnalogCh);
	rs_AddString(g_sLangID_ChMaps_DigitalCh, &g_sLangTxt_ChMaps_DigitalCh);
	rs_AddString(g_sLangID_ChMaps_WeekCh, &g_sLangTxt_ChMaps_WeekCh);
	rs_AddString(g_sLangID_ChMaps_Title, &g_sLangTxt_ChMaps_Title);
	rs_AddString(g_sLangID_ChMaps_OutputSel, &g_sLangTxt_ChMaps_OutputSel);
	rs_AddString(g_sLangID_ChMaps_Analog, &g_sLangTxt_ChMaps_Analog);
	rs_AddString(g_sLangID_ChMaps_Digital, &g_sLangTxt_ChMaps_Digital);
	rs_AddString(g_sLangID_ChMaps_Week, &g_sLangTxt_ChMaps_Week);
	rs_AddString(g_sLangID_ChMaps_DigitalType, &g_sLangTxt_ChMaps_DigitalType);
	rs_AddString(g_sLangID_ChMaps_DefautMaps, &g_sLangTxt_ChMaps_DefautMaps);
	rs_AddString(g_sLangID_ChMaps_ImportChMaps, &g_sLangTxt_ChMaps_ImportChMaps);
	rs_AddString(g_sLangID_ChMaps_ExportChMaps, &g_sLangTxt_ChMaps_ExportChMaps);
	rs_AddString(g_sLangID_IEC_SysParasSet, &g_sLangTxt_IEC_SysParasSet);
	rs_AddString(g_sLangID_IEC_SysParasConfig, &g_sLangTxt_IEC_SysParasConfig);
	rs_AddString(g_sLangID_IEC_Message, &g_sLangTxt_IEC_Message);
	rs_AddString(g_sLangID_IEC_Publish, &g_sLangTxt_IEC_Publish);
	rs_AddString(g_sLangID_IEC_Subscription, &g_sLangTxt_IEC_Subscription);
	rs_AddString(g_sLangID_IEC_OpenConfig, &g_sLangTxt_IEC_OpenConfig);
	rs_AddString(g_sLangID_IEC_OpenConfigFile, &g_sLangTxt_IEC_OpenConfigFile);
	rs_AddString(g_sLangID_IEC_ConfigSaveAs, &g_sLangTxt_IEC_ConfigSaveAs);
	rs_AddString(g_sLangID_IEC_ConfigFileSaveAs, &g_sLangTxt_IEC_ConfigFileSaveAs);
	rs_AddString(g_sLangID_IEC_ImportSCL, &g_sLangTxt_IEC_ImportSCL);
	rs_AddString(g_sLangID_IEC_ImportSCLFile, &g_sLangTxt_IEC_ImportSCLFile);
	rs_AddString(g_sLangID_IEC_SaveDatas, &g_sLangTxt_IEC_SaveDatas);
	rs_AddString(g_sLangID_IEC_Exit, &g_sLangTxt_IEC_Exit);
	rs_AddString(g_sLangID_IEC_DeleteAllButFirst, &g_sLangTxt_IEC_DeleteAllButFirst);
	rs_AddString(g_sLangID_IEC_UnSelectedAll, &g_sLangTxt_IEC_UnSelectedAll);
	rs_AddString(g_sLangID_IEC_ChEdit, &g_sLangTxt_IEC_ChEdit);
	rs_AddString(g_sLangID_IEC_T1Times, &g_sLangTxt_IEC_T1Times);
	rs_AddString(g_sLangID_IEC_T0Times, &g_sLangTxt_IEC_T0Times);
	rs_AddString(g_sLangID_IEC_TimeQuality, &g_sLangTxt_IEC_TimeQuality);
	rs_AddString(g_sLangID_IEC_GroupDelay, &g_sLangTxt_IEC_GroupDelay);
	rs_AddString(g_sLangID_IEC_Details, &g_sLangTxt_IEC_Details);
	rs_AddString(g_sLangID_IEC_SamplingRate, &g_sLangTxt_IEC_SamplingRate);
	rs_AddString(g_sLangID_IEC_KeepSendAfterStop, &g_sLangTxt_IEC_KeepSendAfterStop);
	rs_AddString(g_sLangID_IEC_StopSending, &g_sLangTxt_IEC_StopSending);
	rs_AddString(g_sLangID_IEC_OtherSettings, &g_sLangTxt_IEC_OtherSettings);
	rs_AddString(g_sLangID_IEC_PacketSendingMode, &g_sLangTxt_IEC_PacketSendingMode);
	rs_AddString(g_sLangID_IEC_PTRatio, &g_sLangTxt_IEC_PTRatio);
	rs_AddString(g_sLangID_IEC_CTRatio, &g_sLangTxt_IEC_CTRatio);
	rs_AddString(g_sLangID_IEC_ChDescription, &g_sLangTxt_IEC_ChDescription);
	rs_AddString(g_sLangID_IEC_ChType, &g_sLangTxt_IEC_ChType);
	rs_AddString(g_sLangID_IEC_DIMap, &g_sLangTxt_IEC_DIMap);
	rs_AddString(g_sLangID_IEC_SetRepair, &g_sLangTxt_IEC_SetRepair);
	rs_AddString(g_sLangID_IEC_UnSetRepair, &g_sLangTxt_IEC_UnSetRepair);
	rs_AddString(g_sLangID_IEC_IMap, &g_sLangTxt_IEC_IMap);
	rs_AddString(g_sLangID_IEC_UMap, &g_sLangTxt_IEC_UMap);
	rs_AddString(g_sLangID_IEC_Choose, &g_sLangTxt_IEC_Choose);
	rs_AddString(g_sLangID_IEC_Target, &g_sLangTxt_IEC_Target);
	rs_AddString(g_sLangID_IEC_Entrance, &g_sLangTxt_IEC_Entrance);
	rs_AddString(g_sLangID_IEC_Describe, &g_sLangTxt_IEC_Describe);
	rs_AddString(g_sLangID_IEC_ChannelNumber, &g_sLangTxt_IEC_ChannelNumber);
	rs_AddString(g_sLangID_IEC_Version, &g_sLangTxt_IEC_Version);
	rs_AddString(g_sLangID_IEC_Test, &g_sLangTxt_IEC_Test);
	rs_AddString(g_sLangID_IEC_LifeTime, &g_sLangTxt_IEC_LifeTime);
	rs_AddString(g_sLangID_IEC_UnParse, &g_sLangTxt_IEC_UnParse);
	rs_AddString(g_sLangID_IEC_ChMaps, &g_sLangTxt_IEC_ChMaps);
	rs_AddString(g_sLangID_IEC_InitValue, &g_sLangTxt_IEC_InitValue);
	rs_AddString(g_sLangID_IEC_Source, &g_sLangTxt_IEC_Source);
	rs_AddString(g_sLangID_IEC_Intrance, &g_sLangTxt_IEC_Intrance);
	rs_AddString(g_sLangID_IEC_Quality, &g_sLangTxt_IEC_Quality);
	rs_AddString(g_sLangID_IEC_Delay, &g_sLangTxt_IEC_Delay);
	rs_AddString(g_sLangID_IEC_Synchronously, &g_sLangTxt_IEC_Synchronously);
	rs_AddString(g_sLangID_IEC_ScaleFactor, &g_sLangTxt_IEC_ScaleFactor);
	rs_AddString(g_sLangID_IEC_SetScaleFactor, &g_sLangTxt_IEC_SetScaleFactor);
	rs_AddString(g_sLangID_IEC_FMByte, &g_sLangTxt_IEC_FMByte);
	rs_AddString(g_sLangID_IEC_GMByte, &g_sLangTxt_IEC_GMByte);
	rs_AddString(g_sLangID_IEC_LCFI, &g_sLangTxt_IEC_LCFI);
	rs_AddString(g_sLangID_IEC_IRIGB, &g_sLangTxt_IEC_IRIGB);
	rs_AddString(g_sLangID_IEC_STFI, &g_sLangTxt_IEC_STFI);
	rs_AddString(g_sLangID_IEC_FI, &g_sLangTxt_IEC_FI);
	rs_AddString(g_sLangID_IEC_MACAddr, &g_sLangTxt_IEC_MACAddr);
	rs_AddString(g_sLangID_IEC_DataSetText, &g_sLangTxt_IEC_DataSetText);
	rs_AddString(g_sLangID_IEC_GOOSEIndex, &g_sLangTxt_IEC_GOOSEIndex);
	rs_AddString(g_sLangID_IEC_VlanPri, &g_sLangTxt_IEC_VlanPri);
	rs_AddString(g_sLangID_IEC_ConfigVersion, &g_sLangTxt_IEC_ConfigVersion);
	rs_AddString(g_sLangID_IEC_ChAllNumber, &g_sLangTxt_IEC_ChAllNumber);
	rs_AddString(g_sLangID_IEC_SubChNumber, &g_sLangTxt_IEC_SubChNumber);
	rs_AddString(g_sLangID_IEC_SubIED, &g_sLangTxt_IEC_SubIED);
	rs_AddString(g_sLangID_IEC_ASDU, &g_sLangTxt_IEC_ASDU);
	rs_AddString(g_sLangID_IEC_Find, &g_sLangTxt_IEC_Find);           
	rs_AddString(g_sLangID_IEC_SMVPublish, &g_sLangTxt_IEC_SMVPublish);     
	rs_AddString(g_sLangID_IEC_SMVSubscription, &g_sLangTxt_IEC_SMVSubscription);
	rs_AddString(g_sLangID_IEC_Configure, &g_sLangTxt_IEC_Configure);      
	rs_AddString(g_sLangID_IEC_Import , &g_sLangTxt_IEC_Import);         
	rs_AddString(g_sLangID_IEC_IEDList, &g_sLangTxt_IEC_IEDList);

	rs_AddString(g_sLangID_IEC_QualityParaSet, &g_sLangTxt_IEC_QualityParaSet);
	rs_AddString(g_sLangID_IEC_Validity, &g_sLangTxt_IEC_Validity);
	rs_AddString(g_sLangID_IEC_Overflow, &g_sLangTxt_IEC_Overflow);
	rs_AddString(g_sLangID_IEC_OutOfRange, &g_sLangTxt_IEC_OutOfRange);
	rs_AddString(g_sLangID_IEC_BadReference, &g_sLangTxt_IEC_BadReference);
	rs_AddString(g_sLangID_IEC_Oscillatory, &g_sLangTxt_IEC_Oscillatory);
	rs_AddString(g_sLangID_IEC_Failure, &g_sLangTxt_IEC_Failure);
	rs_AddString(g_sLangID_IEC_OldData, &g_sLangTxt_IEC_OldData);
	rs_AddString(g_sLangID_IEC_Inconsistent, &g_sLangTxt_IEC_Inconsistent);
	rs_AddString(g_sLangID_IEC_Inaccurate, &g_sLangTxt_IEC_Inaccurate);
	rs_AddString(g_sLangID_Channel_Source, &g_sLangTxt_Channel_Source);
	rs_AddString(g_sLangID_Channel_Test, &g_sLangTxt_Channel_Test);
	rs_AddString(g_sLangID_IEC_Opb, &g_sLangTxt_IEC_Opb);
	rs_AddString(g_sLangID_IEC_ModifyAllChs, &g_sLangTxt_IEC_ModifyAllChs);
	rs_AddString(g_sLangID_IEC_DirectSet, &g_sLangTxt_IEC_DirectSet);
	rs_AddString(g_sLangID_IEC_good, &g_sLangTxt_IEC_good);
	rs_AddString(g_sLangID_IEC_invalid, &g_sLangTxt_IEC_invalid);
	rs_AddString(g_sLangID_IEC_reserved, &g_sLangTxt_IEC_reserved);
	rs_AddString(g_sLangID_IEC_questionable, &g_sLangTxt_IEC_questionable);
	rs_AddString(g_sLangID_IEC_nooverflow, &g_sLangTxt_IEC_nooverflow);
	rs_AddString(g_sLangID_IEC_overflow, &g_sLangTxt_IEC_overflow);
	rs_AddString(g_sLangID_IEC_normal, &g_sLangTxt_IEC_normal);
	rs_AddString(g_sLangID_IEC_outofrange, &g_sLangTxt_IEC_outofrange);
	rs_AddString(g_sLangID_IEC_badreference, &g_sLangTxt_IEC_badreference);
	rs_AddString(g_sLangID_IEC_noOscillatory, &g_sLangTxt_IEC_noOscillatory);
	rs_AddString(g_sLangID_IEC_oscillatory, &g_sLangTxt_IEC_oscillatory);
	rs_AddString(g_sLangID_IEC_nofailure, &g_sLangTxt_IEC_nofailure);
	rs_AddString(g_sLangID_IEC_failure, &g_sLangTxt_IEC_failure);
	rs_AddString(g_sLangID_IEC_noovertime, &g_sLangTxt_IEC_noovertime);
	rs_AddString(g_sLangID_IEC_overtime, &g_sLangTxt_IEC_overtime);
	rs_AddString(g_sLangID_IEC_noinconsistent, &g_sLangTxt_IEC_noinconsistent);
	rs_AddString(g_sLangID_IEC_inconsistent, &g_sLangTxt_IEC_inconsistent);
	rs_AddString(g_sLangID_IEC_accurate, &g_sLangTxt_IEC_accurate);
	rs_AddString(g_sLangID_IEC_inaccurate, &g_sLangTxt_IEC_inaccurate);
	rs_AddString(g_sLangID_IEC_process, &g_sLangTxt_IEC_process);
	rs_AddString(g_sLangID_IEC_substituted, &g_sLangTxt_IEC_substituted);
	rs_AddString(g_sLangID_IEC_run, &g_sLangTxt_IEC_run);
	rs_AddString(g_sLangID_IEC_test, &g_sLangTxt_IEC_test);
	rs_AddString(g_sLangID_IEC_nolock, &g_sLangTxt_IEC_nolock);
	rs_AddString(g_sLangID_IEC_lock, &g_sLangTxt_IEC_lock);



	rs_AddString(g_sLangID_IEC_ImportIecfg, &g_sLangTxt_IEC_ImportIecfg);
	rs_AddString(g_sLangID_IEC_Detect, &g_sLangTxt_IEC_Detect);
	rs_AddString(g_sLangID_IEC_DetectStop, &g_sLangTxt_IEC_DetectStop);
	rs_AddString(g_sLangID_IEC_Clear, &g_sLangTxt_IEC_Clear);
	rs_AddString(g_sLangID_IEC_BeginRecord, &g_sLangTxt_IEC_BeginRecord);
	rs_AddString(g_sLangID_IEC_UseSmv, &g_sLangTxt_IEC_UseSmv);
	rs_AddString(g_sLangID_IEC_UseGoose, &g_sLangTxt_IEC_UseGoose);
	rs_AddString(g_sLangID_IEC_SmvFirstIsTime, &g_sLangTxt_IEC_SmvFirstIsTime);
	rs_AddString(g_sLangID_IEC_WriteDetectPkg, &g_sLangTxt_IEC_WriteDetectPkg);
	rs_AddString(g_sLangID_IEC_WriteRcvPkg, &g_sLangTxt_IEC_WriteRcvPkg);
	rs_AddString(g_sLangID_IEC_AutoWrite, &g_sLangTxt_IEC_AutoWrite);
	rs_AddString(g_sLangID_IEC_SendLength_2, &g_sLangTxt_IEC_SendLength_2);
	rs_AddString(g_sLangID_IEC_FileName, &g_sLangTxt_IEC_FileName);
	rs_AddString(g_sLangID_IEC_SendLength, &g_sLangTxt_IEC_SendLength);
	rs_AddString(g_sLangID_IEC_Writegen, &g_sLangTxt_IEC_Writegen);
	rs_AddString(g_sLangID_IEC_ParasSet, &g_sLangTxt_IEC_ParasSet);
	rs_AddString(g_sLangID_IEC_PacketSending, &g_sLangTxt_IEC_PacketSending);
	rs_AddString(g_sLangID_IEC_OnceValue, &g_sLangTxt_IEC_OnceValue);
	rs_AddString(g_sLangID_IEC_TwiceValue, &g_sLangTxt_IEC_TwiceValue);
	rs_AddString(g_sLangID_IEC_Coeff, &g_sLangTxt_IEC_Coeff);

	rs_AddString(g_sLangID_GOOSE_Single, &g_sLangTxt_GOOSE_Single);
	rs_AddString(g_sLangID_GOOSE_Double, &g_sLangTxt_GOOSE_Double);
	rs_AddString(g_sLangID_GOOSE_String, &g_sLangTxt_GOOSE_String);
	rs_AddString(g_sLangID_GOOSE_Quality, &g_sLangTxt_GOOSE_Quality);
	rs_AddString(g_sLangID_GOOSE_Float, &g_sLangTxt_GOOSE_Float);
	rs_AddString(g_sLangID_Goose_DataType, &g_sLangTxt_Goose_DataType);
	rs_AddString(g_sLangID_Goose_DataValue, &g_sLangTxt_Goose_DataValue);
	rs_AddString(g_sLangID_Goose_SwitchTime, &g_sLangTxt_Goose_SwitchTime);
	rs_AddString(g_sLangID_Goose_Value, &g_sLangTxt_Goose_Value);
	rs_AddString(g_sLangID_Goose_RelativeTime, &g_sLangTxt_Goose_RelativeTime);

	rs_AddString(g_sLangID_CharLib_Name, &g_sLangTxt_CharLib_Name);
	rs_AddString(g_sLangID_CharLib_ZoomIndex, &g_sLangTxt_CharLib_ZoomIndex);
	rs_AddString(g_sLangID_CharLib_FaultPhase, &g_sLangTxt_CharLib_FaultPhase);
	rs_AddString(g_sLangID_CharLib_Index, &g_sLangTxt_CharLib_Index);
	rs_AddString(g_sLangID_CharLib_Value, &g_sLangTxt_CharLib_Value);
	rs_AddString(g_sLangID_CharLib_EdgeType, &g_sLangTxt_CharLib_EdgeType);
	rs_AddString(g_sLangID_CharLib_Points, &g_sLangTxt_CharLib_Points);
	rs_AddString(g_sLangID_CharLib_ErrorBand, &g_sLangTxt_CharLib_ErrorBand);
	rs_AddString(g_sLangID_CharLib_EdgeInfo, &g_sLangTxt_CharLib_EdgeInfo);
	rs_AddString(g_sLangID_CharLib_AttachSetting, &g_sLangTxt_CharLib_AttachSetting);

	rs_AddString(g_sLangID_Smv_SelCb, &g_sLangTxt_Smv_SelCb);
	rs_AddString(g_sLangID_Smv_SelFunc, &g_sLangTxt_Smv_SelFunc);
	rs_AddString(g_sLangID_Smv_Back, &g_sLangTxt_Smv_Back);
	rs_AddString(g_sLangID_Smv_PrevPage, &g_sLangTxt_Smv_PrevPage);
	rs_AddString(g_sLangID_Smv_NextPage, &g_sLangTxt_Smv_NextPage);
	rs_AddString(g_sLangID_Smv_SysSet, &g_sLangTxt_Smv_SysSet);
	rs_AddString(g_sLangID_Smv_ChName, &g_sLangTxt_Smv_ChName);
	rs_AddString(g_sLangID_Smv_Item, &g_sLangTxt_Smv_Item);
	rs_AddString(g_sLangID_Smv_Number, &g_sLangTxt_Smv_Number);
	rs_AddString(g_sLangID_Smv_Name, &g_sLangTxt_Smv_Name);
	rs_AddString(g_sLangID_Smv_PkgValue, &g_sLangTxt_Smv_PkgValue);
	rs_AddString(g_sLangID_Smv_Category, &g_sLangTxt_Smv_Category);
	rs_AddString(g_sLangID_Smv_Rates, &g_sLangTxt_Smv_Rates);
	rs_AddString(g_sLangID_Smv_ShowOneValue, &g_sLangTxt_Smv_ShowOneValue);
	rs_AddString(g_sLangID_Smv_ShowTwoValue, &g_sLangTxt_Smv_ShowTwoValue);
	rs_AddString(g_sLangID_Smv_PRates, &g_sLangTxt_Smv_PRates);
	rs_AddString(g_sLangID_Smv_CRates, &g_sLangTxt_Smv_CRates);
	
	rs_AddString(g_sLangID_Native_EffectiveVol, &g_sLangTxt_Native_EffectiveVol);
	rs_AddString(g_sLangID_Native_EffectiveCurr, &g_sLangTxt_Native_EffectiveCurr);
	rs_AddString(g_sLangID_Native_Power, &g_sLangTxt_Native_Power);
	rs_AddString(g_sLangID_Native_ReactivePow, &g_sLangTxt_Native_ReactivePow);
	rs_AddString(g_sLangID_Native_ApparentPow, &g_sLangTxt_Native_ApparentPow);
	rs_AddString(g_sLangID_Native_PowFactor, &g_sLangTxt_Native_PowFactor);
	rs_AddString(g_sLangID_Native_TotalPow, &g_sLangTxt_Native_TotalPow);
	rs_AddString(g_sLangID_Native_Clear, &g_sLangTxt_Native_Clear);
	rs_AddString(g_sLangID_IEC_FileSaveAs, &g_sLangTxt_IEC_FileSaveAs);
	
}

CString CXLangResource_Native::g_sLangID_Native_LangSetting                 = _T("Native_LangSetting");
CString CXLangResource_Native::g_sLangTxt_Native_LangSetting                = _T("语言设置");
CString CXLangResource_Native::g_sLangID_Native_LangTip                 = _T("Native_LangTip");
CString CXLangResource_Native::g_sLangTxt_Native_LangTip                = _T("提示");
CString CXLangResource_Native::g_sLangID_Native_LangTipContext                 = _T("Native_LangTipContext");
CString CXLangResource_Native::g_sLangTxt_Native_LangTipContext                = _T("语言设置重启后生效");

CString CXLangResource_Native::g_sLangID_Native_Amplitude                 = _T("Native_Amplitude");		
CString CXLangResource_Native::g_sLangTxt_Native_Amplitude                 = _T("幅值");
CString CXLangResource_Native::g_sLangID_Native_Phase                 = _T("Native_Angle");
CString CXLangResource_Native::g_sLangTxt_Native_Phase                 = _T("相位");
CString CXLangResource_Native::g_sLangID_Native_Freq                 = _T("Native_Freq");
CString CXLangResource_Native::g_sLangTxt_Native_Freq                 = _T("频率");
CString CXLangResource_Native::g_sLangID_Native_Unit = _T("Native_Unit");
CString CXLangResource_Native::g_sLangTxt_Native_Unit = _T("单位");
CString CXLangResource_Native::g_sLangID_Native_Channel                = _T("Native_Channel");
CString CXLangResource_Native::g_sLangTxt_Native_Channel                 = _T("通道");
CString CXLangResource_Native::g_sLangID_Native_DC                 = _T("Native_DC");
CString CXLangResource_Native::g_sLangTxt_Native_DC                 = _T("直流");
CString CXLangResource_Native::g_sLangID_Native_Fundamental             = _T("Native_Fundamental");
CString CXLangResource_Native::g_sLangTxt_Native_Fundamental            = _T("基波");

CString CXLangResource_Native::g_sLangID_Harm_Set                = _T("Harm_Set");
CString CXLangResource_Native::g_sLangTxt_Harm_Set                 = _T("谐波设置");
CString CXLangResource_Native::g_sLangID_Harm_Content               = _T("Harm_Content");
CString CXLangResource_Native::g_sLangTxt_Harm_Content                 = _T("谐波含有率");
CString CXLangResource_Native::g_sLangID_Harm_Enable                    = _T("Harm_Enable");
CString CXLangResource_Native::g_sLangTxt_Harm_Enable                      = _T("使能");
CString CXLangResource_Native::g_sLangID_Harm_UChannel                    = _T("Harm_UChannel");
CString CXLangResource_Native::g_sLangTxt_Harm_UChannel                      = _T("电压通道");
CString CXLangResource_Native::g_sLangID_Harm_IChannel                    = _T("Harm_IChannel");
CString CXLangResource_Native::g_sLangTxt_Harm_IChannel                      = _T("电流通道");
CString CXLangResource_Native::g_sLangID_Harm_Reset                    = _T("Harm_Reset");
CString CXLangResource_Native::g_sLangTxt_Harm_Reset                      = _T("谐波清零");
CString CXLangResource_Native::g_sLangID_Harm_FundFreq                    = _T("Harm_FundFreq");
CString CXLangResource_Native::g_sLangTxt_Harm_FundFreq                     = _T("基波频率");
CString CXLangResource_Native::g_sLangID_Harm_Times                   = _T("Harm_Times");
CString CXLangResource_Native::g_sLangTxt_Harm_Times                     = _T("次");

CString CXLangResource_Native::g_sLangID_Native_PhaseA	= _T("Native_PhaseA");
CString CXLangResource_Native::g_sLangTxt_Native_PhaseA	= _T("A相");
CString CXLangResource_Native::g_sLangID_Native_PhaseB	= _T("Native_PhaseB");
CString CXLangResource_Native::g_sLangTxt_Native_PhaseB	= _T("B相");
CString CXLangResource_Native::g_sLangID_Native_PhaseC	= _T("Native_PhaseC");
CString CXLangResource_Native::g_sLangTxt_Native_PhaseC	= _T("C相");
CString CXLangResource_Native::g_sLangID_Native_PhaseO	= _T("Native_PhaseO");
CString CXLangResource_Native::g_sLangTxt_Native_PhaseO	= _T("0相");
CString CXLangResource_Native::g_sLangID_Native_Relay	= _T("Native_Relay");
CString CXLangResource_Native::g_sLangTxt_Native_Relay	= _T("保护");
CString CXLangResource_Native::g_sLangID_Native_Measure	= _T("Native_Measure");
CString CXLangResource_Native::g_sLangTxt_Native_Measure= _T("测量");
CString CXLangResource_Native::g_sLangID_Native_Current	= _T("Native_Current");
CString CXLangResource_Native::g_sLangTxt_Native_Current= _T("电流");
CString CXLangResource_Native::g_sLangID_Native_Voltage	= _T("Native_Voltage");
CString CXLangResource_Native::g_sLangTxt_Native_Voltage= _T("电压");
CString CXLangResource_Native::g_sLangID_Native_OK			=_T("Native_OK");
CString CXLangResource_Native::g_sLangTxt_Native_OK			=_T("确定");
CString CXLangResource_Native::g_sLangID_Native_Cancel			=_T("Native_Cancel");
CString CXLangResource_Native::g_sLangTxt_Native_Cancel			=_T("取消");
CString CXLangResource_Native::g_sLangID_Native_GndA	= _T("Native_GndA");
CString CXLangResource_Native::g_sLangTxt_Native_GndA	= _T("A相接地");
CString CXLangResource_Native::g_sLangID_Native_GndB	= _T("Native_GndB");
CString CXLangResource_Native::g_sLangTxt_Native_GndB	= _T("B相接地");
CString CXLangResource_Native::g_sLangID_Native_GndC	= _T("Native_GndC");
CString CXLangResource_Native::g_sLangTxt_Native_GndC	= _T("C相接地");
CString CXLangResource_Native::g_sLangID_Native_ShortAB	= _T("Native_ShortAB");
CString CXLangResource_Native::g_sLangTxt_Native_ShortAB	= _T("AB短路");
CString CXLangResource_Native::g_sLangID_Native_ShortBC	= _T("Native_ShortBC");
CString CXLangResource_Native::g_sLangTxt_Native_ShortBC	= _T("BC短路");
CString CXLangResource_Native::g_sLangID_Native_ShortCA	= _T("Native_ShortCA");
CString CXLangResource_Native::g_sLangTxt_Native_ShortCA= _T("CA短路");
CString CXLangResource_Native::g_sLangID_Native_GndShortAB	= _T("Native_GndShortAB");
CString CXLangResource_Native::g_sLangTxt_Native_GndShortAB	= _T("AB接地短路");
CString CXLangResource_Native::g_sLangID_Native_GndShortBC	= _T("Native_GndShortBC");
CString CXLangResource_Native::g_sLangTxt_Native_GndShortBC	= _T("BC接地短路");
CString CXLangResource_Native::g_sLangID_Native_GndShortCA	= _T("Native_GndShortCA");
CString CXLangResource_Native::g_sLangTxt_Native_GndShortCA	= _T("CA接地短路");
CString CXLangResource_Native::g_sLangID_Native_ShortABC	= _T("Native_ShortABC");
CString CXLangResource_Native::g_sLangTxt_Native_ShortABC	= _T("三相短路");
CString CXLangResource_Native::g_sLangID_Native_SinglePhase	= _T("Native_SinglePhase");
CString CXLangResource_Native::g_sLangTxt_Native_SinglePhase	= _T("单相系统");
CString CXLangResource_Native::g_sLangID_Native_INotChange	= _T("Native_INotChange");
CString CXLangResource_Native::g_sLangTxt_Native_INotChange	= _T("电流不变");
CString CXLangResource_Native::g_sLangID_Native_UNotChange	= _T("Native_UNotChange");
CString CXLangResource_Native::g_sLangTxt_Native_UNotChange	= _T("电压不变");
CString CXLangResource_Native::g_sLangID_Native_ZNotChange	= _T("Native_ZNotChange");
CString CXLangResource_Native::g_sLangTxt_Native_ZNotChange	= _T("系统阻抗不变");
CString CXLangResource_Native::g_sLangID_Native_UZoomOut	= _T("Native_UZoomOut");
CString CXLangResource_Native::g_sLangTxt_Native_UZoomOut	= _T("电压放大");
CString CXLangResource_Native::g_sLangID_Native_UZoomIn	= _T("Native_UDZoomIn");
CString CXLangResource_Native::g_sLangTxt_Native_UZoomIn	= _T("电压缩小");
CString CXLangResource_Native::g_sLangID_Native_IZoomOut	= _T("Native_IZoomOut");
CString CXLangResource_Native::g_sLangTxt_Native_IZoomOut	= _T("电流放大");
CString CXLangResource_Native::g_sLangID_Native_IZoomIn	= _T("Native_IZoomIn");
CString CXLangResource_Native::g_sLangTxt_Native_IZoomIn	= _T("电流缩小");
CString CXLangResource_Native::g_sLangID_Native_EDPhaseV = _T("Native_EDPhaseV");
CString CXLangResource_Native::g_sLangTxt_Native_EDPhaseV = _T("额定相电压");
CString CXLangResource_Native::g_sLangID_Native_EDCurrent = _T("Native_EDCurrent");
CString CXLangResource_Native::g_sLangTxt_Native_EDCurrent = _T("额定电流");
CString CXLangResource_Native::g_sLangID_Native_EqualAmp = _T("Native_EqualAmp");
CString CXLangResource_Native::g_sLangTxt_Native_EqualAmp = _T("等幅值");
CString CXLangResource_Native::g_sLangID_Native_EqualFreq = _T("Native_EqualFreq");
CString CXLangResource_Native::g_sLangTxt_Native_EqualFreq = _T("等频率");
CString CXLangResource_Native::g_sLangID_Native_PositiveSeq = _T("Native_PositiveSeq");
CString CXLangResource_Native::g_sLangTxt_Native_PositiveSeq = _T("正序");
CString CXLangResource_Native::g_sLangID_Native_NegativeSeq = _T("Native_NegativeSeq");
CString CXLangResource_Native::g_sLangTxt_Native_NegativeSeq = _T("负序");
CString CXLangResource_Native::g_sLangID_Native_ZeroSeq = _T("Native_ZeroSeq");
CString CXLangResource_Native::g_sLangTxt_Native_ZeroSeq = _T("零序");
CString CXLangResource_Native::g_sLangID_Native_Zero = _T("Native_Zero");
CString CXLangResource_Native::g_sLangTxt_Native_Zero = _T("零");
CString CXLangResource_Native::g_sLangID_Native_AllGroup = _T("Native_AllGroup");
CString CXLangResource_Native::g_sLangTxt_Native_AllGroup = _T("总组数:");
CString CXLangResource_Native::g_sLangID_Native_CurGroup = _T("Native_CurGroup");
CString CXLangResource_Native::g_sLangTxt_Native_CurGroup = _T("当前组:");
CString CXLangResource_Native::g_sLangID_Native_LastGroup = _T("Native_LastGroup");
CString CXLangResource_Native::g_sLangTxt_Natve_LastGroup = _T("上一组");
CString CXLangResource_Native::g_sLangID_Native_NextGroup = _T("Native_NextGroup");
CString CXLangResource_Native::g_sLangTxt_Natve_NextGroup = _T("下一组");
CString CXLangResource_Native::g_sLangID_Native_ExBinSet       = _T("Native_ExBinSet");
CString CXLangResource_Native::g_sLangTxt_Native_ExBinSet      = _T("扩展开入设置");
CString CXLangResource_Native::g_sLangID_Native_ExBoutSet      = _T("Native_ExBoutSet");
CString CXLangResource_Native::g_sLangTxt_Native_ExBoutSet     = _T("扩展开出设置");
CString CXLangResource_Native::g_sLangID_Native_GooseDataSet   = _T("Native_GooseDataSet");
CString CXLangResource_Native::g_sLangTxt_Native_GooseDataSet  = _T("Goose数据发送");
CString CXLangResource_Native::g_sLangID_Native_Bin                 = _T("Native_Bin");
CString CXLangResource_Native::g_sLangTxt_Native_Bin                 = _T("开入量");
CString CXLangResource_Native::g_sLangID_Native_Bout                 = _T("Native_Bout");
CString CXLangResource_Native::g_sLangTxt_Native_Bout                 = _T("开出量");

CString CXLangResource_Native::g_sLangID_Native_BinX			 = _T("Native_BinX");
CString CXLangResource_Native::g_sLangTxt_Native_BinX			  = _T("开入");
CString CXLangResource_Native::g_sLangID_Native_BoutX			  = _T("Native_BoutX");
CString CXLangResource_Native::g_sLangTxt_Native_BoutX			   = _T("开出");

CString CXLangResource_Native::g_sLangID_Native_BinEx                 = _T("Native_BinEx");
CString CXLangResource_Native::g_sLangTxt_Native_BinEx                 = _T("扩展开入");
CString CXLangResource_Native::g_sLangID_Native_BoutEx                 = _T("Native_BoutEx");
CString CXLangResource_Native::g_sLangTxt_Native_BoutEx                 = _T("扩展开出");
CString CXLangResource_Native::g_sLangID_Native_Time				= _T("Native_Time");
CString CXLangResource_Native::g_sLangTxt_Native_Time				= _T("时间");
CString CXLangResource_Native::g_sLangID_Native_Index				= _T("Native_Index");
CString CXLangResource_Native::g_sLangTxt_Native_Index				= _T("序号");
CString CXLangResource_Native::g_sLangID_Native_ActType			= _T("Native_ActType");
CString CXLangResource_Native::g_sLangTxt_Native_ActType		= _T("动作类型");
CString CXLangResource_Native::g_sLangID_Native_ActionTime		= _T("Native_ActionTime");
CString CXLangResource_Native::g_sLangTxt_Native_ActionTime		= _T("动作时间(s)");
CString CXLangResource_Native::g_sLangID_Native_CurTypeIdx		= _T("Native_CurTypeIdx");
CString CXLangResource_Native::g_sLangTxt_Native_CurTypeIdx		= _T("当前状态号");
CString CXLangResource_Native::g_sLangID_Native_Group			= _T("Native_Group");
CString CXLangResource_Native::g_sLangTxt_Native_Group			= _T("组");
CString CXLangResource_Native::g_sLangID_Native_SelectAll		= _T("Native_SelectAll");
CString CXLangResource_Native::g_sLangTxt_Native_SelectAll		= _T("全选");
CString CXLangResource_Native::g_sLangID_Native_Reverse			= _T("Native_Reverse");
CString CXLangResource_Native::g_sLangTxt_Native_Reverse		= _T("取反");
CString CXLangResource_Native::g_sLangID_Native_Repair			= _T("Native_Repair");
CString CXLangResource_Native::g_sLangTxt_Native_Repair			= _T("置检修");
CString CXLangResource_Native::g_sLangID_Native_IEDName			= _T("Native_IEDName");
CString CXLangResource_Native::g_sLangTxt_Native_IEDName		= _T("IED名称");
CString CXLangResource_Native::g_sLangID_Native_APPID			= _T("Native_APPID");
CString CXLangResource_Native::g_sLangTxt_Native_APPID			= _T("应用标识(APPID)    0x");
CString CXLangResource_Native::g_sLangID_Native_CommonPara		= _T("Native_CommonPara");
CString CXLangResource_Native::g_sLangTxt_Native_CommonPara		= _T("通用参数");
CString CXLangResource_Native::g_sLangID_Native_Type			= _T("Native_Type");
CString CXLangResource_Native::g_sLangTxt_Native_Type			= _T("类型:");
CString CXLangResource_Native::g_sLangID_Native_Action                 = _T("Native_Action");
CString CXLangResource_Native::g_sLangTxt_Native_Action                 = _T("动作值(V):");
CString CXLangResource_Native::g_sLangID_Native_ReturnVal                 = _T("Native_ReturnVal");
CString CXLangResource_Native::g_sLangTxt_Native_ReturnVal                 = _T("返回值(V):");
CString CXLangResource_Native::g_sLangID_Native_ReturnCoeff                = _T("Native_ReturnCoeff");
CString CXLangResource_Native::g_sLangTxt_Native_ReturnCoeff                 = _T("返回系数");
CString CXLangResource_Native::g_sLangID_Native_LogicOr                 = _T("Native_LogicOr");
CString CXLangResource_Native::g_sLangTxt_Native_LogicOr                 = _T("逻辑或");
CString CXLangResource_Native::g_sLangID_Native_LogicAnd                 = _T("Native_LogicAnd");
CString CXLangResource_Native::g_sLangTxt_Native_LogicAnd                 = _T("逻辑与");
CString CXLangResource_Native::g_sLangID_Native_Delete	= _T("Native_Delete");
CString CXLangResource_Native::g_sLangTxt_Native_Delete	= _T("删除");
CString CXLangResource_Native::g_sLangID_Native_Enter	= _T("Native_Enter");
CString CXLangResource_Native::g_sLangTxt_Native_Enter	= _T("完成");
CString CXLangResource_Native::g_sLangID_Native_Esc	= _T("Native_Esc");
CString CXLangResource_Native::g_sLangTxt_Native_Esc	= _T("关闭");
CString CXLangResource_Native::g_sLangID_Native_Caps	= _T("Native_Caps");
CString CXLangResource_Native::g_sLangTxt_Native_Caps	= _T("大小写");
CString CXLangResource_Native::g_sLangID_Native_Space	= _T("Native_Space");
CString CXLangResource_Native::g_sLangTxt_Native_Space	= _T("空格");
CString CXLangResource_Native::g_sLangID_Native_State = _T("Native_State");
CString CXLangResource_Native::g_sLangTxt_Native_State = _T("状态");
CString CXLangResource_Native::g_sLangID_Native_Maps = _T("Native_Maps");
CString CXLangResource_Native::g_sLangTxt_Native_Maps = _T("映射");
CString CXLangResource_Native::g_sLangID_Native_Chs = _T("Native_Chs");
CString CXLangResource_Native::g_sLangTxt_Native_Chs = _T("中/英");
CString CXLangResource_Native::g_sLangID_Native_Eng = _T("Native_Eng");
CString CXLangResource_Native::g_sLangTxt_Native_Eng = _T("英/中");
CString CXLangResource_Native::g_sLangID_Native_Choose = _T("Native_Choose");
CString CXLangResource_Native::g_sLangTxt_Native_Choose = _T("选择");
CString CXLangResource_Native::g_sLangID_Native_Name = _T("Native_Name");
CString CXLangResource_Native::g_sLangTxt_Native_Name = _T("名称");
CString CXLangResource_Native::g_sLangID_Native_ChooseOpenFile = _T("Native_ChooseOpenFile");
CString CXLangResource_Native::g_sLangTxt_Native_ChooseOpenFile = _T("选择需要打开的文件");
CString CXLangResource_Native::g_sLangID_Native_FileFolder = _T("Native_FileFolder");
CString CXLangResource_Native::g_sLangTxt_Native_FileFolder = _T("文件目录");
CString CXLangResource_Native::g_sLangID_Native_FileName = _T("Native_FileName");
CString CXLangResource_Native::g_sLangTxt_Native_FileName = _T("文件名称");
CString CXLangResource_Native::g_sLangID_Native_NoTimeSync = _T("Native_NoTimeSync");
CString CXLangResource_Native::g_sLangTxt_Native_NoTimeSync = _T("未对时");


CString CXLangResource_Native::g_sLangID_Manual_IV                 = _T("Manual_IV");
CString CXLangResource_Native::g_sLangTxt_Manual_IV                 = _T("电流电压");
CString CXLangResource_Native::g_sLangID_Manual_OtherParam                 = _T("Manual_OtherParam");
CString CXLangResource_Native::g_sLangTxt_Manual_OtherParam                 = _T("其它参数设置");
CString CXLangResource_Native::g_sLangID_Manual_Changing                 = _T("Manual_Changing");
CString CXLangResource_Native::g_sLangTxt_Manual_Changing                 = _T("递变");
CString CXLangResource_Native::g_sLangID_Manual_InitVal                 = _T("Manual_InitVal");
CString CXLangResource_Native::g_sLangTxt_Manual_InitVal                 = _T("始值(V):");
CString CXLangResource_Native::g_sLangID_Manual_ChangeType                 = _T("Manual_ChangeType");
CString CXLangResource_Native::g_sLangTxt_Manual_ChangeType                 = _T("变化方式:");
CString CXLangResource_Native::g_sLangID_Manual_Channel                 = _T("Manual_Channel");
CString CXLangResource_Native::g_sLangTxt_Manual_Channel                 = _T("通道选择:");
CString CXLangResource_Native::g_sLangID_Manual_FinishVal                 = _T("Manual_FinishVal");
CString CXLangResource_Native::g_sLangTxt_Manual_FinishVal                 = _T("终值(V):");
CString CXLangResource_Native::g_sLangID_Manual_Step                 = _T("Manual_Step");
CString CXLangResource_Native::g_sLangTxt_Manual_Step                 = _T("步长(V):");
CString CXLangResource_Native::g_sLangID_Manual_Timer                 = _T("Manual_Timer");
CString CXLangResource_Native::g_sLangTxt_Manual_Timer                 = _T("时间(s):");
CString CXLangResource_Native::g_sLangID_Manual_Old                 = _T("Manual_Old");
CString CXLangResource_Native::g_sLangTxt_Manual_Old                 = _T("老化");
CString CXLangResource_Native::g_sLangID_Manual_Auto                 = _T("Manual_Auto");
CString CXLangResource_Native::g_sLangTxt_Manual_Auto                 = _T("自动");

CString CXLangResource_Native::g_sLangID_Manual_Delayed                 = _T("Manual_Delayed");
CString CXLangResource_Native::g_sLangTxt_Manual_Delayed                 = _T("触发后延时(s):");
CString CXLangResource_Native::g_sLangID_Manual_OutSetting                 = _T("Manual_OutSetting");
CString CXLangResource_Native::g_sLangTxt_Manual_OutSetting                 = _T("开出设置");
CString CXLangResource_Native::g_sLangID_Manual_Out1                 = _T("Manual_Out1");
CString CXLangResource_Native::g_sLangTxt_Manual_Out1                 = _T("开出1");
CString CXLangResource_Native::g_sLangID_Manual_Out2                 = _T("Manual_Out2");
CString CXLangResource_Native::g_sLangTxt_Manual_Out2                 = _T("开出2");
CString CXLangResource_Native::g_sLangID_Manual_Out3                 = _T("Manual_Out3");
CString CXLangResource_Native::g_sLangTxt_Manual_Out3                 = _T("开出3");
CString CXLangResource_Native::g_sLangID_Manual_Out4                 = _T("Manual_Out4");
CString CXLangResource_Native::g_sLangTxt_Manual_Out4                 = _T("开出4");
CString CXLangResource_Native::g_sLangID_Manual_Out5                 = _T("Manual_Out5");
CString CXLangResource_Native::g_sLangTxt_Manual_Out5                 = _T("开出5");
CString CXLangResource_Native::g_sLangID_Manual_Out6                 = _T("Manual_Out6");
CString CXLangResource_Native::g_sLangTxt_Manual_Out6                 = _T("开出6");
CString CXLangResource_Native::g_sLangID_Manual_Out7                 = _T("Manual_Out7");
CString CXLangResource_Native::g_sLangTxt_Manual_Out7                 = _T("开出7");
CString CXLangResource_Native::g_sLangID_Manual_Out8                 = _T("Manual_Out8");
CString CXLangResource_Native::g_sLangTxt_Manual_Out8                 = _T("开出8");
CString CXLangResource_Native::g_sLangID_Manual_InSetting                 = _T("Manual_InSetting");
CString CXLangResource_Native::g_sLangTxt_Manual_InSetting                 = _T("开入设置");
CString CXLangResource_Native::g_sLangID_Manual_InA                 = _T("Manual_InA");
CString CXLangResource_Native::g_sLangTxt_Manual_InA                 = _T("开入A");
CString CXLangResource_Native::g_sLangID_Manual_InB                 = _T("Manual_InB");
CString CXLangResource_Native::g_sLangTxt_Manual_InB                 = _T("开入B");
CString CXLangResource_Native::g_sLangID_Manual_InC                 = _T("Manual_InC");
CString CXLangResource_Native::g_sLangTxt_Manual_InC                 = _T("开入C");
CString CXLangResource_Native::g_sLangID_Manual_InD                 = _T("Manual_InD");
CString CXLangResource_Native::g_sLangTxt_Manual_InD                 = _T("开入D");
CString CXLangResource_Native::g_sLangID_Manual_InE                 = _T("Manual_InE");
CString CXLangResource_Native::g_sLangTxt_Manual_InE                 = _T("开入E");
CString CXLangResource_Native::g_sLangID_Manual_InF                 = _T("Manual_InF");
CString CXLangResource_Native::g_sLangTxt_Manual_InF                 = _T("开入F");
CString CXLangResource_Native::g_sLangID_Manual_InG                 = _T("Manual_InG");
CString CXLangResource_Native::g_sLangTxt_Manual_InG                 = _T("开入G");
CString CXLangResource_Native::g_sLangID_Manual_InH                 = _T("Manual_InH");
CString CXLangResource_Native::g_sLangTxt_Manual_InH                 = _T("开入H");
CString CXLangResource_Native::g_sLangID_Manual_Lock                 = _T("Manual_Lock");
CString CXLangResource_Native::g_sLangTxt_Manual_Lock                 = _T("锁");
CString CXLangResource_Native::g_sLangID_Manual_UnLock                 = _T("Manual_UnLock");
CString CXLangResource_Native::g_sLangTxt_Manual_UnLock                 = _T("解锁");
CString CXLangResource_Native::g_sLangID_Manual_ActionTime                 = _T("Manual_ActionTime");
CString CXLangResource_Native::g_sLangTxt_Manual_ActionTime                 = _T("动作时间(s):");
CString CXLangResource_Native::g_sLangID_Manual_ReturnTime                 = _T("Manual_ReturnTime");
CString CXLangResource_Native::g_sLangTxt_Manual_ReturnTime                 = _T("返回时间(s):");
CString CXLangResource_Native::g_sLangID_Manual_S_E                 = _T("Manual_S_E");
CString CXLangResource_Native::g_sLangTxt_Manual_S_E                 = _T("始-终");
CString CXLangResource_Native::g_sLangID_Manual_S_E_S                 = _T("Manual_S_E_S");
CString CXLangResource_Native::g_sLangTxt_Manual_S_E_S                 = _T("始-终-始");

CString CXLangResource_Native::g_sLangID_State_TrigerSetup                 = _T("State_TrigerSetup");
CString CXLangResource_Native::g_sLangTxt_State_TrigerSetup                 = _T("触发设置");
CString CXLangResource_Native::g_sLangID_State_TrigerCondition                 = _T("State_TrigerCondition");
CString CXLangResource_Native::g_sLangTxt_State_TrigerCondition                 = _T("触发条件:");
CString CXLangResource_Native::g_sLangID_State_OutTime                 = _T("State_OutTime");
CString CXLangResource_Native::g_sLangTxt_State_OutTime                 = _T("输出时间(s):");
CString CXLangResource_Native::g_sLangID_State_TrigerTime                 = _T("State_TrigerTime");
CString CXLangResource_Native::g_sLangTxt_State_TrigerTime                 = _T("触发时刻");
CString CXLangResource_Native::g_sLangID_State_Hour                 = _T("State_Hour");
CString CXLangResource_Native::g_sLangTxt_State_Hour                 = _T("时");
CString CXLangResource_Native::g_sLangID_State_Minute                 = _T("State_Minute");
CString CXLangResource_Native::g_sLangTxt_State_Minute                 = _T("分");
CString CXLangResource_Native::g_sLangID_State_Second                 = _T("State_Second");
CString CXLangResource_Native::g_sLangTxt_State_Second                 = _T("秒");
CString CXLangResource_Native::g_sLangID_State_TrigerHoldTime                 = _T("State_TrigerHoldTime");
CString CXLangResource_Native::g_sLangTxt_State_TrigerHoldTime                 = _T("触发后保持时间(s):");
CString CXLangResource_Native::g_sLangID_State_HoldTime                 = _T("State_HoldTime");
CString CXLangResource_Native::g_sLangTxt_State_HoldTime                 = _T("保持时间(s):");
CString CXLangResource_Native::g_sLangID_State_ShortCalc                 = _T("State_ShortCalc");
CString CXLangResource_Native::g_sLangTxt_State_ShortCalc                 = _T("短路计算");
CString CXLangResource_Native::g_sLangID_State_GradientSet                 = _T("State_GradientSet");
CString CXLangResource_Native::g_sLangTxt_State_GradientSet                 = _T("递变设置");
CString CXLangResource_Native::g_sLangID_State_PasteStateBf                 = _T("State_PasteStateBf");
CString CXLangResource_Native::g_sLangTxt_State_PasteStateBf                 = _T("粘贴状态—前");
CString CXLangResource_Native::g_sLangID_State_InsertStateBf                 = _T("State_InsertStateBf");
CString CXLangResource_Native::g_sLangTxt_State_InsertStateBf                 = _T("插入状态—前");
CString CXLangResource_Native::g_sLangID_State_InsertStateAf                 = _T("State_InsertStateAf");
CString CXLangResource_Native::g_sLangTxt_State_InsertStateAf                 = _T("插入状态—后");
CString CXLangResource_Native::g_sLangID_State_PasteStateAf                 = _T("State_PasteStateAf");
CString CXLangResource_Native::g_sLangTxt_State_PasteStateAf                 = _T("粘贴状态—后");
CString CXLangResource_Native::g_sLangID_State_CopyCurState                 = _T("State_CopyCurState");
CString CXLangResource_Native::g_sLangTxt_State_CopyCurState                 = _T("拷贝当前状态");
CString CXLangResource_Native::g_sLangID_State_DeleteCurState                 = _T("State_DeleteCurState");
CString CXLangResource_Native::g_sLangTxt_State_DeleteCurState                 = _T("删除当前状态");
CString CXLangResource_Native::g_sLangID_State_UISet					= _T("State_UISet");
CString CXLangResource_Native::g_sLangTxt_State_UISet					= _T("电压电流设置");
CString CXLangResource_Native::g_sLangID_State_StateParaSet                 = _T("State_StateParaSet");
CString CXLangResource_Native::g_sLangTxt_State_StateParaSet                 = _T("状态参数设置");
CString CXLangResource_Native::g_sLangID_State_HarmSet                 = _T("State_HarmSet");
CString CXLangResource_Native::g_sLangTxt_State_HarmSet                 = _T("谐波设置");
CString CXLangResource_Native::g_sLangID_State_JudgeCondition			=_T("State_JudgeCondition");
CString CXLangResource_Native::g_sLangTxt_State_JudgeCondition			=_T("开入翻转参考状态");
CString CXLangResource_Native::g_sLangID_State_DCOffSet			=_T("State_DCOffSet");
CString CXLangResource_Native::g_sLangTxt_State_DCOffSet			=_T("叠加衰减直流分量");
CString CXLangResource_Native::g_sLangID_State_Tou			=_T("State_Tou");
CString CXLangResource_Native::g_sLangTxt_State_Tou			=_T("衰减时间常数");
CString CXLangResource_Native::g_sLangID_State_RepeatTimes			=_T("State_RepeatTimes");
CString CXLangResource_Native::g_sLangTxt_State_RepeatTimes			=_T("循环次数");
CString CXLangResource_Native::g_sLangID_State_ChGroup			=_T("State_ChGroup");
CString CXLangResource_Native::g_sLangTxt_State_ChGroup			=_T("组号:");
CString CXLangResource_Native::g_sLangID_State_FaultType			=_T("State_FaultType");
CString CXLangResource_Native::g_sLangTxt_State_FaultType			=_T("故障类型:");
CString CXLangResource_Native::g_sLangID_State_CalcMode			=_T("State_CalcMode");
CString CXLangResource_Native::g_sLangTxt_State_CalcMode			=_T("计算模型:");
CString CXLangResource_Native::g_sLangID_State_ShortI			=_T("State_ShortI");
CString CXLangResource_Native::g_sLangTxt_State_ShortI			=_T("短路电流(A):");
CString CXLangResource_Native::g_sLangID_State_ShortU			=_T("State_ShortU");
CString CXLangResource_Native::g_sLangTxt_State_ShortU			=_T("短路电压(V):");
CString CXLangResource_Native::g_sLangID_State_ZeroCoeff			=_T("State_ZeroCoeff");
CString CXLangResource_Native::g_sLangTxt_State_ZeroCoeff			=_T("零序补偿系数");
CString CXLangResource_Native::g_sLangID_State_CalcType			=_T("State_CalcType");
CString CXLangResource_Native::g_sLangTxt_State_CalcType			=_T("计算方式:");
CString CXLangResource_Native::g_sLangID_State_Amp			=_T("State_Amp");
CString CXLangResource_Native::g_sLangTxt_State_Amp			=_T("幅值:");
CString CXLangResource_Native::g_sLangID_State_Angle			=_T("State_Angle");
CString CXLangResource_Native::g_sLangTxt_State_Angle			=_T("相角:");
CString CXLangResource_Native::g_sLangID_LoadI			=_T("State_LoadI");
CString CXLangResource_Native::g_sLangTxt_LoadI			=_T("负荷电流(A):");
CString CXLangResource_Native::g_sLangID_State_LoadAngle			=_T("State_LoadAngle");
CString CXLangResource_Native::g_sLangTxt_State_LoadAngle			=_T("负荷功角(°):");
CString CXLangResource_Native::g_sLangID_State_Trigger_Time		= _T("State_Trigger_Time");
CString CXLangResource_Native::g_sLangTxt_State_Trigger_Time	= _T("时间触发");
CString CXLangResource_Native::g_sLangID_State_Trigger_TimeAndBin	= _T("State_Trigger_TimeAndBin");
CString CXLangResource_Native::g_sLangTxt_State_Trigger_TimeAndBin	= _T("时间+开入量触发");
CString CXLangResource_Native::g_sLangID_State_Trigger_Bin		= _T("State_Trigger_Bin");
CString CXLangResource_Native::g_sLangTxt_State_Trigger_Bin		= _T("开入量触发");
CString CXLangResource_Native::g_sLangID_State_Trigger_Manu		= _T("State_Trigger_Manu");
CString CXLangResource_Native::g_sLangTxt_State_Trigger_Manu	= _T("手动触发");
CString CXLangResource_Native::g_sLangID_State_Trigger_GPSB		= _T("State_Trigger_GPSB");
CString CXLangResource_Native::g_sLangTxt_State_Trigger_GPSB	= _T("GPS/B码触发");
CString CXLangResource_Native::g_sLangID_State_LinearChange  =  _T("State_LinearChange");
CString CXLangResource_Native::g_sLangTxt_State_LinearChange	= _T("线性变化");
CString CXLangResource_Native::g_sLangID_State_StepChange	= _T("State_StepChange");
CString CXLangResource_Native::g_sLangTxt_State_StepChange	= _T("阶梯变化");
CString CXLangResource_Native::g_sLangID_State_StepTime = _T("State_StepTime");
CString CXLangResource_Native::g_sLangTxt_State_StepTime  = _T("步长时间(s)");
CString CXLangResource_Native::g_sLangID_State_SelectChannel = _T("State_SelectChannel");
CString CXLangResource_Native::g_sLangTxt_State_SelectChannel = _T("选择");
CString CXLangResource_Native::g_sLangID_State_BeginVal = _T("State_BeginVal");
CString CXLangResource_Native::g_sLangTxt_State_BeginVal = _T("始值");
CString CXLangResource_Native::g_sLangID_State_EndVal = _T("State_EndVal");
CString CXLangResource_Native::g_sLangTxt_State_EndVal = _T("终值");
CString CXLangResource_Native::g_sLangID_State_Step = _T("State_Step");
CString CXLangResource_Native::g_sLangTxt_State_Step = _T("步长");
CString CXLangResource_Native::g_sLangID_State_AmpGradient = _T("State_AmpGradient");
CString CXLangResource_Native::g_sLangTxt_State_AmpGradient = _T("幅值递变");
CString CXLangResource_Native::g_sLangID_State_FreqGradient = _T("State_FreqGradient");
CString CXLangResource_Native::g_sLangTxt_State_FreqGradient = _T("频率递变");
CString CXLangResource_Native::g_sLangID_State_LastState =	_T("State_LastState");
CString CXLangResource_Native::g_sLangTxt_State_LastState = _T("上一个状态");
CString CXLangResource_Native::g_sLangID_State_FirstState = _T("State_FirstState");
CString CXLangResource_Native::g_sLangTxt_State_FirstState = _T("第一个状态");
CString CXLangResource_Native::g_sLangID_State_No = _T("State_No");
CString CXLangResource_Native::g_sLangTxt_State_No = _T("否");
CString CXLangResource_Native::g_sLangID_State_Yes = _T("State_Yes");
CString CXLangResource_Native::g_sLangTxt_State_Yes = _T("是");
CString CXLangResource_Native::g_sLangID_State_HarmCount = _T("State_HarmCount");
CString CXLangResource_Native::g_sLangTxt_State_HarmCount = _T("次谐波");

CString CXLangResource_Native::g_sLangID_Gradient_Var		= _T("Gradient_Var");
CString CXLangResource_Native::g_sLangTxt_Gradient_Var		= _T("变量");
CString CXLangResource_Native::g_sLangID_Gradient_VarType		= _T("Gradient_VarType");
CString CXLangResource_Native::g_sLangTxt_Gradient_VarType		= _T("变量类型");
CString CXLangResource_Native::g_sLangID_Gradient_Phase		= _T("Gradient_Phase");
CString CXLangResource_Native::g_sLangTxt_Gradient_Phase		= _T("相位差");
CString CXLangResource_Native::g_sLangID_Gradient_VarSet		= _T("Gradient_VarSet");
CString CXLangResource_Native::g_sLangTxt_Gradient_VarSet		= _T("变量设置");
CString CXLangResource_Native::g_sLangID_Gradient_ChangingSet	= _T("Gradient_ChangingSet");
CString CXLangResource_Native::g_sLangTxt_Gradient_ChangingSet	= _T("递变参数设置");
CString CXLangResource_Native::g_sLangID_Gradient_UnChangingSet	= _T("Gradient_UnChangingSet");
CString CXLangResource_Native::g_sLangTxt_Gradient_UnChangingSet	= _T("非递变通道设置");
CString CXLangResource_Native::g_sLangID_Gradient_OtherSet		= _T("Gradient_OtherSet");
CString CXLangResource_Native::g_sLangTxt_Gradient_OtherSet		= _T("其他参数");
CString CXLangResource_Native::g_sLangID_Gradient_TestResult		= _T("Gradient_TestResult");
CString CXLangResource_Native::g_sLangTxt_Gradient_TestResult	= _T("测试结果");
CString CXLangResource_Native::g_sLangID_Gradient_Init		= _T("Gradient_Init");
CString CXLangResource_Native::g_sLangTxt_Gradient_Init		= _T("变化始值");
CString CXLangResource_Native::g_sLangID_Gradient_Finish		= _T("Gradient_Finish");
CString CXLangResource_Native::g_sLangTxt_Gradient_Finish		= _T("变化终值");
CString CXLangResource_Native::g_sLangID_Gradient_Step		= _T("Gradient_Step");
CString CXLangResource_Native::g_sLangTxt_Gradient_Step		= _T("变化步长");
CString CXLangResource_Native::g_sLangID_Gradient_Time		= _T("Gradient_Time");
CString CXLangResource_Native::g_sLangTxt_Gradient_Time		= _T("故障时间");
CString CXLangResource_Native::g_sLangID_Gradient_Direction		= _T("Gradient_Direction");
CString CXLangResource_Native::g_sLangTxt_Gradient_Direction		= _T("递变方向");
CString CXLangResource_Native::g_sLangID_Gradient_MaxAngle                 = _T("Gradient_MaxAngle");
CString CXLangResource_Native::g_sLangTxt_Gradient_MaxAngle                 = _T("最大灵敏角");
CString CXLangResource_Native::g_sLangID_Gradient_Clockwise                 = _T("Gradient_Clockwise");
CString CXLangResource_Native::g_sLangTxt_Gradient_Clockwise                 = _T("顺时针");
CString CXLangResource_Native::g_sLangID_Gradient_Anticlockwise                 = _T("Gradient_Anticlockwise");
CString CXLangResource_Native::g_sLangTxt_Gradient_Anticlockwise                 = _T("逆时针");
CString CXLangResource_Native::g_sLangID_Gradient_AllFreq                 = _T("Gradient_AllFreq");
CString CXLangResource_Native::g_sLangTxt_Gradient_AllFreq                 = _T("全部频率");
CString CXLangResource_Native::g_sLangID_Gradient_TimeBeforeChange			 = _T("Gradient_TimeBeforeChange"); 
CString CXLangResource_Native::g_sLangTxt_Gradient_TimeBeforeChange			 = _T("变化前时间"); 
CString CXLangResource_Native::g_sLangID_Gradient_TimeBeforeFail			 = _T("Gradient_TimeBeforeFail"); 
CString CXLangResource_Native::g_sLangTxt_Gradient_TimeBeforeFail			 = _T("故障前时间"); 
CString CXLangResource_Native::g_sLangID_Gradient_CurBeforeChange			 = _T("Gradient_CurBeforeChange");  
CString CXLangResource_Native::g_sLangTxt_Gradient_CurBeforeChange			 = _T("变化前电流"); 
CString CXLangResource_Native::g_sLangID_Gradient_Normal			 = _T("Gradient_Normal"); 
CString CXLangResource_Native::g_sLangTxt_Gradient_Normal			 = _T("正常态"); 
CString CXLangResource_Native::g_sLangID_Gradient_Failure			 = _T("Gradient_Failure"); 
CString CXLangResource_Native::g_sLangTxt_Gradient_Failure			 = _T("故障态"); 
CString CXLangResource_Native::g_sLangID_Gradient_ParaSet = _T("Gradient_ParaSet"); 
CString CXLangResource_Native::g_sLangTxt_Gradient_ParaSet = _T("参数设置"); 

CString CXLangResource_Native::g_sLangID_Report_TestChoose			 = _T("Report_TestChoose"); 
CString CXLangResource_Native::g_sLangTxt_Report_TestChoose			 = _T("内容选择"); 
CString CXLangResource_Native::g_sLangID_Report_TestObjInf			 = _T("Report_TestObjInf"); 
CString CXLangResource_Native::g_sLangTxt_Report_TestObjInf			 = _T("测试对象信息"); 
CString CXLangResource_Native::g_sLangID_Report_SubInformation		 = _T("Report_SubInformation"); 
CString CXLangResource_Native::g_sLangTxt_Report_SubInformation		 = _T("变电站信息");
CString CXLangResource_Native::g_sLangID_Report_SubName				 = _T("Report_SubName"); 
CString CXLangResource_Native::g_sLangTxt_Report_SubName			 = _T("变电站名称");
CString CXLangResource_Native::g_sLangID_Report_SubAddr				 = _T("Report_SubAddr"); 
CString CXLangResource_Native::g_sLangTxt_Report_SubAddr				 = _T("变电站地址");
CString CXLangResource_Native::g_sLangID_Report_LoopName			 = _T("Report_LoopName"); 
CString CXLangResource_Native::g_sLangTxt_Report_LoopName			 = _T("回路名称");
CString CXLangResource_Native::g_sLangID_Report_LoopAddr			 = _T("Report_LoopAddr"); 
CString CXLangResource_Native::g_sLangTxt_Report_LoopAddr			 = _T("回路地址");
CString CXLangResource_Native::g_sLangID_Report_Tester				 = _T("Report_Tester"); 
CString CXLangResource_Native::g_sLangTxt_Report_Tester				 = _T("测试人员");
CString CXLangResource_Native::g_sLangID_Report_ReportTitle			 = _T("Report_ReportTitle"); 
CString CXLangResource_Native::g_sLangTxt_Report_ReportTitle		 = _T("报告标题");
CString CXLangResource_Native::g_sLangID_Report_DeviceInfor			 = _T("Report_DeviceInfor"); 
CString CXLangResource_Native::g_sLangTxt_Report_DeviceInfor			 = _T("装置信息");
CString CXLangResource_Native::g_sLangID_Report_DeviceName			 = _T("Report_DeviceName"); 
CString CXLangResource_Native::g_sLangTxt_Report_DeviceName			 = _T("装置名称");
CString CXLangResource_Native::g_sLangID_Report_DeviceModel			 = _T("Report_DeviceModel"); 
CString CXLangResource_Native::g_sLangTxt_Report_DeviceModel			 = _T("装置型号");
CString CXLangResource_Native::g_sLangID_Report_DeviceAddr			 = _T("Report_DeviceAddr"); 
CString CXLangResource_Native::g_sLangTxt_Report_DeviceAddr			 = _T("装置地址");
CString CXLangResource_Native::g_sLangID_Report_DeviceFactory		 = _T("Report_DeviceFactory"); 
CString CXLangResource_Native::g_sLangTxt_Report_DeviceFactory		 = _T("生产厂家");
CString CXLangResource_Native::g_sLangID_Report_DeviceSN			 = _T("Report_DeviceSN"); 
CString CXLangResource_Native::g_sLangTxt_Report_DeviceSN		     = _T("序列号");
CString CXLangResource_Native::g_sLangID_Report_SettingsNO			 = _T("Report_SettingsNO"); 
CString CXLangResource_Native::g_sLangTxt_Report_SettingsNO		     = _T("定制单编号");
CString CXLangResource_Native::g_sLangID_Report_AdditionalInf		 = _T("Report_AdditionalInf"); 
CString CXLangResource_Native::g_sLangTxt_Report_AdditionalInf		 = _T("附加信息");
CString CXLangResource_Native::g_sLangID_Report_RatedValue			 = _T("Report_RatedValue"); 
CString CXLangResource_Native::g_sLangTxt_Report_RatedValue			 = _T("额定值");
CString CXLangResource_Native::g_sLangID_Report_TestEquInfo			 = _T("Report_TestEquInfo"); 
CString CXLangResource_Native::g_sLangTxt_Report_TestEquInfo		 = _T("测试设备信息");
CString CXLangResource_Native::g_sLangID_Report_DUTs				 = _T("Report_DUTs"); 
CString CXLangResource_Native::g_sLangTxt_Report_DUTs				 = _T("被测装置");
CString CXLangResource_Native::g_sLangID_Report_Title				 = _T("Report_Title"); 
CString CXLangResource_Native::g_sLangTxt_Report_Title				 = _T("报告内容与格式");
CString CXLangResource_Native::g_sLangID_Report_NomSettings		  = _T("Report_NomSettings");  
CString CXLangResource_Native::g_sLangTxt_Report_NomSettings      = _T("额定值"); 	
CString CXLangResource_Native::g_sLangID_Report_Vnom              = _T("Report_Vnom"); 
CString CXLangResource_Native::g_sLangTxt_Report_Vnom             = _T("额定电压"); 
CString CXLangResource_Native::g_sLangID_Report_Vdc               = _T("Report_Vdc"); 
CString CXLangResource_Native::g_sLangTxt_Report_Vdc              = _T("辅助直流"); 
CString CXLangResource_Native::g_sLangID_Report_SureTime          = _T("Report_SureTime");  
CString CXLangResource_Native::g_sLangTxt_Report_SureTime         = _T("开入防抖时间");
CString CXLangResource_Native::g_sLangID_Report_Inom              = _T("Report_Inom"); 
CString CXLangResource_Native::g_sLangTxt_Report_Inom             = _T("额定电流"); 
CString CXLangResource_Native::g_sLangID_Report_Vprim             = _T("Report_Vprim"); 
CString CXLangResource_Native::g_sLangTxt_Report_Vprim            = _T("一次侧电压"); 
CString CXLangResource_Native::g_sLangID_Report_Fnom              = _T("Report_Fnom"); 
CString CXLangResource_Native::g_sLangTxt_Report_Fnom             = _T("额定频率"); 
CString CXLangResource_Native::g_sLangID_Report_Iprim             = _T("Report_Iprim"); 
CString CXLangResource_Native::g_sLangTxt_Report_Iprim            = _T("一次侧电流"); 
CString CXLangResource_Native::g_sLangID_Report_TestAppInfor      = _T("Report_TestAppInfor");  
CString CXLangResource_Native::g_sLangTxt_Report_TestAppInfor     = _T("测试设备信息");
CString CXLangResource_Native::g_sLangID_Report_AppModel          = _T("Report_AppModel"); 
CString CXLangResource_Native::g_sLangTxt_Report_AppModel         = _T("型号"); 
CString CXLangResource_Native::g_sLangID_Report_Imax              = _T("Report_Imax"); 
CString CXLangResource_Native::g_sLangTxt_Report_Imax             = _T("电流最大值"); 
CString CXLangResource_Native::g_sLangID_Report_AppSN             = _T("Report_AppSN"); 
CString CXLangResource_Native::g_sLangTxt_Report_AppSN            = _T("序列号"); 
CString CXLangResource_Native::g_sLangID_Report_TestStartTime     = _T("Report_TestStartTime");  
CString CXLangResource_Native::g_sLangTxt_Report_TestStartTime    = _T("测试开始时间");
CString CXLangResource_Native::g_sLangID_Report_ComPortType       = _T("Report_ComPortType"); 
CString CXLangResource_Native::g_sLangTxt_Report_ComPortType      = _T("通讯口类型"); 
CString CXLangResource_Native::g_sLangID_Report_TestEndTime       = _T("Report_TestEndTime");  
CString CXLangResource_Native::g_sLangTxt_Report_TestEndTime      = _T("测试终止时间");
CString CXLangResource_Native::g_sLangID_Report_Vmax              = _T("Report_Vmax"); 
CString CXLangResource_Native::g_sLangTxt_Report_Vmax             = _T("电压最大值");  

CString CXLangResource_Native::g_sLangID_ChMaps_Name				 = _T("ChMaps_Name"); 
CString CXLangResource_Native::g_sLangTxt_ChMaps_Name				 = _T("名称");
CString CXLangResource_Native::g_sLangID_ChMaps_AnalogCh				 = _T("ChMaps_AnalogCh"); 
CString CXLangResource_Native::g_sLangTxt_ChMaps_AnalogCh				 = _T("模拟量通道");
CString CXLangResource_Native::g_sLangID_ChMaps_DigitalCh				 = _T("ChMaps_DigitalCh"); 
CString CXLangResource_Native::g_sLangTxt_ChMaps_DigitalCh				 = _T("数字量通道");
CString CXLangResource_Native::g_sLangID_ChMaps_WeekCh				 = _T("ChMaps_WeekCh"); 
CString CXLangResource_Native::g_sLangTxt_ChMaps_WeekCh				 = _T("弱信号通道");
CString CXLangResource_Native::g_sLangID_ChMaps_Analog				 = _T("ChMaps_Analog"); 
CString CXLangResource_Native::g_sLangTxt_ChMaps_Analog				 = _T("模拟");
CString CXLangResource_Native::g_sLangID_ChMaps_Digital				 = _T("ChMaps_Digital"); 
CString CXLangResource_Native::g_sLangTxt_ChMaps_Digital				 = _T("数字");
CString CXLangResource_Native::g_sLangID_ChMaps_Week				 = _T("ChMaps_Week"); 
CString CXLangResource_Native::g_sLangTxt_ChMaps_Week				 = _T("弱信号");
CString CXLangResource_Native::g_sLangID_ChMaps_Title				 = _T("ChMaps_Title"); 
CString CXLangResource_Native::g_sLangTxt_ChMaps_Title				 = _T("通道映射设置");
CString CXLangResource_Native::g_sLangID_ChMaps_OutputSel				 = _T("ChMaps_OutputSel"); 
CString CXLangResource_Native::g_sLangTxt_ChMaps_OutputSel				 = _T("输出类型选择");
CString CXLangResource_Native::g_sLangID_ChMaps_DigitalType				 = _T("ChMaps_DigitalType"); 
CString CXLangResource_Native::g_sLangTxt_ChMaps_DigitalType				 = _T("数字报文类型");
CString CXLangResource_Native::g_sLangID_ChMaps_DefautMaps				 = _T("ChMaps_DefautMaps"); 
CString CXLangResource_Native::g_sLangTxt_ChMaps_DefautMaps				 = _T("设置缺省映射");
CString CXLangResource_Native::g_sLangID_ChMaps_ImportChMaps				 = _T("ChMaps_ImportChMaps"); 
CString CXLangResource_Native::g_sLangTxt_ChMaps_ImportChMaps				 = _T("导入通道映射");
CString CXLangResource_Native::g_sLangID_ChMaps_ExportChMaps				 = _T("ChMaps_ExportChMaps"); 
CString CXLangResource_Native::g_sLangTxt_ChMaps_ExportChMaps				 = _T("导出通道映射");

CString CXLangResource_Native::g_sLangID_IEC_SysParasSet				 = _T("IEC_SysParasSet"); 
CString CXLangResource_Native::g_sLangTxt_IEC_SysParasSet				 = _T("系统参数设置");
CString CXLangResource_Native::g_sLangID_IEC_SysParasConfig				 = _T("IEC_SysParasConfig"); 
CString CXLangResource_Native::g_sLangTxt_IEC_SysParasConfig				 = _T("系统参数配置");
CString CXLangResource_Native::g_sLangID_IEC_Message				 = _T("IEC_Message"); 
CString CXLangResource_Native::g_sLangTxt_IEC_Message				 = _T("IEC61850-9-2报文");
CString CXLangResource_Native::g_sLangID_IEC_Publish				 = _T("IEC_Publish"); 
CString CXLangResource_Native::g_sLangTxt_IEC_Publish				 = _T("GOOSE发布");
CString CXLangResource_Native::g_sLangID_IEC_Subscription				 = _T("IEC_Subscription"); 
CString CXLangResource_Native::g_sLangTxt_IEC_Subscription				 = _T("GOOSE订阅");
CString CXLangResource_Native::g_sLangID_IEC_OpenConfig				 = _T("IEC_OpenConfig"); 
CString CXLangResource_Native::g_sLangTxt_IEC_OpenConfig				 = _T("打开配置");
CString CXLangResource_Native::g_sLangID_IEC_OpenConfigFile				 = _T("IEC_OpenConfigFile"); 
CString CXLangResource_Native::g_sLangTxt_IEC_OpenConfigFile				 = _T("打开配置文件");
CString CXLangResource_Native::g_sLangID_IEC_ConfigSaveAs				 = _T("IEC_ConfigSaveAs"); 
CString CXLangResource_Native::g_sLangTxt_IEC_ConfigSaveAs				 = _T("配置另存");
CString CXLangResource_Native::g_sLangID_IEC_ConfigFileSaveAs				 = _T("IEC_ConfigFileSaveAs"); 
CString CXLangResource_Native::g_sLangTxt_IEC_ConfigFileSaveAs				 = _T("配置文件另存为");
CString CXLangResource_Native::g_sLangID_IEC_ImportSCL				 = _T("IEC_ImportSCL"); 
CString CXLangResource_Native::g_sLangTxt_IEC_ImportSCL				 = _T("导入SCL");
CString CXLangResource_Native::g_sLangID_IEC_ImportSCLFile				 = _T("IEC_ImportSCLFile"); 
CString CXLangResource_Native::g_sLangTxt_IEC_ImportSCLFile				 = _T("导入SCL文件");
CString CXLangResource_Native::g_sLangID_IEC_SaveDatas				 = _T("IEC_SaveDatas"); 
CString CXLangResource_Native::g_sLangTxt_IEC_SaveDatas				 = _T("保存数据");
CString CXLangResource_Native::g_sLangID_IEC_Exit				 = _T("IEC_Exit"); 
CString CXLangResource_Native::g_sLangTxt_IEC_Exit				 = _T("退出");
CString CXLangResource_Native::g_sLangID_IEC_DeleteAllButFirst				 = _T("IEC_DeleteAllButFirst"); 
CString CXLangResource_Native::g_sLangTxt_IEC_DeleteAllButFirst				 = _T("删除N-1");
CString CXLangResource_Native::g_sLangID_IEC_UnSelectedAll				 = _T("IEC_UnSelectedAll"); 
CString CXLangResource_Native::g_sLangTxt_IEC_UnSelectedAll				 = _T("全不选");
CString CXLangResource_Native::g_sLangID_IEC_ChEdit				 = _T("IEC_ChEdit"); 
CString CXLangResource_Native::g_sLangTxt_IEC_ChEdit				 = _T("通道编辑");
CString CXLangResource_Native::g_sLangID_IEC_T1Times				 = _T("IEC_T1Times"); 
CString CXLangResource_Native::g_sLangTxt_IEC_T1Times				 = _T("T1时间(ms)");
CString CXLangResource_Native::g_sLangID_IEC_T0Times				 = _T("IEC_T0Times"); 
CString CXLangResource_Native::g_sLangTxt_IEC_T0Times				 = _T("T0时间(ms)");
CString CXLangResource_Native::g_sLangID_IEC_TimeQuality				 = _T("IEC_TimeQuality"); 
CString CXLangResource_Native::g_sLangTxt_IEC_TimeQuality				 = _T("时间品质");
CString CXLangResource_Native::g_sLangID_IEC_GroupDelay					 = _T("IEC_GroupDelay"); 
CString CXLangResource_Native::g_sLangTxt_IEC_GroupDelay				 = _T("组间延时(ms)");
CString CXLangResource_Native::g_sLangID_IEC_Details					 = _T("IEC_Details"); 
CString CXLangResource_Native::g_sLangTxt_IEC_Details					 = _T("详细设置");
CString CXLangResource_Native::g_sLangID_IEC_SamplingRate				 = _T("IEC_SamplingRate"); 
CString CXLangResource_Native::g_sLangTxt_IEC_SamplingRate				 = _T("采样率：");
CString CXLangResource_Native::g_sLangID_IEC_KeepSendAfterStop			 = _T("IEC_KeepSendAfterStop"); 
CString CXLangResource_Native::g_sLangTxt_IEC_KeepSendAfterStop			 = _T("停止后保持发送");
CString CXLangResource_Native::g_sLangID_IEC_StopSending				 = _T("IEC_StopSending"); 
CString CXLangResource_Native::g_sLangTxt_IEC_StopSending				 = _T("停止后终止发送");
CString CXLangResource_Native::g_sLangID_IEC_OtherSettings				 = _T("IEC_OtherSettings"); 
CString CXLangResource_Native::g_sLangTxt_IEC_OtherSettings				 = _T("其它设置");
CString CXLangResource_Native::g_sLangID_IEC_PacketSendingMode			 = _T("IEC_PacketSendingMode"); 
CString CXLangResource_Native::g_sLangTxt_IEC_PacketSendingMode			 = _T("报文发送方式：");
CString CXLangResource_Native::g_sLangID_IEC_PTRatio					 = _T("IEC_PTRatio"); 
CString CXLangResource_Native::g_sLangTxt_IEC_PTRatio					 = _T("PT变比：");
CString CXLangResource_Native::g_sLangID_IEC_CTRatio					 = _T("IEC_CTRatio"); 
CString CXLangResource_Native::g_sLangTxt_IEC_CTRatio					 = _T("CT变比：");
CString CXLangResource_Native::g_sLangID_IEC_ChDescription				 = _T("IEC_ChDescription"); 
CString CXLangResource_Native::g_sLangTxt_IEC_ChDescription				 = _T("通道描述");
CString CXLangResource_Native::g_sLangID_IEC_ChType					     = _T("IEC_ChType"); 
CString CXLangResource_Native::g_sLangTxt_IEC_ChType					 = _T("通道类型");
CString CXLangResource_Native::g_sLangID_IEC_DIMap						 = _T("IEC_DIMap"); 
CString CXLangResource_Native::g_sLangTxt_IEC_DIMap						 = _T("开入映射");
CString CXLangResource_Native::g_sLangID_IEC_SetRepair					= _T("IEC_SetRepair"); 
CString CXLangResource_Native::g_sLangTxt_IEC_SetRepair					= _T("投检修");
CString CXLangResource_Native::g_sLangID_IEC_UnSetRepair				= _T("IEC_UnSetRepair"); 
CString CXLangResource_Native::g_sLangTxt_IEC_UnSetRepair				= _T("不投检修");
CString CXLangResource_Native::g_sLangID_IEC_IMap				= _T("IEC_IMap"); 
CString CXLangResource_Native::g_sLangTxt_IEC_IMap				= _T("电流映射:");
CString CXLangResource_Native::g_sLangID_IEC_UMap				= _T("IEC_UMap"); 
CString CXLangResource_Native::g_sLangTxt_IEC_UMap				= _T("电压映射:");
CString CXLangResource_Native::g_sLangID_IEC_Choose				= _T("IEC_Choose"); 
CString CXLangResource_Native::g_sLangTxt_IEC_Choose				= _T("选择:");
CString CXLangResource_Native::g_sLangID_IEC_Target				= _T("IEC_Target"); 
CString CXLangResource_Native::g_sLangTxt_IEC_Target				= _T("目标MAC地址");
CString CXLangResource_Native::g_sLangID_IEC_Entrance				= _T("IEC_Entrance"); 
CString CXLangResource_Native::g_sLangTxt_IEC_Entrance				= _T("输入口选择");
CString CXLangResource_Native::g_sLangID_IEC_Describe				= _T("IEC_Describe"); 
CString CXLangResource_Native::g_sLangTxt_IEC_Describe				= _T("描述");
CString CXLangResource_Native::g_sLangID_IEC_ChannelNumber				= _T("IEC_ChannelNumber"); 
CString CXLangResource_Native::g_sLangTxt_IEC_ChannelNumber				= _T("通道数");
CString CXLangResource_Native::g_sLangID_IEC_Version				= _T("IEC_Version"); 
CString CXLangResource_Native::g_sLangTxt_IEC_Version				= _T("版本号");
CString CXLangResource_Native::g_sLangID_IEC_Test				= _T("IEC_Test"); 
CString CXLangResource_Native::g_sLangTxt_IEC_Test				= _T("测试(Test)");
CString CXLangResource_Native::g_sLangID_IEC_LifeTime				= _T("IEC_LifeTime"); 
CString CXLangResource_Native::g_sLangTxt_IEC_LifeTime				= _T("允许生存时间(ms)");
CString CXLangResource_Native::g_sLangID_IEC_UnParse				= _T("IEC_ParseGoCB_GoID_Dataset"); 
CString CXLangResource_Native::g_sLangTxt_IEC_UnParse				= _T("解析GoCB,GoID,MAC,Dataset");
CString CXLangResource_Native::g_sLangID_IEC_ChMaps				= _T("IEC_ChMaps"); 
CString CXLangResource_Native::g_sLangTxt_IEC_ChMaps				= _T("通道映射");
CString CXLangResource_Native::g_sLangID_IEC_InitValue				= _T("IEC_InitValue"); 
CString CXLangResource_Native::g_sLangTxt_IEC_InitValue				= _T("初始值");
CString CXLangResource_Native::g_sLangID_IEC_Source				= _T("IEC_Source"); 
CString CXLangResource_Native::g_sLangTxt_IEC_Source				= _T("源MAC地址");
CString CXLangResource_Native::g_sLangID_IEC_Intrance				= _T("IEC_Intrance"); 
CString CXLangResource_Native::g_sLangTxt_IEC_Intrance			= _T("输出口选择");
CString CXLangResource_Native::g_sLangID_IEC_Quality				= _T("IEC_Quality"); 
CString CXLangResource_Native::g_sLangTxt_IEC_Quality			= _T("品质");
CString CXLangResource_Native::g_sLangID_IEC_Delay				= _T("IEC_Delay"); 
CString CXLangResource_Native::g_sLangTxt_IEC_Delay			= _T("采样延时(μs)");
CString CXLangResource_Native::g_sLangID_IEC_Synchronously				= _T("IEC_Synchronously"); 
CString CXLangResource_Native::g_sLangTxt_IEC_Synchronously			= _T("同步方式");
CString CXLangResource_Native::g_sLangID_IEC_ScaleFactor				= _T("IEC_ScaleFactor"); 
CString CXLangResource_Native::g_sLangTxt_IEC_ScaleFactor			= _T("比例因子");
CString CXLangResource_Native::g_sLangID_IEC_SetScaleFactor				= _T("IEC_SetScaleFactor"); 
CString CXLangResource_Native::g_sLangTxt_IEC_SetScaleFactor			= _T("比例因子设置");
CString CXLangResource_Native::g_sLangID_IEC_FMByte				= _T("IEC_FMByte"); 
CString CXLangResource_Native::g_sLangTxt_IEC_FMByte			= _T("百兆口");
CString CXLangResource_Native::g_sLangID_IEC_GMByte			= _T("IEC_GMByte"); 
CString CXLangResource_Native::g_sLangTxt_IEC_GMByte			= _T("千兆口");
CString CXLangResource_Native::g_sLangID_IEC_LCFI				= _T("IEC_LCFI"); 
CString CXLangResource_Native::g_sLangTxt_IEC_LCFI			= _T("LC光口");
CString CXLangResource_Native::g_sLangID_IEC_IRIGB				= _T("IEC_IRIGB"); 
CString CXLangResource_Native::g_sLangTxt_IEC_IRIGB			= _T("B码");
CString CXLangResource_Native::g_sLangID_IEC_STFI				= _T("IEC_STFI"); 
CString CXLangResource_Native::g_sLangTxt_IEC_STFI			= _T("ST光口");

CString CXLangResource_Native::g_sLangID_IEC_FI             = _T("IEC_FI");
CString CXLangResource_Native::g_sLangTxt_IEC_FI            = _T("光口");

CString CXLangResource_Native::g_sLangID_IEC_MACAddr				= _T("IEC_MACAddr"); 
CString CXLangResource_Native::g_sLangTxt_IEC_MACAddr			= _T("MAC地址");
CString CXLangResource_Native::g_sLangID_IEC_DataSetText				= _T("IEC_DataSetText"); 
CString CXLangResource_Native::g_sLangTxt_IEC_DataSetText			= _T("数据集描述");
CString CXLangResource_Native::g_sLangID_IEC_GOOSEIndex				= _T("IEC_GOOSEIndex"); 
CString CXLangResource_Native::g_sLangTxt_IEC_GOOSEIndex			= _T("GOOSE控制块索引");
CString CXLangResource_Native::g_sLangID_IEC_VlanPri				= _T("IEC_VlanPri"); 
CString CXLangResource_Native::g_sLangTxt_IEC_VlanPri			= _T("Vlan优先级");
CString CXLangResource_Native::g_sLangID_IEC_ConfigVersion				= _T("IEC_ConfigVersion"); 
CString CXLangResource_Native::g_sLangTxt_IEC_ConfigVersion			= _T("配置版本");
CString CXLangResource_Native::g_sLangID_IEC_ChAllNumber				= _T("IEC_ChAllNumber"); 
CString CXLangResource_Native::g_sLangTxt_IEC_ChAllNumber			= _T("总通道数");
CString CXLangResource_Native::g_sLangID_IEC_SubChNumber				= _T("IEC_SubChNumber"); 
CString CXLangResource_Native::g_sLangTxt_IEC_SubChNumber			= _T("订阅通道数");
CString CXLangResource_Native::g_sLangID_IEC_SubIED					= _T("IEC_SubIED"); 
CString CXLangResource_Native::g_sLangTxt_IEC_SubIED				= _T("订阅IED");
CString CXLangResource_Native::g_sLangID_IEC_ASDU					= _T("IEC_ASDU"); 
CString CXLangResource_Native::g_sLangTxt_IEC_ASDU					= _T("ASDU数");
CString CXLangResource_Native::g_sLangID_IEC_Find                      = _T("IEC_Find");
CString CXLangResource_Native::g_sLangTxt_IEC_Find                     = _T("查找");
CString CXLangResource_Native::g_sLangID_IEC_SMVPublish                = _T("IEC_SMVPublish");
CString CXLangResource_Native::g_sLangTxt_IEC_SMVPublish               = _T("SMV发布");
CString CXLangResource_Native::g_sLangID_IEC_SMVSubscription           = _T("IEC_SMVSubscription");
CString CXLangResource_Native::g_sLangTxt_IEC_SMVSubscription          = _T("SMV订阅");
CString CXLangResource_Native::g_sLangID_IEC_Configure                 = _T("IEC_Configure");
CString CXLangResource_Native::g_sLangTxt_IEC_Configure                = _T("一键配置");
CString CXLangResource_Native::g_sLangID_IEC_Import                    = _T("IEC_Import");
CString CXLangResource_Native::g_sLangTxt_IEC_Import                   = _T("导入");
CString CXLangResource_Native::g_sLangID_IEC_IEDList                   = _T("IEC_IEDList");
CString CXLangResource_Native::g_sLangTxt_IEC_IEDList                  = _T("IED列表");
CString CXLangResource_Native::g_sLangID_IEC_QualityParaSet            = _T("IEC_QualityParaSet");
CString CXLangResource_Native::g_sLangTxt_IEC_QualityParaSet           = _T("品质参数设置");
CString CXLangResource_Native::g_sLangID_IEC_Validity                  = _T("IEC_Validity");
CString CXLangResource_Native::g_sLangTxt_IEC_Validity                 = _T("有效[bit0-bit1]");
CString CXLangResource_Native::g_sLangID_IEC_Overflow                  = _T("IEC_Overflow");
CString CXLangResource_Native::g_sLangTxt_IEC_Overflow                 = _T("溢出[bit2]");
CString CXLangResource_Native::g_sLangID_IEC_OutOfRange                  = _T("IEC_OutOfRange");
CString CXLangResource_Native::g_sLangTxt_IEC_OutOfRange                 = _T("超值域[bit3]");
CString CXLangResource_Native::g_sLangID_IEC_BadReference                  = _T("IEC_BadReference");
CString CXLangResource_Native::g_sLangTxt_IEC_BadReference                 = _T("坏基准值[bit4]");
CString CXLangResource_Native::g_sLangID_IEC_Oscillatory                  = _T("IEC_Oscillatory");
CString CXLangResource_Native::g_sLangTxt_IEC_Oscillatory                = _T("抖动[bit5]");
CString CXLangResource_Native::g_sLangID_IEC_Failure                  = _T("IEC_Failure");
CString CXLangResource_Native::g_sLangTxt_IEC_Failure                 = _T("故障[bit6]");
CString CXLangResource_Native::g_sLangID_IEC_OldData                 = _T("IEC_OldData");
CString CXLangResource_Native::g_sLangTxt_IEC_OldData                 = _T("旧数据[bit7]");
CString CXLangResource_Native::g_sLangID_IEC_Inconsistent                  = _T("IEC_Inconsistent");
CString CXLangResource_Native::g_sLangTxt_IEC_Inconsistent                 = _T("不一致[bit8]");
CString CXLangResource_Native::g_sLangID_IEC_Inaccurate                  = _T("IEC_Inaccurate");
CString CXLangResource_Native::g_sLangTxt_IEC_Inaccurate                 = _T("不精确[bit9]");
CString CXLangResource_Native::g_sLangID_Channel_Source                  = _T("Channel_Source");
CString CXLangResource_Native::g_sLangTxt_Channel_Source                 = _T("源[bit10]");
CString CXLangResource_Native::g_sLangID_Channel_Test                  = _T("Channel_Test");
CString CXLangResource_Native::g_sLangTxt_Channel_Test                 = _T("测试[bit11]");
CString CXLangResource_Native::g_sLangID_IEC_Opb                  = _T("IEC_Opb");
CString CXLangResource_Native::g_sLangTxt_IEC_Opb                 = _T("操作员闭锁[bit12]");
CString CXLangResource_Native::g_sLangID_IEC_ModifyAllChs                  = _T("IEC_ModifyAllChs");
CString CXLangResource_Native::g_sLangTxt_IEC_ModifyAllChs                 = _T("修改全部通道");
CString CXLangResource_Native::g_sLangID_IEC_DirectSet                  = _T("IEC_DirectSet");
CString CXLangResource_Native::g_sLangTxt_IEC_DirectSet                 = _T("直接设置");
CString CXLangResource_Native::g_sLangID_IEC_good                  = _T("IEC_good");
CString CXLangResource_Native::g_sLangTxt_IEC_good                 = _T("00:好");
CString CXLangResource_Native::g_sLangID_IEC_invalid                  = _T("IEC_invalid");
CString CXLangResource_Native::g_sLangTxt_IEC_invalid                 = _T("01:无效");
CString CXLangResource_Native::g_sLangID_IEC_reserved                  = _T("IEC_reserved");
CString CXLangResource_Native::g_sLangTxt_IEC_reserved                 = _T("10:保留");
CString CXLangResource_Native::g_sLangID_IEC_questionable                  = _T("IEC_questionable");
CString CXLangResource_Native::g_sLangTxt_IEC_questionable                 = _T("11:可疑");
CString CXLangResource_Native::g_sLangID_IEC_nooverflow                  = _T("IEC_nooverflow");
CString CXLangResource_Native::g_sLangTxt_IEC_nooverflow                 = _T("0:无溢出");
CString CXLangResource_Native::g_sLangID_IEC_overflow                  = _T("IEC_overflow");
CString CXLangResource_Native::g_sLangTxt_IEC_overflow                 = _T("1:溢出");
CString CXLangResource_Native::g_sLangID_IEC_normal                 = _T("IEC_normal");
CString CXLangResource_Native::g_sLangTxt_IEC_normal                 = _T("0:正常");
CString CXLangResource_Native::g_sLangID_IEC_outofrange                  = _T("IEC_outofrange");
CString CXLangResource_Native::g_sLangTxt_IEC_outofrange                 = _T("1:超值域");
CString CXLangResource_Native::g_sLangID_IEC_badreference                  = _T("IEC_badreference");
CString CXLangResource_Native::g_sLangTxt_IEC_badreference                 = _T("1:坏基准值");
CString CXLangResource_Native::g_sLangID_IEC_noOscillatory                  = _T("IEC_noOscillatory");
CString CXLangResource_Native::g_sLangTxt_IEC_noOscillatory                 = _T("0:无抖动");
CString CXLangResource_Native::g_sLangID_IEC_oscillatory                  = _T("IEC_oscillatory");
CString CXLangResource_Native::g_sLangTxt_IEC_oscillatory                 = _T("1:有抖动");
CString CXLangResource_Native::g_sLangID_IEC_nofailure                  = _T("IEC_nofailure");
CString CXLangResource_Native::g_sLangTxt_IEC_nofailure                 = _T("0:无故障");
CString CXLangResource_Native::g_sLangID_IEC_failure                  = _T("IEC_failure");
CString CXLangResource_Native::g_sLangTxt_IEC_failure                 = _T("1:有故障");
CString CXLangResource_Native::g_sLangID_IEC_noovertime                  = _T("IEC_noovertime");
CString CXLangResource_Native::g_sLangTxt_IEC_noovertime                 = _T("0:无超时");
CString CXLangResource_Native::g_sLangID_IEC_overtime                  = _T("IEC_overtime");
CString CXLangResource_Native::g_sLangTxt_IEC_overtime                 = _T("1:数据超时");
CString CXLangResource_Native::g_sLangID_IEC_noinconsistent                 = _T("IEC_noinconsistent");
CString CXLangResource_Native::g_sLangTxt_IEC_noinconsistent                 = _T("0:一致");
CString CXLangResource_Native::g_sLangID_IEC_inconsistent                 = _T("IEC_inconsistent");
CString CXLangResource_Native::g_sLangTxt_IEC_inconsistent                 = _T("1:不一致");
CString CXLangResource_Native::g_sLangID_IEC_accurate                  = _T("IEC_accurate");
CString CXLangResource_Native::g_sLangTxt_IEC_accurate                 = _T("0:精确");
CString CXLangResource_Native::g_sLangID_IEC_inaccurate                  = _T("IEC_inaccurate");
CString CXLangResource_Native::g_sLangTxt_IEC_inaccurate                 = _T("1:不精确");
CString CXLangResource_Native::g_sLangID_IEC_process                  = _T("IEC_process");
CString CXLangResource_Native::g_sLangTxt_IEC_process                 = _T("0:过程");
CString CXLangResource_Native::g_sLangID_IEC_substituted                  = _T("IEC_substituted");
CString CXLangResource_Native::g_sLangTxt_IEC_substituted                 = _T("1:被取代");
CString CXLangResource_Native::g_sLangID_IEC_run                  = _T("IEC_run");
CString CXLangResource_Native::g_sLangTxt_IEC_run                 = _T("0:运行");
CString CXLangResource_Native::g_sLangID_IEC_test                 = _T("IEC_test");
CString CXLangResource_Native::g_sLangTxt_IEC_test                 = _T("1:测试");
CString CXLangResource_Native::g_sLangID_IEC_nolock                  = _T("IEC_nolock");
CString CXLangResource_Native::g_sLangTxt_IEC_nolock                = _T("0:不闭锁");
CString CXLangResource_Native::g_sLangID_IEC_lock                 = _T("IEC_lock");
CString CXLangResource_Native::g_sLangTxt_IEC_lock                = _T("1:闭锁");




CString CXLangResource_Native::g_sLangID_IEC_ImportIecfg               = _T("IEC_ImportIecfg");
CString CXLangResource_Native::g_sLangTxt_IEC_ImportIecfg              = _T("导入配置");
CString CXLangResource_Native::g_sLangID_IEC_Detect                    = _T("IEC_Detect");
CString CXLangResource_Native::g_sLangTxt_IEC_Detect                    = _T("开始探测");
CString CXLangResource_Native::g_sLangID_IEC_DetectStop                = _T("IEC_DetectStop");
CString CXLangResource_Native::g_sLangTxt_IEC_DetectStop               = _T("停止探测");
CString CXLangResource_Native::g_sLangID_IEC_Clear                     = _T("IEC_Clear");
CString CXLangResource_Native::g_sLangTxt_IEC_Clear                    = _T("清空列表");
CString CXLangResource_Native::g_sLangID_IEC_BeginRecord                     = _T("IEC_BeginRecord");
CString CXLangResource_Native::g_sLangTxt_IEC_BeginRecord                    = _T("进入监视");
CString CXLangResource_Native::g_sLangID_IEC_UseSmv                     = _T("IEC_UseSmv");
CString CXLangResource_Native::g_sLangTxt_IEC_UseSmv                   = _T("显示Smv");
CString CXLangResource_Native::g_sLangID_IEC_UseGoose                     = _T("IEC_UseGoose");
CString CXLangResource_Native::g_sLangTxt_IEC_UseGoose                  = _T("显示Goose");
CString CXLangResource_Native::g_sLangID_IEC_SmvFirstIsTime                    = _T("IEC_SmvFirstIsTime");
CString CXLangResource_Native::g_sLangTxt_IEC_SmvFirstIsTime                  = _T("SMV第1通道为延时");
CString CXLangResource_Native::g_sLangID_IEC_WriteDetectPkg                    = _T("IEC_WriteDetectPkg");
CString CXLangResource_Native::g_sLangTxt_IEC_WriteDetectPkg                  = _T("模拟探测");
CString CXLangResource_Native::g_sLangID_IEC_WriteRcvPkg                    = _T("IEC_WriteRcvPkg");
CString CXLangResource_Native::g_sLangTxt_IEC_WriteRcvPkg                  = _T("模拟接受报文");
CString CXLangResource_Native::g_sLangID_IEC_AutoWrite                   = _T("IEC_AutoWrite");
CString CXLangResource_Native::g_sLangTxt_IEC_AutoWrite                  = _T("自动模拟");
CString CXLangResource_Native::g_sLangID_IEC_SendLength_2                   = _T("IEC_SendLength_2");
CString CXLangResource_Native::g_sLangTxt_IEC_SendLength_2                  = _T("总长度");
CString CXLangResource_Native::g_sLangID_IEC_FileName                   = _T("IEC_FileName");
CString CXLangResource_Native::g_sLangTxt_IEC_FileName                  = _T("文件名称");
CString CXLangResource_Native::g_sLangID_IEC_SendLength                   = _T("IEC_SendLength");
CString CXLangResource_Native::g_sLangTxt_IEC_SendLength                  = _T("发送长度");
CString CXLangResource_Native::g_sLangID_IEC_Writegen                   = _T("IEC_Writegen");
CString CXLangResource_Native::g_sLangTxt_IEC_Writegen                  = _T("模拟发生器");
CString CXLangResource_Native::g_sLangID_IEC_ParasSet                   = _T("IEC_ParasSet");
CString CXLangResource_Native::g_sLangTxt_IEC_ParasSet                  = _T("参数设置");
CString CXLangResource_Native::g_sLangID_IEC_PacketSending              = _T("IEC_PacketSending");
CString CXLangResource_Native::g_sLangTxt_IEC_PacketSending             = _T("报文输出");
CString CXLangResource_Native::g_sLangID_IEC_OnceValue                  = _T("IEC_OnceValue");
CString CXLangResource_Native::g_sLangTxt_IEC_OnceValue                 = _T("一次值");
CString CXLangResource_Native::g_sLangID_IEC_TwiceValue                  = _T("IEC_TwiceValue");
CString CXLangResource_Native::g_sLangTxt_IEC_TwiceValue                 = _T("二次值");
CString CXLangResource_Native::g_sLangID_IEC_Coeff                      = _T("IEC_Coeff");
CString CXLangResource_Native::g_sLangTxt_IEC_Coeff                    = _T("系数");
CString CXLangResource_Native::g_sLangID_IEC_FileSaveAs                   = _T("IEC_FileSaveAs");
CString CXLangResource_Native::g_sLangTxt_IEC_FileSaveAs                  = _T("文件另存为");

CString CXLangResource_Native::g_sLangID_GOOSE_Single= _T("GOOSE_Single");
CString CXLangResource_Native::g_sLangTxt_GOOSE_Single= _T("单点");
CString CXLangResource_Native::g_sLangID_GOOSE_Double= _T("GOOSE_Double");
CString CXLangResource_Native::g_sLangTxt_GOOSE_Double= _T("双点");
CString CXLangResource_Native::g_sLangID_GOOSE_String= _T("GOOSE_String");
CString CXLangResource_Native::g_sLangTxt_GOOSE_String= _T("字符串");
CString CXLangResource_Native::g_sLangID_GOOSE_Quality= _T("GOOSE_Quality");
CString CXLangResource_Native::g_sLangTxt_GOOSE_Quality= _T("品质");
CString CXLangResource_Native::g_sLangID_GOOSE_Float= _T("GOOSE_Float");
CString CXLangResource_Native::g_sLangTxt_GOOSE_Float= _T("浮点");
CString CXLangResource_Native::g_sLangID_Goose_DataType           = _T("Goose_DataType");
CString CXLangResource_Native::g_sLangTxt_Goose_DataType          = _T("数据类型");
CString CXLangResource_Native::g_sLangID_Goose_DataValue              = _T("Goose_DataValue");
CString CXLangResource_Native::g_sLangTxt_Goose_DataValue             = _T("数值");
CString CXLangResource_Native::g_sLangID_Goose_SwitchTime         = _T("Goose_SwitchTime");
CString CXLangResource_Native::g_sLangTxt_Goose_SwitchTime        = _T("切换时间");
CString CXLangResource_Native::g_sLangID_Goose_Value              = _T("Goose_Value");
CString CXLangResource_Native::g_sLangTxt_Goose_Value             = _T("值");
CString CXLangResource_Native::g_sLangID_Goose_RelativeTime       = _T("Goose_RelativeTime");
CString CXLangResource_Native::g_sLangTxt_Goose_RelativeTime      = _T("相对时间/us");

CString CXLangResource_Native::g_sLangID_CharLib_Name	_T("CharLib_Name");
CString CXLangResource_Native::g_sLangTxt_CharLib_Name	_T("名称");
CString CXLangResource_Native::g_sLangID_CharLib_ZoomIndex	_T("CharLib_ZoomIndex");
CString CXLangResource_Native::g_sLangTxt_CharLib_ZoomIndex	_T("段号");
CString CXLangResource_Native::g_sLangID_CharLib_FaultPhase	_T("CharLib_FaultPhase");
CString CXLangResource_Native::g_sLangTxt_CharLib_FaultPhase	_T("故障相");
CString CXLangResource_Native::g_sLangID_CharLib_Index	_T("CharLib_Index");
CString CXLangResource_Native::g_sLangTxt_CharLib_Index	_T("编号");
CString CXLangResource_Native::g_sLangID_CharLib_Value	_T("CharLib_Value");
CString CXLangResource_Native::g_sLangTxt_CharLib_Value	_T("数值");
CString CXLangResource_Native::g_sLangID_CharLib_EdgeType	_T("CharLib_EdgeType");
CString CXLangResource_Native::g_sLangTxt_CharLib_EdgeType	_T("边类型");
CString CXLangResource_Native::g_sLangID_CharLib_Points	_T("CharLib_Points");
CString CXLangResource_Native::g_sLangTxt_CharLib_Points	_T("测点数");
CString CXLangResource_Native::g_sLangID_CharLib_ErrorBand	_T("CharLib_ErrorBand");
CString CXLangResource_Native::g_sLangTxt_CharLib_ErrorBand	_T("误差带");
CString CXLangResource_Native::g_sLangID_CharLib_EdgeInfo	_T("CharLib_EdgeInfo");
CString CXLangResource_Native::g_sLangTxt_CharLib_EdgeInfo	_T("边详细信息");
CString CXLangResource_Native::g_sLangID_CharLib_AttachSetting	_T("CharLib_AttachSetting");
CString CXLangResource_Native::g_sLangTxt_CharLib_AttachSetting	_T("关联定值");

CString CXLangResource_Native::g_sLangID_Smv_SelCb                       = _T("Smv_SelCb");
CString CXLangResource_Native::g_sLangTxt_Smv_SelCb                      = _T("选择控制块");
CString CXLangResource_Native::g_sLangID_Smv_SelFunc                     = _T("Smv_SelFunc");
CString CXLangResource_Native::g_sLangTxt_Smv_SelFunc                    = _T("选择功能");
CString CXLangResource_Native::g_sLangID_Smv_Back                       = _T("Smv_Back");
CString CXLangResource_Native::g_sLangTxt_Smv_Back                      = _T("返回");
CString CXLangResource_Native::g_sLangID_Smv_PrevPage       = _T("Smv_PrevPage");
CString CXLangResource_Native::g_sLangTxt_Smv_PrevPage      = _T("上一页");
CString CXLangResource_Native::g_sLangID_Smv_NextPage       = _T("Smv_NextPage");
CString CXLangResource_Native::g_sLangTxt_Smv_NextPage      = _T("下一页");
CString CXLangResource_Native::g_sLangID_Smv_SysSet         = _T("Smv_SysSet");
CString CXLangResource_Native::g_sLangTxt_Smv_SysSet        = _T("系统设置");
CString CXLangResource_Native::g_sLangID_Smv_ChName  _T("Smv_ChName");
CString CXLangResource_Native::g_sLangTxt_Smv_ChName  _T("通道名");
CString CXLangResource_Native::g_sLangID_Smv_Item   _T("Smv_Item");
CString CXLangResource_Native::g_sLangTxt_Smv_Item  _T("项目");
CString CXLangResource_Native::g_sLangID_Smv_Number  _T("Smv_Number");
CString CXLangResource_Native::g_sLangTxt_Smv_Number   _T("数目");
CString CXLangResource_Native::g_sLangID_Smv_Name     _T("Smv_Name");
CString CXLangResource_Native::g_sLangTxt_Smv_Name    _T("名称");
CString CXLangResource_Native::g_sLangID_Smv_PkgValue   _T("Smv_PkgValue");
CString CXLangResource_Native::g_sLangTxt_Smv_PkgValue   _T("报文值");
CString CXLangResource_Native::g_sLangID_Smv_Category   _T("Smv_Category");
CString CXLangResource_Native::g_sLangTxt_Smv_Category  _T("类别");
CString CXLangResource_Native::g_sLangID_Smv_Rates       _T("Smv_Rates");
CString CXLangResource_Native::g_sLangTxt_Smv_Rates     _T("变比设置");
CString CXLangResource_Native::g_sLangID_Smv_ShowOneValue    _T("Smv_ShowOneValue");
CString CXLangResource_Native::g_sLangTxt_Smv_ShowOneValue   _T("显示一次值");
CString CXLangResource_Native::g_sLangID_Smv_ShowTwoValue    _T("Smv_ShowTwoValue");
CString CXLangResource_Native::g_sLangTxt_Smv_ShowTwoValue    _T("显示二次值");
CString CXLangResource_Native::g_sLangID_Smv_PRates        _T("Smv_PRates");
CString CXLangResource_Native::g_sLangTxt_Smv_PRates       _T("PT变比");
CString CXLangResource_Native::g_sLangID_Smv_CRates       _T("Smv_CRates");
CString CXLangResource_Native::g_sLangTxt_Smv_CRates      _T("CT变比");

CString CXLangResource_Native::g_sLangID_Native_EffectiveVol  _T("Native_EffectiveVol");
CString CXLangResource_Native::g_sLangTxt_Native_EffectiveVol   _T("电压有效值");
CString CXLangResource_Native::g_sLangID_Native_EffectiveCurr  _T("Native_EffectiveCurr");
CString CXLangResource_Native::g_sLangTxt_Native_EffectiveCurr   _T("电流有效值");
CString CXLangResource_Native::g_sLangID_Native_Power  _T("Native_Power");
CString CXLangResource_Native::g_sLangTxt_Native_Power   _T("有功功率(W)");
CString CXLangResource_Native::g_sLangID_Native_ReactivePow  _T("Native_ReactivePow");
CString CXLangResource_Native::g_sLangTxt_Native_ReactivePow   _T("无功功率(Var)");
CString CXLangResource_Native::g_sLangID_Native_ApparentPow  _T("Native_ApparentPow");
CString CXLangResource_Native::g_sLangTxt_Native_ApparentPow   _T("视在功率(VA)");
CString CXLangResource_Native::g_sLangID_Native_PowFactor  _T("Native_PowFactor");
CString CXLangResource_Native::g_sLangTxt_Native_PowFactor   _T("功率因数");
CString CXLangResource_Native::g_sLangID_Native_TotalPow    _T("Native_TotalPow");
CString CXLangResource_Native::g_sLangTxt_Native_TotalPow   _T("总功率");
CString CXLangResource_Native::g_sLangID_Native_Clear     _T("Native_Clear");
CString CXLangResource_Native::g_sLangTxt_Native_Clear    _T("清空");