//这段源代码由ClassGenerator创建
//版权所有 LiJunqing  lijunqing1224@126.com
//保留所有权利

//XLanguageResourceBase.cpp  CXLanguageResourceAtsBase

#include "stdafx.h"
#include "XLanguageResourcePp.h"
#include "../../Module/API/GlobalConfigApi.h"

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

CString  g_strXLangRsPpBaseFile = _T("RsPpBase");

CXLanguageResourcePpBase::CXLanguageResourcePpBase()
{
	
}


CXLanguageResourcePpBase::~CXLanguageResourcePpBase()
{
	m_oXLangRsPpBase.RemoveAll();
}

void CXLanguageResourcePpBase::InitLangFileForDebug(const CString &strModule)
{
	m_strXLangFile = _P_GetLanguagePath();
    m_strXLangFile.AppendFormat(_T("%s.xml"), strModule.GetString());
}

CXLangItem* CXLanguageResourcePpBase::rs_AddString(const CString &strID, CString *pstrString)
{
	CXLangItem *p = CXLanguage::AddString(strID, pstrString);

	m_oXLangRsPpBase.AddTail(p);

	return p;
}

void CXLanguageResourcePpBase::InitLangRsByFile()
{
	CXLanguageResourceBase::InitLangRsByFile();

	InitLangRsByFileEx(&m_oXLangRsPpBase, g_strXLangRsPpBaseFile);
}

void CXLanguageResourcePpBase::RegisterLanguageResource()
{
	CXLanguageResourceBase::RegisterLanguageResource();
	
	rs_AddString(g_sLangID_PrtcEngine, &g_sLangTxt_PrtcEngine);
	rs_AddString(g_sLangID_FrameSend, &g_sLangTxt_FrameSend);
	rs_AddString(g_sLangID_OpenXMLFail, &g_sLangTxt_OpenXMLFail);
	rs_AddString(g_sLangID_SaveSetFileFail, &g_sLangTxt_SaveSetFileFail);
    rs_AddString(g_sLangID_DataRltnshipError, &g_sLangTxt_DataRltnshipError);
    rs_AddString(g_sLangID_DataRltnshipError2, &g_sLangTxt_DataRltnshipError2);
	rs_AddString(g_sLangID_DataRltnshipError3, &g_sLangTxt_DataRltnshipError3);
	rs_AddString(g_sLangID_SureValueASDU, &g_sLangTxt_SureValueASDU);
	rs_AddString(g_sLangID_PrcsFrameUnExist, &g_sLangTxt_PrcsFrameUnExist);
	rs_AddString(g_sLangID_PointFrameUnExist, &g_sLangTxt_PointFrameUnExist);
	rs_AddString(g_sLangID_PointNotFrame, &g_sLangTxt_PointNotFrame);
	rs_AddString(g_sLangID_PrcsNoData, &g_sLangTxt_PrcsNoData);
	rs_AddString(g_sLangID_DataBufferError, &g_sLangTxt_DataBufferError);

	rs_AddString(g_sLangID_FctnCallErrorBind, &g_sLangTxt_FctnCallErrorBind);
	rs_AddString(g_sLangID_FctnSError, &g_sLangTxt_FctnSError);
	rs_AddString(g_sLangID_DataErrorIndex, &g_sLangTxt_DataErrorIndex);
	rs_AddString(g_sLangID_DataErrorIndex2, &g_sLangTxt_DataErrorIndex2);
	rs_AddString(g_sLangID_GetBbEmpty, &g_sLangTxt_GetBbEmpty);
	rs_AddString(g_sLangID_GetBbError, &g_sLangTxt_GetBbError);
	rs_AddString(g_sLangID_FctnDataCall, &g_sLangTxt_FctnDataCall);
	rs_AddString(g_sLangID_DataUnExist, &g_sLangTxt_DataUnExist);
	rs_AddString(g_sLangID_FctnConDataError, &g_sLangTxt_FctnConDataError);
	rs_AddString(g_sLangID_FctnCallError, &g_sLangTxt_FctnCallError);
	rs_AddString(g_sLangID_FctnCallSysError4, &g_sLangTxt_FctnCallSysError4);
	rs_AddString(g_sLangID_FctnCallData, &g_sLangTxt_FctnCallData);
	rs_AddString(g_sLangID_FctnCallNode, &g_sLangTxt_FctnCallNode);
	rs_AddString(g_sLangID_FctnFireCallError, &g_sLangTxt_FctnFireCallError);
	rs_AddString(g_sLangID_SystemErrorPath, &g_sLangTxt_SystemErrorPath);
	rs_AddString(g_sLangID_DataNodeUnExist4, &g_sLangTxt_DataNodeUnExist4);
	rs_AddString(g_sLangID_DataNodeUnExist3, &g_sLangTxt_DataNodeUnExist3);
	rs_AddString(g_sLangID_DataNodeUnExist2, &g_sLangTxt_DataNodeUnExist2);
	rs_AddString(g_sLangID_DataNodeUnExist, &g_sLangTxt_DataNodeUnExist);
	rs_AddString(g_sLangID_FctnGetCallError, &g_sLangTxt_FctnGetCallError);
	rs_AddString(g_sLangID_FctnSetError, &g_sLangTxt_FctnSetError);
	rs_AddString(g_sLangID_FctnBindSet, &g_sLangTxt_FctnBindSet);
	rs_AddString(g_sLangID_FctnBindCallError, &g_sLangTxt_FctnBindCallError);
	rs_AddString(g_sLangID_FctnGetError, &g_sLangTxt_FctnGetError);
	rs_AddString(g_sLangID_FctnDataSet, &g_sLangTxt_FctnDataSet);
	rs_AddString(g_sLangID_PathNoData, &g_sLangTxt_PathNoData);
	rs_AddString(g_sLangID_SetVariUnExist, &g_sLangTxt_SetVariUnExist);
	rs_AddString(g_sLangID_SetLongVariUnExist, &g_sLangTxt_SetLongVariUnExist);
	rs_AddString(g_sLangID_GetFctnCallErrorLen, &g_sLangTxt_GetFctnCallErrorLen);
	rs_AddString(g_sLangID_GetFctnCallErrorPkg, &g_sLangTxt_GetFctnCallErrorPkg);
	rs_AddString(g_sLangID_AddFctnCallError, &g_sLangTxt_AddFctnCallError);
	rs_AddString(g_sLangID_GetFctnCallError, &g_sLangTxt_GetFctnCallError);
	rs_AddString(g_sLangID_SetFctnCallError, &g_sLangTxt_SetFctnCallError);
	rs_AddString(g_sLangID_FctnCallSysError3, &g_sLangTxt_FctnCallSysError3);
	rs_AddString(g_sLangID_FctnCallSysError2, &g_sLangTxt_FctnCallSysError2);
	rs_AddString(g_sLangID_FctnCallSysError, &g_sLangTxt_FctnCallSysError);
	rs_AddString(g_sLangID_DataIndexError, &g_sLangTxt_DataIndexError);
	rs_AddString(g_sLangID_FctnCallSystem, &g_sLangTxt_FctnCallSystem);
	rs_AddString(g_sLangID_SystemErrorData8, &g_sLangTxt_SystemErrorData8);
	rs_AddString(g_sLangID_SystemErrorData7, &g_sLangTxt_SystemErrorData7);
	rs_AddString(g_sLangID_SystemErrorData6, &g_sLangTxt_SystemErrorData6);
	rs_AddString(g_sLangID_SystemErrorData5, &g_sLangTxt_SystemErrorData5);
	rs_AddString(g_sLangID_SystemErrorData4, &g_sLangTxt_SystemErrorData4);
	rs_AddString(g_sLangID_SystemErrorData3, &g_sLangTxt_SystemErrorData3);
	rs_AddString(g_sLangID_SystemErrorData2, &g_sLangTxt_SystemErrorData2);
	rs_AddString(g_sLangID_SystemErrorData, &g_sLangTxt_SystemErrorData);
	rs_AddString(g_sLangID_FctnDataErrorDsData, &g_sLangTxt_FctnDataErrorDsData);
	rs_AddString(g_sLangID_FctnCallNoReport, &g_sLangTxt_FctnCallNoReport);
	rs_AddString(g_sLangID_FctnCallPoint, &g_sLangTxt_FctnCallPoint);
	rs_AddString(g_sLangID_FctnDataErrorDsPkg, &g_sLangTxt_FctnDataErrorDsPkg);
	rs_AddString(g_sLangID_FctnDataErrorVal, &g_sLangTxt_FctnDataErrorVal);
	rs_AddString(g_sLangID_FctnCallLength, &g_sLangTxt_FctnCallLength);

	rs_AddString(g_sLangID_Constant, &g_sLangTxt_Constant);
    rs_AddString(g_sLangID_DataList, &g_sLangTxt_DataList);
	rs_AddString(g_sLangID_FormatText, &g_sLangTxt_FormatText);
	rs_AddString(g_sLangID_SumCheck, &g_sLangTxt_SumCheck);
	rs_AddString(g_sLangID_CRCCheck, &g_sLangTxt_CRCCheck);
	rs_AddString(g_sLangID_CRCCheck2, &g_sLangTxt_CRCCheck2);
	rs_AddString(g_sLangID_CRCCheck3, &g_sLangTxt_CRCCheck3);
	rs_AddString(g_sLangID_Script, &g_sLangTxt_Script);
	rs_AddString(g_sLangID_EncodeModeNoneName, &g_sLangTxt_EncodeModeNoneName);
	rs_AddString(g_sLangID_EncodeModeSendName, &g_sLangTxt_EncodeModeSendName);
	rs_AddString(g_sLangID_EncodeModeReceiveName, &g_sLangTxt_EncodeModeReceiveName);
	rs_AddString(g_sLangID_EncodeModeSAndRName, &g_sLangTxt_EncodeModeSAndRName);
	rs_AddString(g_sLangID_EncodeModeSOrRName, &g_sLangTxt_EncodeModeSOrRName);
	rs_AddString(g_sLangID_EncodeName, &g_sLangTxt_EncodeName);

	rs_AddString(g_sLangID_Receive, &g_sLangTxt_Receive);
	rs_AddString(g_sLangID_SingDev, &g_sLangTxt_SingDev);
	rs_AddString(g_sLangID_MultDev, &g_sLangTxt_MultDev);
	rs_AddString(g_sLangID_NoDevDataModel, &g_sLangTxt_NoDevDataModel);
	rs_AddString(g_sLangID_ErrorMessage, &g_sLangTxt_ErrorMessage);
	rs_AddString(g_sLangID_Send, &g_sLangTxt_Send);
	rs_AddString(g_sLangID_CommunPathUnExist, &g_sLangTxt_CommunPathUnExist);
	rs_AddString(g_sLangID_CommunPathUnExist2, &g_sLangTxt_CommunPathUnExist2);
	rs_AddString(g_sLangID_CommunPathUnExist3, &g_sLangTxt_CommunPathUnExist3);
	rs_AddString(g_sLangID_ProcessClose, &g_sLangTxt_ProcessClose);
	rs_AddString(g_sLangID_ProcessRun, &g_sLangTxt_ProcessRun);

	rs_AddString(g_sLangID_PrtcPrcsDfn, &g_sLangTxt_PrtcPrcsDfn);
	rs_AddString(g_sLangID_PrtcTempName, &g_sLangTxt_PrtcTempName);
	rs_AddString(g_sLangID_PrtcTempDiff, &g_sLangTxt_PrtcTempDiff);
	rs_AddString(g_sLangID_DataBindRlship, &g_sLangTxt_DataBindRlship);
	rs_AddString(g_sLangID_NoCorrespondingData, &g_sLangTxt_NoCorrespondingData);
	rs_AddString(g_sLangID_LasterTestUnFinsh, &g_sLangTxt_LasterTestUnFinsh);
	rs_AddString(g_sLangID_ChannelTest, &g_sLangTxt_ChannelTest);
	rs_AddString(g_sLangID_PointListEditor, &g_sLangTxt_PointListEditor);
	rs_AddString(g_sLangID_EditDevDataModel, &g_sLangTxt_EditDevDataModel);
	rs_AddString(g_sLangID_ScriptCallError, &g_sLangTxt_ScriptCallError);

	rs_AddString(g_sLangID_UnDefinScript, &g_sLangTxt_UnDefinScript);
	rs_AddString(g_sLangID_NoJumpNode, &g_sLangTxt_NoJumpNode);
	rs_AddString(g_sLangID_JumpNodeNoValue, &g_sLangTxt_JumpNodeNoValue);
	rs_AddString(g_sLangID_PrtcTempFileError, &g_sLangTxt_PrtcTempFileError);
	rs_AddString(g_sLangID_CreatDevFail, &g_sLangTxt_CreatDevFail);
	rs_AddString(g_sLangID_RptDataSetUnExist, &g_sLangTxt_RptDataSetUnExist);
	rs_AddString(g_sLangID_RptDataSet, &g_sLangTxt_RptDataSet);
	rs_AddString(g_sLangID_ResetMessage, &g_sLangTxt_ResetMessage);
	rs_AddString(g_sLangID_ParaBoundsGet, &g_sLangTxt_ParaBoundsGet);
	rs_AddString(g_sLangID_ParaBoundsSet, &g_sLangTxt_ParaBoundsSet);
	rs_AddString(g_sLangID_ParaBoundsClear, &g_sLangTxt_ParaBoundsClear);
	rs_AddString(g_sLangID_ParaBoundsGet2, &g_sLangTxt_ParaBoundsGet2);
	rs_AddString(g_sLangID_ParaBoundsSet2, &g_sLangTxt_ParaBoundsSet2);
	rs_AddString(g_sLangID_ParaBoundsClear2, &g_sLangTxt_ParaBoundsClear2);
	rs_AddString(g_sLangID_ParaBoundsGet3, &g_sLangTxt_ParaBoundsGet3);
	rs_AddString(g_sLangID_ParaBoundsSet3, &g_sLangTxt_ParaBoundsSet3);
	rs_AddString(g_sLangID_ParaBoundsClear3, &g_sLangTxt_ParaBoundsClear3);
	rs_AddString(g_sLangID_ParaBoundsGet4, &g_sLangTxt_ParaBoundsGet4);
	rs_AddString(g_sLangID_DevDaraTmpFile, &g_sLangTxt_DevDaraTmpFile);
	rs_AddString(g_sLangID_CommunSetFile, &g_sLangTxt_CommunSetFile);
	rs_AddString(g_sLangID_DevDataPoint, &g_sLangTxt_DevDataPoint);
	rs_AddString(g_sLangID_OpenSerialFail, &g_sLangTxt_OpenSerialFail);
	rs_AddString(g_sLangID_ReceiveSerialFail, &g_sLangTxt_ReceiveSerialFail);
	rs_AddString(g_sLangID_SetSerialError, &g_sLangTxt_SetSerialError);
	rs_AddString(g_sLangID_SendMessageFail, &g_sLangTxt_SendMessageFail);
	rs_AddString(g_sLangID_ExistSameName, &g_sLangTxt_ExistSameName);
	rs_AddString(g_sLangID_ExistSameName2, &g_sLangTxt_ExistSameName2);
	rs_AddString(g_sLangID_SendMessageFail2, &g_sLangTxt_SendMessageFail2);
	rs_AddString(g_sLangID_ItemNumber, &g_sLangTxt_ItemNumber);
	rs_AddString(g_sLangID_PointTableFile, &g_sLangTxt_PointTableFile);
	rs_AddString(g_sLangID_AddBytesBlock, &g_sLangTxt_AddBytesBlock);
	rs_AddString(g_sLangID_AddDataSets, &g_sLangTxt_AddDataSets);
	rs_AddString(g_sLangID_DataDef, &g_sLangTxt_DataDef);
	rs_AddString(g_sLangID_DataByteBlock, &g_sLangTxt_DataByteBlock);
	rs_AddString(g_sLangID_Length, &g_sLangTxt_Length);
	rs_AddString(g_sLangID_Byte, &g_sLangTxt_Byte);
	rs_AddString(g_sLangID_Msg, &g_sLangTxt_Msg);
	rs_AddString(g_sLangID_DataTypeValue, &g_sLangTxt_DataTypeValue);
	rs_AddString(g_sLangID_FrameVariDefin2, &g_sLangTxt_FrameVariDefin2);


	rs_AddString(g_sLangID_CurrentActSet, &g_sLangTxt_CurrentActSet);
	rs_AddString(g_sLangID_SettingTotalNo, &g_sLangTxt_SettingTotalNo);
	rs_AddString(g_sLangID_CommandTotalTime, &g_sLangTxt_CommandTotalTime);
	rs_AddString(g_sLangID_CommandExecuTime, &g_sLangTxt_CommandExecuTime);
	rs_AddString(g_sLangID_CommandChoseTime, &g_sLangTxt_CommandChoseTime);
	rs_AddString(g_sLangID_CommandExecuMess, &g_sLangTxt_CommandExecuMess);
	rs_AddString(g_sLangID_CommandChoseMess, &g_sLangTxt_CommandChoseMess);
	rs_AddString(g_sLangID_WrongMess, &g_sLangTxt_WrongMess);
	rs_AddString(g_sLangID_RecordPath, &g_sLangTxt_RecordPath);
	rs_AddString(g_sLangID_EnaChangeTime, &g_sLangTxt_EnaChangeTime);
	rs_AddString(g_sLangID_EnaChoseTime, &g_sLangTxt_EnaChoseTime);
	rs_AddString(g_sLangID_MonitErrorTime, &g_sLangTxt_MonitErrorTime);
	rs_AddString(g_sLangID_BeforEnaRead, &g_sLangTxt_BeforEnaRead);
	rs_AddString(g_sLangID_BeforEnaReadTime, &g_sLangTxt_BeforEnaReadTime);

	rs_AddString(g_sLangID_WritDataMess, &g_sLangTxt_WritDataMess);
	rs_AddString(g_sLangID_SetEdtTime, &g_sLangTxt_SetEdtTime);
	rs_AddString(g_sLangID_SetActTime, &g_sLangTxt_SetActTime);
	rs_AddString(g_sLangID_SetEdtMess, &g_sLangTxt_SetEdtMess);
	rs_AddString(g_sLangID_SetActMess, &g_sLangTxt_SetActMess);
	rs_AddString(g_sLangID_TestConnSta, &g_sLangTxt_TestConnSta);
}

long g_nXLanguageResourcePpBase_InitLangTxt = 0;

void CXLanguageResourcePpBase::InitLangTxt()
{
	CXLanguageResourceBase::InitLangTxt();

	if (g_nXLanguageResourcePpBase_InitLangTxt > 0)
	{
		return;
	}

	//避免多次重复初始化
	g_nXLanguageResourcePpBase_InitLangTxt = 1;

	g_sLangID_PrtcEngine             = _T("sPrtcEngine");
	g_sLangTxt_PrtcEngine            = _T("规约引擎程序");
	g_sLangID_FrameSend             = _T("sFrameSend");
	g_sLangTxt_FrameSend            = _T("帧\"%s\"没有指定发送通道");
	g_sLangID_OpenXMLFail             = _T("sOpenXMLFail");
	g_sLangTxt_OpenXMLFail            = _T("打开XML文件失败！");
	g_sLangID_SaveSetFileFail             = _T("sSaveSetFileFail");
	g_sLangTxt_SaveSetFileFail            = _T("保存通讯配置文件失败！");
	g_sLangID_DataRltnshipError             = _T("sDataRltnshipError");
	g_sLangTxt_DataRltnshipError            = _T("数据绑定关系错误：");
	g_sLangID_DataRltnshipError2             = _T("sDataRltnshipError2");
	g_sLangTxt_DataRltnshipError2            = _T("数据绑定定义错误");
	g_sLangID_DataRltnshipError3             = _T("sDataRltnshipError3");
	g_sLangTxt_DataRltnshipError3            = _T("%s : 数据绑定定义错误");
	g_sLangID_SureValueASDU             = _T("sSureValueASDU");
	g_sLangTxt_SureValueASDU            = _T("响应带确认写定值ASDU10");
	g_sLangID_PrcsFrameUnExist             = _T("sPrcsFrameUnExist");
	g_sLangTxt_PrcsFrameUnExist            = _T("过程节点[%s]关联的帧[%s]不存在");
	g_sLangID_PointFrameUnExist             = _T("sPointFrameUnExist");
	g_sLangTxt_PointFrameUnExist            = _T("节点\"%s\"关联的制造帧\"%s\"不存在");
	g_sLangID_PointNotFrame             = _T("sPointNotFrame");
	g_sLangTxt_PointNotFrame            = _T("节点\"%s\"关联的\"%s\"不是制造帧");
	g_sLangID_PrcsNoData             = _T("sPrcsNoData");
	g_sLangTxt_PrcsNoData            = _T("过程\"%s\"没有定义数据接口\"%s\"");
	g_sLangID_DataBufferError             = _T("sDataBufferError");
	g_sLangTxt_DataBufferError            = _T("字节块[%s]数据缓冲错误：nIndex=%d");

	g_sLangID_FctnCallErrorBind             = _T("sFctnCallErrorBind");
	g_sLangTxt_FctnCallErrorBind            = _T("函数BindItemIndex调用错误");
	g_sLangID_FctnSError             = _T("sFctnSError");
	g_sLangTxt_FctnSError            = _T("函数SBindItemIndex绑定错误");
	g_sLangID_DataErrorIndex             = _T("sDataErrorIndex");
	g_sLangTxt_DataErrorIndex            = _T("字节块[%s]数据缓冲错误：nIndex=%d Bytes=%d Length=%d");
	g_sLangID_DataErrorIndex2             = _T("sDataErrorIndex2");
	g_sLangTxt_DataErrorIndex2            = _T("字节块[%s]数据缓冲错误：nIndex=%d Bytes=%d Length=4");
	g_sLangID_GetBbEmpty             = _T("sGetBbEmpty");
	g_sLangTxt_GetBbEmpty            = _T("SetBbValStr：字符串参数指针为空");
	g_sLangID_GetBbError             = _T("sGetBbError");
	g_sLangTxt_GetBbError            = _T("%s(%s)：GetBbValStr(%d,%d)错误");
	g_sLangID_FctnDataCall             = _T("sFctnDataCall");
	g_sLangTxt_FctnDataCall            = _T("%s::GetBbDataStr函数必须在“格式文本”数据字节快中被调用");
	g_sLangID_DataUnExist             = _T("sDataUnExist");
	g_sLangTxt_DataUnExist            = _T("绑定的数据[%s]=[%s]不存在");
	g_sLangID_FctnConDataError             = _T("sFctnConDataError");
	g_sLangTxt_FctnConDataError            = _T("函数SetBindDataL:绑定关系数据属性\"%s\"错误");
	g_sLangID_FctnCallError             = _T("sFctnCallError");
	g_sLangTxt_FctnCallError            = _T("函数AdBindDataList调用错误");
	g_sLangID_FctnCallSysError4             = _T("sFctnCallSysError4");
	g_sLangTxt_FctnCallSysError4             = _T("函数AdBindDataList调用:系统错误(没有关联的设备数据模型)");
	g_sLangID_FctnCallData             = _T("sFctnCallData");
	g_sLangTxt_FctnCallData            = _T("函数AdBindDataList调用:数据绑定错误");
	g_sLangID_FctnCallNode             = _T("sFctnCallNode");
	g_sLangTxt_FctnCallNode            = _T("函数AdBindDataList调用:节点\"%s\" 不存在");
	g_sLangID_FctnFireCallError             = _T("sFctnFireCallError");
	g_sLangTxt_FctnFireCallError            = _T("函数FireDataMsg调用错误");
	g_sLangID_SystemErrorPath             = _T("sSystemErrorPath");
	g_sLangTxt_SystemErrorPath            = _T("系统错误(路径为空)");
	g_sLangID_DataNodeUnExist4             = _T("sDataNodeUnExist4");
	g_sLangTxt_DataNodeUnExist4            = _T("InsertDsData:数据节点不存在");
	g_sLangID_DataNodeUnExist3             = _T("sDataNodeUnExist3");
	g_sLangTxt_DataNodeUnExist3            = _T("InsertBindData:数据节点不存在");
	g_sLangID_DataNodeUnExist2             = _T("sDataNodeUnExist2");
	g_sLangTxt_DataNodeUnExist2            = _T("InsertDataset:数据节点不存在");
	g_sLangID_DataNodeUnExist             = _T("sDataNodeUnExist");
	g_sLangTxt_DataNodeUnExist            = _T("script_InsertLogicDevice:数据节点不存在");
	g_sLangID_FctnGetCallError             = _T("sFctnGetCallError");
	g_sLangTxt_FctnGetCallError            = _T("函数GetBindDataL调用错误");
	g_sLangID_FctnSetError             = _T("sFctnSetError");
	g_sLangTxt_FctnSetError             = _T("函数SetBindDataL:字节块\"%s\"中绑定错误");
	g_sLangID_FctnBindSet             = _T("sFctnBindSet");
	g_sLangTxt_FctnBindSet            = _T("函数SetBindDataL:字节块\"%s\"中绑定数据集");
	g_sLangID_FctnBindCallError             = _T("sFctnBindCallError");
	g_sLangTxt_FctnBindCallError            = _T("函数###BindData###调用错误");
	g_sLangID_FctnGetError             = _T("sFctnGetError");
	g_sLangTxt_FctnGetError            = _T("函数GetBindDeviceDataNode:字节块\"%s\"中绑定错误");
	g_sLangID_FctnDataSet             = _T("sFctnDataSet");
	g_sLangTxt_FctnDataSet            = _T("函数GetBindDeviceDataNode:字节块\"%s\"中绑定数据集");
	g_sLangID_PathNoData             = _T("sPathNoData");
	g_sLangTxt_PathNoData            = _T("path[%s]没有对应的数据节点");
	g_sLangID_SetVariUnExist             = _T("sSetVariUnExist");
	g_sLangTxt_SetVariUnExist            = _T("GetValue:变量\"%s\"不存在");
	g_sLangID_SetLongVariUnExist             = _T("sSetLongVariUnExist");
	g_sLangTxt_SetLongVariUnExist            = _T("SetValueLong:变量\"%s\"不存在");
	g_sLangID_GetFctnCallErrorLen             = _T("sGetFctnCallErrorLen");
	g_sLangTxt_GetFctnCallErrorLen            = _T("GetPkgLen函数调用错误");
	g_sLangID_GetFctnCallErrorPkg             = _T("sGetFctnCallErrorPkg");
	g_sLangTxt_GetFctnCallErrorPkg            = _T("GetPkgNum函数调用错误");
	g_sLangID_AddFctnCallError             = _T("sAddFctnCallError");
	g_sLangTxt_AddFctnCallError            = _T("AddGlobal函数调用错误");
	g_sLangID_GetFctnCallError             = _T("sGetFctnCallError");
	g_sLangTxt_GetFctnCallError            = _T("GetGlobal函数调用错误");
	g_sLangID_SetFctnCallError             = _T("sSetFctnCallError");
	g_sLangTxt_SetFctnCallError            = _T("SetGlobal函数调用错误");
	g_sLangID_FctnCallSysError3             = _T("sFctnCallSysError3");
	g_sLangTxt_FctnCallSysError3            = _T("函数Run调用:系统错误");
	g_sLangID_FctnCallSysError2             = _T("sFctnCallSysError2");
	g_sLangTxt_FctnCallSysError2            = _T("函数SetPpRunState调用:系统错误");
	g_sLangID_FctnCallSysError             = _T("sFctnCallSysError");
	g_sLangTxt_FctnCallSysError            = _T("函数SetPpValid调用:系统错误");
	g_sLangID_DataIndexError             = _T("sDataIndexError");
	g_sLangTxt_DataIndexError            = _T("字节块[%s]数据缓冲错误：nIndex=%d Length=%d");
	g_sLangID_FctnCallSystem             = _T("sFctnCallSystem");
	g_sLangTxt_FctnCallSystem            = _T("函数Connect调用:系统错误(没有关联的设备数据模型)");
	g_sLangID_SystemErrorData8             = _T("sSystemErrorData8");
	g_sLangTxt_SystemErrorData8            = _T("系统错误(路径【%s】对应的数据不存在)");
	g_sLangID_SystemErrorData7             = _T("sSystemErrorData7");
	g_sLangTxt_SystemErrorData7            = _T("系统错误(路径【%s】对应的逻辑设备不存在)");
	g_sLangID_SystemErrorData6             = _T("sSystemErrorData6");
	g_sLangTxt_SystemErrorData6            = _T("系统错误(路径【%s】对应的设备不存在)");
	g_sLangID_SystemErrorData5             = _T("sSystemErrorData5");
	g_sLangTxt_SystemErrorData5            = _T("系统错误(没有关联的设备数据模型)");
	g_sLangID_SystemErrorData4             = _T("sSystemErrorData4");
	g_sLangTxt_SystemErrorData4            = _T("系统错误(不是多设备数据模型)");
	g_sLangID_SystemErrorData3             = _T("sSystemErrorData3");
	g_sLangTxt_SystemErrorData3            = _T("系统错误(数据【%s】没有属性【%s】)");
	g_sLangID_SystemErrorData2             = _T("sSystemErrorData2");
	g_sLangTxt_SystemErrorData2            = _T("系统错误(数据集【%s】没有属性【%s】)");
	g_sLangID_SystemErrorData             = _T("sSystemErrorData");
	g_sLangTxt_SystemErrorData            = _T("系统错误(逻辑设备【%s】没有属性【%s】)");
	g_sLangID_FctnDataErrorDsData             = _T("sFctnDataErrorDsData");
	g_sLangTxt_FctnDataErrorDsData            = _T("函数AdDsDataList调用:数据绑定错误");
	g_sLangID_FctnCallNoReport             = _T("sFctnCallNoReport");
	g_sLangTxt_FctnCallNoReport            = _T("函数AdDsDataList调用:【%s】数据集没有启动报告");
	g_sLangID_FctnCallPoint             = _T("sFctnCallPoint");
	g_sLangTxt_FctnCallPoint            = _T("函数AdDsDataList调用:节点\"%s\" 不存在");
	g_sLangID_FctnDataErrorDsPkg             = _T("sFctnDataErrorDsPkg");
	g_sLangTxt_FctnDataErrorDsPkg            = _T("函数AdDsPkgDetail调用:数据绑定错误");
	g_sLangID_FctnDataErrorVal             = _T("sFctnDataErrorVal");
	g_sLangTxt_FctnDataErrorVal            = _T("函数AdValPkgDetail调用:数据绑定错误");
	g_sLangID_FctnCallLength             = _T("sFctnCallLength");
	g_sLangTxt_FctnCallLength            = _T("函数SetBcd24Float调用:缓冲区长度(%d)不够");
	g_sLangID_Constant             = _T("sConstant");
	g_sLangTxt_Constant            = _T("常量");
	g_sLangID_DataList             = _T("sDataList");
	g_sLangTxt_DataList            = _T("数据列表");
	g_sLangID_FormatText             = _T("sFormatText");
	g_sLangTxt_FormatText            = _T("格式文本");
	g_sLangID_SumCheck             = _T("sSumCheck");
	g_sLangTxt_SumCheck            = _T("和校验");
	g_sLangID_CRCCheck             = _T("sCRCCheck");
	g_sLangTxt_CRCCheck            = _T("CRC校验(初始值0)");
	g_sLangID_CRCCheck2             = _T("sCRCCheck2");
	g_sLangTxt_CRCCheck2            = _T("CRC校验(初始值0xFFFF)");
	g_sLangID_CRCCheck3             = _T("sCRCCheck3");
	g_sLangTxt_CRCCheck3            = _T("CRC校验(查表法)");
	g_sLangID_Script             = _T("sScript");
	g_sLangTxt_Script            = _T("脚本");
	g_sLangID_EncodeModeNoneName             = _T("sEncodeModeNoneName");
	g_sLangTxt_EncodeModeNoneName            = _T("不编码");
	g_sLangID_EncodeModeSendName             = _T("sEncodeModeSendName");
	g_sLangTxt_EncodeModeSendName            = _T("帧编码(发送)");
	g_sLangID_EncodeModeReceiveName             = _T("sEncodeModeReceiveName");
	g_sLangTxt_EncodeModeReceiveName            = _T("帧编码(接收)");
	g_sLangID_EncodeModeSAndRName             = _T("sEncodeModeSAndRName");
	g_sLangTxt_EncodeModeSAndRName            = _T("帧编码(发送接收统一)");
	g_sLangID_EncodeModeSOrRName             = _T("sEncodeModeSOrRName");
	g_sLangTxt_EncodeModeSOrRName            = _T("帧编码(发送接收独立)");
	g_sLangID_EncodeName             = _T("sEncodeName");
	g_sLangTxt_EncodeName            = _T("帧编码");
	g_sLangID_Receive             = _T("sReceive");
	g_sLangTxt_Receive            = _T("接收");
	g_sLangID_SingDev             = _T("sSingDev");
	g_sLangTxt_SingDev            = _T("单一设备");
	g_sLangID_MultDev             = _T("sMultDev");
	g_sLangTxt_MultDev            = _T("多设备");
	g_sLangID_NoDevDataModel             = _T("sNoDevDataModel");
	g_sLangTxt_NoDevDataModel            = _T("没有指定设备数据模型模式");
	g_sLangID_ErrorMessage             = _T("sErrorMessage");
	g_sLangTxt_ErrorMessage            = _T("错误报文:(Begin=%d      Len=%d)");
	g_sLangID_Send             = _T("sSend");
	g_sLangTxt_Send            = _T("发送");
	g_sLangID_CommunPathUnExist             = _T("sCommunPathUnExist");
	g_sLangTxt_CommunPathUnExist            = _T("模板定义的通信通道不存在");
	g_sLangID_CommunPathUnExist2             = _T("sCommunPathUnExist2");
	g_sLangTxt_CommunPathUnExist2            = _T("模板定义的通信通道\"%s\"不存在");
	g_sLangID_CommunPathUnExist3             = _T("sCommunPathUnExist3");
	g_sLangTxt_CommunPathUnExist3            = _T("节点\"%s\"定义的通信通道\"%s\"不存在");
	g_sLangID_ProcessClose             = _T("sProcessClose");
	g_sLangTxt_ProcessClose            = _T("----------过程\"%s\"结束----------");
	g_sLangID_ProcessRun             = _T("sProcessRun");
	g_sLangTxt_ProcessRun             = _T("过程\"%s\"已经运行");
	g_sLangID_PrtcPrcsDfn             = _T("sPrtcPrcsDfn");
	g_sLangTxt_PrtcPrcsDfn             = _T("规约过程定义");
	g_sLangID_PrtcTempName             = _T("sPrtcTempName");
	g_sLangTxt_PrtcTempName             = _T("规约模板名称");
	g_sLangID_PrtcTempDiff             = _T("sPrtcTempDiff");
	g_sLangTxt_PrtcTempDiff             = _T("规约模板的模型模式【%s】与点表文件的模型模式【%s】不一致");
	g_sLangID_DataBindRlship             = _T("sDataBindRlship");
	g_sLangTxt_DataBindRlship             = _T("数据绑定关系：");
	g_sLangID_NoCorrespondingData             = _T("sNoCorrespondingData");
	g_sLangTxt_NoCorrespondingData             = _T("没有对应的数据");
	g_sLangID_LasterTestUnFinsh             = _T("sLasterTestUnFinsh");
	g_sLangTxt_LasterTestUnFinsh             = _T("    +++++++++++上次端口测试没结束: %s");
	g_sLangID_ChannelTest             = _T("sChannelTest");
	g_sLangTxt_ChannelTest             = _T("通道测试：关闭测试通道用时%d");
	g_sLangID_PointListEditor             = _T("sPointListEditor");
	g_sLangTxt_PointListEditor             = _T("点表编辑库PpDeviceModelEdit.dll不存在!");
	g_sLangID_EditDevDataModel             = _T("sEditDevDataModel");
	g_sLangTxt_EditDevDataModel             = _T("[%s] 引擎数据无效，请编辑设备数据模型");
	g_sLangID_ScriptCallError             = _T("sScriptCallError");
	g_sLangTxt_ScriptCallError             = _T("脚本函数SetPkgLen调用错误:对应的模板不存在");
	g_sLangID_UnDefinScript             = _T("sUnDefinScript");
	g_sLangTxt_UnDefinScript             = _T("跳转节点\"%s\"没有定义脚本");
	g_sLangID_NoJumpNode             = _T("sNoJumpNode");
	g_sLangTxt_NoJumpNode             = _T("[%s]无跳转节点");
	g_sLangID_JumpNodeNoValue             = _T("sJumpNodeNoValue");
	g_sLangTxt_JumpNodeNoValue             = _T("跳转节点\"%s\"脚本【%s】没有返回值，使用\"return\"返回");
	g_sLangID_PrtcTempFileError             = _T("sPrtcTempFileError");
	g_sLangTxt_PrtcTempFileError             = _T("规约模板文件\"%s\"  错误");
	g_sLangID_CreatDevFail             = _T("sCreatDevFail");
	g_sLangTxt_CreatDevFail             = _T("创建设备对象失败，设备点表文件\"%s\"错误");
	g_sLangID_RptDataSetUnExist             = _T("sRptDataSetUnExist");
	g_sLangTxt_RptDataSetUnExist             = _T("Reset:报告数据集不存在【%s】");
	g_sLangID_RptDataSet             = _T("sRptDataSet");
	g_sLangTxt_RptDataSet             = _T("Reset:报告数据集【%d】=>>0");
	g_sLangID_ResetMessage             = _T("sResetMessage");
	g_sLangTxt_ResetMessage             = _T("Reset:报文抓包【%d】=>>0");
	g_sLangID_ParaBoundsGet             = _T("sParaBoundsGet");
	g_sLangTxt_ParaBoundsGet             = _T("GetBitInLong16参数nBitIndex=%d越界");
	g_sLangID_ParaBoundsSet             = _T("sParaBoundsSet");
	g_sLangTxt_ParaBoundsSet             = _T("SetBitInLong16参数nBitIndex=%d越界");
	g_sLangID_ParaBoundsClear             = _T("sParaBoundsClear");
	g_sLangTxt_ParaBoundsClear             = _T("ClearBitInLong16参数nBitIndex=%d越界");
	g_sLangID_ParaBoundsGet2             = _T("sParaBoundsGet2");
	g_sLangTxt_ParaBoundsGet2             = _T("GetBitInLong32参数nBitIndex=%d越界");
	g_sLangID_ParaBoundsSet2             = _T("sParaBoundsSet2");
	g_sLangTxt_ParaBoundsSet2             = _T("SetBitInLong32参数nBitIndex=%d越界");
	g_sLangID_ParaBoundsClear2             = _T("sParaBoundsClear2");
	g_sLangTxt_ParaBoundsClear2             = _T("ClearBitInLong32参数nBitIndex=%d越界");
	g_sLangID_ParaBoundsGet3             = _T("sParaBoundsGet3");
	g_sLangTxt_ParaBoundsGet3             = _T("GetBitInLong8参数nBitIndex=%d越界");
	g_sLangID_ParaBoundsSet3             = _T("sParaBoundsSet3");
	g_sLangTxt_ParaBoundsSet3             = _T("SetBitInLong8参数nBitIndex=%d越界");
	g_sLangID_ParaBoundsClear3             = _T("sParaBoundsClear3");
	g_sLangTxt_ParaBoundsClear3             = _T("ClearBitInLong8参数nBitIndex=%d越界");
	g_sLangID_ParaBoundsGet4             = _T("sParaBoundsGet4");
	g_sLangTxt_ParaBoundsGet4             = _T("script_GetBitRangeInLong8参数nBitEnd=%d越界");
	g_sLangID_DevDaraTmpFile             = _T("sDevDaraTmpFile");
	g_sLangTxt_DevDaraTmpFile             = _T("设备数据模型文件不存在：%s");
	g_sLangID_CommunSetFile             = _T("sCommunSetFile");
	g_sLangTxt_CommunSetFile             = _T("通讯配置文件不存在：%s");
	g_sLangID_DevDataPoint             = _T("sDevDataPoint");
	g_sLangTxt_DevDataPoint             = _T("设备数据点表");
	g_sLangID_OpenSerialFail             = _T("sOpenSerialFail");
	g_sLangTxt_OpenSerialFail             = _T("打开串口%d失败！");
	g_sLangID_ReceiveSerialFail             = _T("sReceiveSerialFail");
	g_sLangTxt_ReceiveSerialFail             = _T("获取串口属性失败！");
	g_sLangID_SetSerialError             = _T("sSetSerialError");
	g_sLangTxt_SetSerialError             = _T("设置串口属性错误！");
	g_sLangID_SendMessageFail             = _T("sSendMessageFail");
	g_sLangTxt_SendMessageFail             = _T("向\"%s\"发送报文失败");
	g_sLangID_ExistSameName             = _T("sExistSameName");
	g_sLangTxt_ExistSameName             = _T("存在同名的UDP服务器(IP=%s  Port=%d)");
	g_sLangID_ExistSameName2             = _T("sExistSameName2");
	g_sLangTxt_ExistSameName2             = _T("存在同名的TCP服务器(IP=%s  Port=%d)");
	g_sLangID_SendMessageFail2             = _T("sSendMessageFail2");
	g_sLangTxt_SendMessageFail2             = _T("向\"%s\"发送BroadCast报文失败");
	g_sLangID_ItemNumber             = _T("sItemNumber");
	g_sLangTxt_ItemNumber             = _T("条目号");
	g_sLangID_PointTableFile             = _T("sPointTableFile");
	g_sLangTxt_PointTableFile             = _T("点表文件(*.xml)|*.xml||");
	g_sLangID_AddBytesBlock             = _T("sAddBytesBlock");
	g_sLangTxt_AddBytesBlock             = _T("添加字节块");
	g_sLangID_AddDataSets             = _T("sAddDataSets");
	g_sLangTxt_AddDataSets            = _T("添加数据总集");
	g_sLangID_DataDef             = _T("sDataDef");
	g_sLangTxt_DataDef            = _T("数据定义");
	g_sLangID_DataByteBlock             = _T("sDataByteBlock");
	g_sLangTxt_DataByteBlock          = _T("数据字节块");
	g_sLangID_Length             = _T("sLength");
	g_sLangTxt_Length             = _T("长度");
	g_sLangID_Byte             = _T("sByte");
	g_sLangTxt_Byte          = _T("%s(%s): %s, %d字节");
	g_sLangID_Msg             = _T("sMsg");
	g_sLangTxt_Msg             = _T("报文");
	g_sLangID_DataTypeValue             = _T("sDataTypeValue");
	g_sLangTxt_DataTypeValue             = _T("%s(%s): 数据类型=%s   数值=%s");
	g_sLangID_FrameVariDefin2             = _T("sFrameVariDefin2");
	g_sLangTxt_FrameVariDefin2             = _T("变量定义");




	g_sLangID_CurrentActSet = _T("sCurrentActSet");
	g_sLangTxt_CurrentActSet = _T("当前活动定值区");
	g_sLangID_SettingTotalNo = _T("sSettingTotalNo");
	g_sLangTxt_SettingTotalNo = _T("定值区总数");
	g_sLangID_CommandTotalTime = _T("sCommandTotalTime");
	g_sLangTxt_CommandTotalTime = _T("命令总时间");
	g_sLangID_CommandExecuTime = _T("sCommandExecuTime");
	g_sLangTxt_CommandExecuTime = _T("命令执行时间");
	g_sLangID_CommandChoseTime = _T("sCCommandChoseTime");
	g_sLangTxt_CommandChoseTime = _T("命令选择时间");
	g_sLangID_CommandExecuMess = _T("sCommandExecuMess");
	g_sLangTxt_CommandExecuMess = _T("命令执行信息");
	g_sLangID_CommandChoseMess = _T("sCommandChoseMess");
	g_sLangTxt_CommandChoseMess = _T("命令选择信息");
	g_sLangID_WrongMess = _T("sWrongMess");
	g_sLangTxt_WrongMess = _T("错误信息");
	g_sLangID_RecordPath = _T("sRecordPath");
	g_sLangTxt_RecordPath = _T("录波路径");
	g_sLangID_EnaChangeTime = _T("sEnaChangeTime");
	g_sLangTxt_EnaChangeTime = _T("压板修改间隔时间");
	g_sLangID_EnaChoseTime = _T("sEnaChoseTime");
	g_sLangTxt_EnaChoseTime = _T("压板选择执行间隔时间");
	g_sLangID_MonitErrorTime = _T("sMonitErrorTime");
	g_sLangTxt_MonitErrorTime = _T("监视错误信息");
	g_sLangID_BeforEnaRead = _T("sBeforEnaRead");
	g_sLangTxt_BeforEnaRead = _T("投退压板前读状态");
	g_sLangID_BeforEnaReadTime = _T("sBeforEnaReadTime");
	g_sLangTxt_BeforEnaReadTime = _T("投退压板前读状态后延时");

	g_sLangID_WritDataMess = _T("sWritDataMess");
	g_sLangTxt_WritDataMess = _T("写数据信息");
	g_sLangID_SetEdtTime = _T("sSetEdtTime");
	g_sLangTxt_SetEdtTime = _T("设置编辑区时间");
	g_sLangID_SetActTime = _T("sSetActTime");
	g_sLangTxt_SetActTime = _T("设置活动区时间");
	g_sLangID_SetEdtMess = _T("sSetEdtMess");
	g_sLangTxt_SetEdtMess = _T("设置编辑区信息");
	g_sLangID_SetActMess = _T("sSetActMess");
	g_sLangTxt_SetActMess = _T("设置活动区信息");
	g_sLangID_TestConnSta = _T("sTestConnSta");
	g_sLangTxt_TestConnSta = _T("测试连接状态");

}

CString g_sLangID_PrtcEngine             ;    //= _T("sPrtcEngine");
CString g_sLangTxt_PrtcEngine            ;    //= _T("规约引擎程序");
CString g_sLangID_FrameSend             ;    //= _T("sFrameSend");
CString g_sLangTxt_FrameSend            ;    //= _T("帧\"%s\"没有指定发送通道");
CString g_sLangID_OpenXMLFail             ;    //= _T("sOpenXMLFail");
CString g_sLangTxt_OpenXMLFail            ;    //= _T("打开XML文件失败！");
CString g_sLangID_SaveSetFileFail             ;    //= _T("sSaveSetFileFail");
CString g_sLangTxt_SaveSetFileFail            ;    //= _T("保存通讯配置文件失败！");
CString g_sLangID_DataRltnshipError             ;    //= _T("sDataRltnshipError");
CString g_sLangTxt_DataRltnshipError            ;    //= _T("数据绑定关系错误：");
CString g_sLangID_DataRltnshipError2             ;    //= _T("sDataRltnshipError2");
CString g_sLangTxt_DataRltnshipError2            ;    //= _T("数据绑定定义错误");
CString g_sLangID_DataRltnshipError3             ;    //= _T("sDataRltnshipError3");
CString g_sLangTxt_DataRltnshipError3            ;    //= _T("%s : 数据绑定定义错误");
CString g_sLangID_SureValueASDU             ;    //= _T("sSureValueASDU");
CString g_sLangTxt_SureValueASDU            ;    //= _T("响应带确认写定值ASDU10");
CString g_sLangID_PrcsFrameUnExist             ;    //= _T("sPrcsFrameUnExist");
CString g_sLangTxt_PrcsFrameUnExist            ;    //= _T("过程节点[%s]关联的帧[%s]不存在");
CString g_sLangID_PointFrameUnExist             ;    //= _T("sPointFrameUnExist");
CString g_sLangTxt_PointFrameUnExist            ;    //= _T("节点\"%s\"关联的制造帧\"%s\"不存在");
CString g_sLangID_PointNotFrame             ;    //= _T("sPointNotFrame");
CString g_sLangTxt_PointNotFrame            ;    //= _T("节点\"%s\"关联的\"%s\"不是制造帧");
CString g_sLangID_PrcsNoData             ;    //= _T("sPrcsNoData");
CString g_sLangTxt_PrcsNoData            ;    //= _T("过程\"%s\"没有定义数据接口\"%s\"");
CString g_sLangID_DataBufferError             ;    //= _T("sDataBufferError");
CString g_sLangTxt_DataBufferError            ;    //= _T("字节块[%s]数据缓冲错误：nIndex;    //=%d");

CString g_sLangID_FctnCallErrorBind             ;    //= _T("sFctnCallErrorBind");
CString g_sLangTxt_FctnCallErrorBind            ;    //= _T("函数BindItemIndex调用错误");
CString g_sLangID_FctnSError             ;    //= _T("sFctnSError");
CString g_sLangTxt_FctnSError            ;    //= _T("函数SBindItemIndex绑定错误");
CString g_sLangID_DataErrorIndex             ;    //= _T("sDataErrorIndex");
CString g_sLangTxt_DataErrorIndex            ;    //= _T("字节块[%s]数据缓冲错误：nIndex;    //=%d Bytes;    //=%d Length;    //=%d");
CString g_sLangID_DataErrorIndex2             ;    //= _T("sDataErrorIndex2");
CString g_sLangTxt_DataErrorIndex2            ;    //= _T("字节块[%s]数据缓冲错误：nIndex;    //=%d Bytes;    //=%d Length;    //=4");
CString g_sLangID_GetBbEmpty             ;    //= _T("sGetBbEmpty");
CString g_sLangTxt_GetBbEmpty            ;    //= _T("SetBbValStr：字符串参数指针为空");
CString g_sLangID_GetBbError             ;    //= _T("sGetBbError");
CString g_sLangTxt_GetBbError            ;    //= _T("%s(%s)：GetBbValStr(%d,%d)错误");
CString g_sLangID_FctnDataCall             ;    //= _T("sFctnDataCall");
CString g_sLangTxt_FctnDataCall            ;    //= _T("%s::GetBbDataStr函数必须在“格式文本”数据字节快中被调用");
CString g_sLangID_DataUnExist             ;    //= _T("sDataUnExist");
CString g_sLangTxt_DataUnExist            ;    //= _T("绑定的数据[%s];    //=[%s]不存在");
CString g_sLangID_FctnConDataError             ;    //= _T("sFctnConDataError");
CString g_sLangTxt_FctnConDataError            ;    //= _T("函数SetBindDataL:绑定关系数据属性\"%s\"错误");
CString g_sLangID_FctnCallError             ;    //= _T("sFctnCallError");
CString g_sLangTxt_FctnCallError            ;    //= _T("函数AdBindDataList调用错误");
CString g_sLangID_FctnCallSysError4             ;    //= _T("sFctnCallSysError4");
CString g_sLangTxt_FctnCallSysError4             ;    //= _T("函数AdBindDataList调用:系统错误(没有关联的设备数据模型)");
CString g_sLangID_FctnCallData             ;    //= _T("sFctnCallData");
CString g_sLangTxt_FctnCallData            ;    //= _T("函数AdBindDataList调用:数据绑定错误");
CString g_sLangID_FctnCallNode             ;    //= _T("sFctnCallNode");
CString g_sLangTxt_FctnCallNode            ;    //= _T("函数AdBindDataList调用:节点\"%s\" 不存在");
CString g_sLangID_FctnFireCallError             ;    //= _T("sFctnFireCallError");
CString g_sLangTxt_FctnFireCallError            ;    //= _T("函数FireDataMsg调用错误");
CString g_sLangID_SystemErrorPath             ;    //= _T("sSystemErrorPath");
CString g_sLangTxt_SystemErrorPath            ;    //= _T("系统错误(路径为空)");
CString g_sLangID_DataNodeUnExist4             ;    //= _T("sDataNodeUnExist4");
CString g_sLangTxt_DataNodeUnExist4            ;    //= _T("InsertDsData:数据节点不存在");
CString g_sLangID_DataNodeUnExist3             ;    //= _T("sDataNodeUnExist3");
CString g_sLangTxt_DataNodeUnExist3            ;    //= _T("InsertBindData:数据节点不存在");
CString g_sLangID_DataNodeUnExist2             ;    //= _T("sDataNodeUnExist2");
CString g_sLangTxt_DataNodeUnExist2            ;    //= _T("InsertDataset:数据节点不存在");
CString g_sLangID_DataNodeUnExist             ;    //= _T("sDataNodeUnExist");
CString g_sLangTxt_DataNodeUnExist            ;    //= _T("script_InsertLogicDevice:数据节点不存在");
CString g_sLangID_FctnGetCallError             ;    //= _T("sFctnGetCallError");
CString g_sLangTxt_FctnGetCallError            ;    //= _T("函数GetBindDataL调用错误");
CString g_sLangID_FctnSetError             ;    //= _T("sFctnSetError");
CString g_sLangTxt_FctnSetError             ;    //= _T("函数SetBindDataL:字节块\"%s\"中绑定错误");
CString g_sLangID_FctnBindSet             ;    //= _T("sFctnBindSet");
CString g_sLangTxt_FctnBindSet            ;    //= _T("函数SetBindDataL:字节块\"%s\"中绑定数据集");
CString g_sLangID_FctnBindCallError             ;    //= _T("sFctnBindCallError");
CString g_sLangTxt_FctnBindCallError            ;    //= _T("函数###BindData###调用错误");
CString g_sLangID_FctnGetError             ;    //= _T("sFctnGetError");
CString g_sLangTxt_FctnGetError            ;    //= _T("函数GetBindDeviceDataNode:字节块\"%s\"中绑定错误");
CString g_sLangID_FctnDataSet             ;    //= _T("sFctnDataSet");
CString g_sLangTxt_FctnDataSet            ;    //= _T("函数GetBindDeviceDataNode:字节块\"%s\"中绑定数据集");
CString g_sLangID_PathNoData             ;    //= _T("sPathNoData");
CString g_sLangTxt_PathNoData            ;    //= _T("path[%s]没有对应的数据节点");
CString g_sLangID_SetVariUnExist             ;    //= _T("sSetVariUnExist");
CString g_sLangTxt_SetVariUnExist            ;    //= _T("GetValue:变量\"%s\"不存在");
CString g_sLangID_SetLongVariUnExist             ;    //= _T("sSetLongVariUnExist");
CString g_sLangTxt_SetLongVariUnExist            ;    //= _T("SetValueLong:变量\"%s\"不存在");
CString g_sLangID_GetFctnCallErrorLen             ;    //= _T("sGetFctnCallErrorLen");
CString g_sLangTxt_GetFctnCallErrorLen            ;    //= _T("GetPkgLen函数调用错误");
CString g_sLangID_GetFctnCallErrorPkg             ;    //= _T("sGetFctnCallErrorPkg");
CString g_sLangTxt_GetFctnCallErrorPkg            ;    //= _T("GetPkgNum函数调用错误");
CString g_sLangID_AddFctnCallError             ;    //= _T("sAddFctnCallError");
CString g_sLangTxt_AddFctnCallError            ;    //= _T("AddGlobal函数调用错误");
CString g_sLangID_GetFctnCallError             ;    //= _T("sGetFctnCallError");
CString g_sLangTxt_GetFctnCallError            ;    //= _T("GetGlobal函数调用错误");
CString g_sLangID_SetFctnCallError             ;    //= _T("sSetFctnCallError");
CString g_sLangTxt_SetFctnCallError            ;    //= _T("SetGlobal函数调用错误");
CString g_sLangID_FctnCallSysError3             ;    //= _T("sFctnCallSysError3");
CString g_sLangTxt_FctnCallSysError3            ;    //= _T("函数Run调用:系统错误");
CString g_sLangID_FctnCallSysError2             ;    //= _T("sFctnCallSysError2");
CString g_sLangTxt_FctnCallSysError2            ;    //= _T("函数SetPpRunState调用:系统错误");
CString g_sLangID_FctnCallSysError             ;    //= _T("sFctnCallSysError");
CString g_sLangTxt_FctnCallSysError            ;    //= _T("函数SetPpValid调用:系统错误");
CString g_sLangID_DataIndexError             ;    //= _T("sDataIndexError");
CString g_sLangTxt_DataIndexError            ;    //= _T("字节块[%s]数据缓冲错误：nIndex;    //=%d Length;    //=%d");
CString g_sLangID_FctnCallSystem             ;    //= _T("sFctnCallSystem");
CString g_sLangTxt_FctnCallSystem            ;    //= _T("函数Connect调用:系统错误(没有关联的设备数据模型)");
CString g_sLangID_SystemErrorData8             ;    //= _T("sSystemErrorData8");
CString g_sLangTxt_SystemErrorData8            ;    //= _T("系统错误(路径【%s】对应的数据不存在)");
CString g_sLangID_SystemErrorData7             ;    //= _T("sSystemErrorData7");
CString g_sLangTxt_SystemErrorData7            ;    //= _T("系统错误(路径【%s】对应的逻辑设备不存在)");
CString g_sLangID_SystemErrorData6             ;    //= _T("sSystemErrorData6");
CString g_sLangTxt_SystemErrorData6            ;    //= _T("系统错误(路径【%s】对应的设备不存在)");
CString g_sLangID_SystemErrorData5             ;    //= _T("sSystemErrorData5");
CString g_sLangTxt_SystemErrorData5            ;    //= _T("系统错误(没有关联的设备数据模型)");
CString g_sLangID_SystemErrorData4             ;    //= _T("sSystemErrorData4");
CString g_sLangTxt_SystemErrorData4            ;    //= _T("系统错误(不是多设备数据模型)");
CString g_sLangID_SystemErrorData3             ;    //= _T("sSystemErrorData3");
CString g_sLangTxt_SystemErrorData3            ;    //= _T("系统错误(数据【%s】没有属性【%s】)");
CString g_sLangID_SystemErrorData2             ;    //= _T("sSystemErrorData2");
CString g_sLangTxt_SystemErrorData2            ;    //= _T("系统错误(数据集【%s】没有属性【%s】)");
CString g_sLangID_SystemErrorData             ;    //= _T("sSystemErrorData");
CString g_sLangTxt_SystemErrorData            ;    //= _T("系统错误(逻辑设备【%s】没有属性【%s】)");
CString g_sLangID_FctnDataErrorDsData             ;    //= _T("sFctnDataErrorDsData");
CString g_sLangTxt_FctnDataErrorDsData            ;    //= _T("函数AdDsDataList调用:数据绑定错误");
CString g_sLangID_FctnCallNoReport             ;    //= _T("sFctnCallNoReport");
CString g_sLangTxt_FctnCallNoReport            ;    //= _T("函数AdDsDataList调用:【%s】数据集没有启动报告");
CString g_sLangID_FctnCallPoint             ;    //= _T("sFctnCallPoint");
CString g_sLangTxt_FctnCallPoint            ;    //= _T("函数AdDsDataList调用:节点\"%s\" 不存在");
CString g_sLangID_FctnDataErrorDsPkg             ;    //= _T("sFctnDataErrorDsPkg");
CString g_sLangTxt_FctnDataErrorDsPkg            ;    //= _T("函数AdDsPkgDetail调用:数据绑定错误");
CString g_sLangID_FctnDataErrorVal             ;    //= _T("sFctnDataErrorVal");
CString g_sLangTxt_FctnDataErrorVal            ;    //= _T("函数AdValPkgDetail调用:数据绑定错误");
CString g_sLangID_FctnCallLength             ;    //= _T("sFctnCallLength");
CString g_sLangTxt_FctnCallLength            ;    //= _T("函数SetBcd24Float调用:缓冲区长度(%d)不够");
CString g_sLangID_Constant             ;    //= _T("sConstant");
CString g_sLangTxt_Constant            ;    //= _T("常量");
CString g_sLangID_DataList             ;    //= _T("sDataList");
CString g_sLangTxt_DataList            ;    //= _T("数据列表");
CString g_sLangID_FormatText             ;    //= _T("sFormatText");
CString g_sLangTxt_FormatText            ;    //= _T("格式文本");
CString g_sLangID_SumCheck             ;    //= _T("sSumCheck");
CString g_sLangTxt_SumCheck            ;    //= _T("和校验");
CString g_sLangID_CRCCheck             ;    //= _T("sCRCCheck");
CString g_sLangTxt_CRCCheck            ;    //= _T("CRC校验(初始值0)");
CString g_sLangID_CRCCheck2             ;    //= _T("sCRCCheck2");
CString g_sLangTxt_CRCCheck2            ;    //= _T("CRC校验(初始值0xFFFF)");
CString g_sLangID_CRCCheck3             ;    //= _T("sCRCCheck3");
CString g_sLangTxt_CRCCheck3            ;    //= _T("CRC校验(查表法)");
CString g_sLangID_Script             ;    //= _T("sScript");
CString g_sLangTxt_Script            ;    //= _T("脚本");
CString g_sLangID_EncodeModeNoneName             ;    //= _T("sEncodeModeNoneName");
CString g_sLangTxt_EncodeModeNoneName            ;    //= _T("不编码");
CString g_sLangID_EncodeModeSendName             ;    //= _T("sEncodeModeSendName");
CString g_sLangTxt_EncodeModeSendName            ;    //= _T("帧编码(发送)");
CString g_sLangID_EncodeModeReceiveName             ;    //= _T("sEncodeModeReceiveName");
CString g_sLangTxt_EncodeModeReceiveName            ;    //= _T("帧编码(接收)");
CString g_sLangID_EncodeModeSAndRName             ;    //= _T("sEncodeModeSAndRName");
CString g_sLangTxt_EncodeModeSAndRName            ;    //= _T("帧编码(发送接收统一)");
CString g_sLangID_EncodeModeSOrRName             ;    //= _T("sEncodeModeSOrRName");
CString g_sLangTxt_EncodeModeSOrRName            ;    //= _T("帧编码(发送接收独立)");
CString g_sLangID_EncodeName             ;    //= _T("sEncodeName");
CString g_sLangTxt_EncodeName            ;    //= _T("帧编码");
CString g_sLangID_Receive             ;    //= _T("sReceive");
CString g_sLangTxt_Receive            ;    //= _T("接收");
CString g_sLangID_SingDev             ;    //= _T("sSingDev");
CString g_sLangTxt_SingDev            ;    //= _T("单一设备");
CString g_sLangID_MultDev             ;    //= _T("sMultDev");
CString g_sLangTxt_MultDev            ;    //= _T("多设备");
CString g_sLangID_NoDevDataModel             ;    //= _T("sNoDevDataModel");
CString g_sLangTxt_NoDevDataModel            ;    //= _T("没有指定设备数据模型模式");
CString g_sLangID_ErrorMessage             ;    //= _T("sErrorMessage");
CString g_sLangTxt_ErrorMessage            ;    //= _T("错误报文:(Begin;    //=%d      Len;    //=%d)");
CString g_sLangID_Send             ;    //= _T("sSend");
CString g_sLangTxt_Send            ;    //= _T("发送");
CString g_sLangID_CommunPathUnExist             ;    //= _T("sCommunPathUnExist");
CString g_sLangTxt_CommunPathUnExist            ;    //= _T("模板定义的通信通道不存在");
CString g_sLangID_CommunPathUnExist2             ;    //= _T("sCommunPathUnExist2");
CString g_sLangTxt_CommunPathUnExist2            ;    //= _T("模板定义的通信通道\"%s\"不存在");
CString g_sLangID_CommunPathUnExist3             ;    //= _T("sCommunPathUnExist3");
CString g_sLangTxt_CommunPathUnExist3            ;    //= _T("节点\"%s\"定义的通信通道\"%s\"不存在");
CString g_sLangID_ProcessClose             ;    //= _T("sProcessClose");
CString g_sLangTxt_ProcessClose            ;    //= _T("----------过程\"%s\"结束----------");
CString g_sLangID_ProcessRun             ;    //= _T("sProcessRun");
CString g_sLangTxt_ProcessRun             ;    //= _T("过程\"%s\"已经运行");
CString g_sLangID_PrtcPrcsDfn             ;    //= _T("sPrtcPrcsDfn");
CString g_sLangTxt_PrtcPrcsDfn             ;    //= _T("规约过程定义");
CString g_sLangID_PrtcTempName             ;    //= _T("sPrtcTempName");
CString g_sLangTxt_PrtcTempName             ;    //= _T("规约模板名称");
CString g_sLangID_PrtcTempDiff             ;    //= _T("sPrtcTempDiff");
CString g_sLangTxt_PrtcTempDiff             ;    //= _T("规约模板的模型模式【%s】与点表文件的模型模式【%s】不一致");
CString g_sLangID_DataBindRlship             ;    //= _T("sDataBindRlship");
CString g_sLangTxt_DataBindRlship             ;    //= _T("数据绑定关系：");
CString g_sLangID_NoCorrespondingData             ;    //= _T("sNoCorrespondingData");
CString g_sLangTxt_NoCorrespondingData             ;    //= _T("没有对应的数据");
CString g_sLangID_LasterTestUnFinsh             ;    //= _T("sLasterTestUnFinsh");
CString g_sLangTxt_LasterTestUnFinsh             ;    //= _T("    +++++++++++上次端口测试没结束: %s");
CString g_sLangID_ChannelTest             ;    //= _T("sChannelTest");
CString g_sLangTxt_ChannelTest             ;    //= _T("通道测试：关闭测试通道用时%d");
CString g_sLangID_PointListEditor             ;    //= _T("sPointListEditor");
CString g_sLangTxt_PointListEditor             ;    //= _T("点表编辑库PpDeviceModelEdit.dll不存在!");
CString g_sLangID_EditDevDataModel             ;    //= _T("sEditDevDataModel");
CString g_sLangTxt_EditDevDataModel             ;    //= _T("[%s] 引擎数据无效，请编辑设备数据模型");
CString g_sLangID_ScriptCallError             ;    //= _T("sScriptCallError");
CString g_sLangTxt_ScriptCallError             ;    //= _T("脚本函数SetPkgLen调用错误:对应的模板不存在");
CString g_sLangID_UnDefinScript             ;    //= _T("sUnDefinScript");
CString g_sLangTxt_UnDefinScript             ;    //= _T("跳转节点\"%s\"没有定义脚本");
CString g_sLangID_NoJumpNode             ;    //= _T("sNoJumpNode");
CString g_sLangTxt_NoJumpNode             ;    //= _T("[%s]无跳转节点");
CString g_sLangID_JumpNodeNoValue             ;    //= _T("sJumpNodeNoValue");
CString g_sLangTxt_JumpNodeNoValue             ;    //= _T("跳转节点\"%s\"脚本【%s】没有返回值，使用\"return\"返回");
CString g_sLangID_PrtcTempFileError             ;    //= _T("sPrtcTempFileError");
CString g_sLangTxt_PrtcTempFileError             ;    //= _T("规约模板文件\"%s\"  错误");
CString g_sLangID_CreatDevFail             ;    //= _T("sCreatDevFail");
CString g_sLangTxt_CreatDevFail             ;    //= _T("创建设备对象失败，设备点表文件\"%s\"错误");
CString g_sLangID_RptDataSetUnExist             ;    //= _T("sRptDataSetUnExist");
CString g_sLangTxt_RptDataSetUnExist             ;    //= _T("Reset:报告数据集不存在【%s】");
CString g_sLangID_RptDataSet             ;    //= _T("sRptDataSet");
CString g_sLangTxt_RptDataSet             ;    //= _T("Reset:报告数据集【%d】;    //=>>0");
CString g_sLangID_ResetMessage             ;    //= _T("sResetMessage");
CString g_sLangTxt_ResetMessage             ;    //= _T("Reset:报文抓包【%d】;    //=>>0");
CString g_sLangID_ParaBoundsGet             ;    //= _T("sParaBoundsGet");
CString g_sLangTxt_ParaBoundsGet             ;    //= _T("GetBitInLong16参数nBitIndex;    //=%d越界");
CString g_sLangID_ParaBoundsSet             ;    //= _T("sParaBoundsSet");
CString g_sLangTxt_ParaBoundsSet             ;    //= _T("SetBitInLong16参数nBitIndex;    //=%d越界");
CString g_sLangID_ParaBoundsClear             ;    //= _T("sParaBoundsClear");
CString g_sLangTxt_ParaBoundsClear             ;    //= _T("ClearBitInLong16参数nBitIndex;    //=%d越界");
CString g_sLangID_ParaBoundsGet2             ;    //= _T("sParaBoundsGet2");
CString g_sLangTxt_ParaBoundsGet2             ;    //= _T("GetBitInLong32参数nBitIndex;    //=%d越界");
CString g_sLangID_ParaBoundsSet2             ;    //= _T("sParaBoundsSet2");
CString g_sLangTxt_ParaBoundsSet2             ;    //= _T("SetBitInLong32参数nBitIndex;    //=%d越界");
CString g_sLangID_ParaBoundsClear2             ;    //= _T("sParaBoundsClear2");
CString g_sLangTxt_ParaBoundsClear2             ;    //= _T("ClearBitInLong32参数nBitIndex;    //=%d越界");
CString g_sLangID_ParaBoundsGet3             ;    //= _T("sParaBoundsGet3");
CString g_sLangTxt_ParaBoundsGet3             ;    //= _T("GetBitInLong8参数nBitIndex;    //=%d越界");
CString g_sLangID_ParaBoundsSet3             ;    //= _T("sParaBoundsSet3");
CString g_sLangTxt_ParaBoundsSet3             ;    //= _T("SetBitInLong8参数nBitIndex;    //=%d越界");
CString g_sLangID_ParaBoundsClear3             ;    //= _T("sParaBoundsClear3");
CString g_sLangTxt_ParaBoundsClear3             ;    //= _T("ClearBitInLong8参数nBitIndex;    //=%d越界");
CString g_sLangID_ParaBoundsGet4             ;    //= _T("sParaBoundsGet4");
CString g_sLangTxt_ParaBoundsGet4             ;    //= _T("script_GetBitRangeInLong8参数nBitEnd;    //=%d越界");
CString g_sLangID_DevDaraTmpFile             ;    //= _T("sDevDaraTmpFile");
CString g_sLangTxt_DevDaraTmpFile             ;    //= _T("设备数据模型文件不存在：%s");
CString g_sLangID_CommunSetFile             ;    //= _T("sCommunSetFile");
CString g_sLangTxt_CommunSetFile             ;    //= _T("通讯配置文件不存在：%s");
CString g_sLangID_DevDataPoint             ;    //= _T("sDevDataPoint");
CString g_sLangTxt_DevDataPoint             ;    //= _T("设备数据点表");
CString g_sLangID_OpenSerialFail             ;    //= _T("sOpenSerialFail");
CString g_sLangTxt_OpenSerialFail             ;    //= _T("打开串口%d失败！");
CString g_sLangID_ReceiveSerialFail             ;    //= _T("sReceiveSerialFail");
CString g_sLangTxt_ReceiveSerialFail             ;    //= _T("获取串口属性失败！");
CString g_sLangID_SetSerialError             ;    //= _T("sSetSerialError");
CString g_sLangTxt_SetSerialError             ;    //= _T("设置串口属性错误！");
CString g_sLangID_SendMessageFail             ;    //= _T("sSendMessageFail");
CString g_sLangTxt_SendMessageFail             ;    //= _T("向\"%s\"发送报文失败");
CString g_sLangID_ExistSameName             ;    //= _T("sExistSameName");
CString g_sLangTxt_ExistSameName             ;    //= _T("存在同名的UDP服务器(IP;    //=%s  Port;    //=%d)");
CString g_sLangID_ExistSameName2             ;    //= _T("sExistSameName2");
CString g_sLangTxt_ExistSameName2             ;    //= _T("存在同名的TCP服务器(IP;    //=%s  Port;    //=%d)");
CString g_sLangID_SendMessageFail2             ;    //= _T("sSendMessageFail2");
CString g_sLangTxt_SendMessageFail2             ;    //= _T("向\"%s\"发送BroadCast报文失败");
CString g_sLangID_ItemNumber             ;    //= _T("sItemNumber");
CString g_sLangTxt_ItemNumber             ;    //= _T("条目号");
CString g_sLangID_PointTableFile             ;    //= _T("sPointTableFile");
CString g_sLangTxt_PointTableFile             ;    //= _T("点表文件(*.xml)|*.xml||");
CString g_sLangID_AddBytesBlock             ;    //= _T("sAddBytesBlock");
CString g_sLangTxt_AddBytesBlock             ;    //= _T("添加字节块");
CString g_sLangID_AddDataSets             ;    //= _T("sAddDataSets");
CString g_sLangTxt_AddDataSets            ;    //= _T("添加数据总集");
CString g_sLangID_DataDef             ;    //= _T("sDataDef");
CString g_sLangTxt_DataDef            ;    //= _T("数据定义");
CString g_sLangID_DataByteBlock             ;    //= _T("sDataByteBlock");
CString g_sLangTxt_DataByteBlock          ;    //= _T("数据字节块");
CString g_sLangID_Length             ;    //= _T("sLength");
CString g_sLangTxt_Length             ;    //= _T("长度");
CString g_sLangID_Byte             ;    //= _T("sByte");
CString g_sLangTxt_Byte          ;    //= _T("%s(%s): %s, %d字节");
CString g_sLangID_Msg             ;    //= _T("sMsg");
CString g_sLangTxt_Msg             ;    //= _T("报文");
CString g_sLangID_DataTypeValue             ;    //= _T("sDataTypeValue");
CString g_sLangTxt_DataTypeValue             ;    //= _T("%s(%s): 数据类型;    //=%s   数值;    //=%s");
CString g_sLangID_FrameVariDefin2             ;    //= _T("sFrameVariDefin2");
CString g_sLangTxt_FrameVariDefin2             ;    //= _T("变量定义");




CString g_sLangID_CurrentActSet ;    //= _T("sCurrentActSet");
CString g_sLangTxt_CurrentActSet ;    //= _T("当前活动定值区");
CString g_sLangID_SettingTotalNo ;    //= _T("sSettingTotalNo");
CString g_sLangTxt_SettingTotalNo ;    //= _T("定值区总数");
CString g_sLangID_CommandTotalTime ;    //= _T("sCommandTotalTime");
CString g_sLangTxt_CommandTotalTime ;    //= _T("命令总时间");
CString g_sLangID_CommandExecuTime ;    //= _T("sCommandExecuTime");
CString g_sLangTxt_CommandExecuTime ;    //= _T("命令执行时间");
CString g_sLangID_CommandChoseTime ;    //= _T("sCCommandChoseTime");
CString g_sLangTxt_CommandChoseTime ;    //= _T("命令选择时间");
CString g_sLangID_CommandExecuMess ;    //= _T("sCommandExecuMess");
CString g_sLangTxt_CommandExecuMess ;    //= _T("命令执行信息");
CString g_sLangID_CommandChoseMess ;    //= _T("sCommandChoseMess");
CString g_sLangTxt_CommandChoseMess ;    //= _T("命令选择信息");
CString g_sLangID_WrongMess ;    //= _T("sWrongMess");
CString g_sLangTxt_WrongMess ;    //= _T("错误信息");
CString g_sLangID_RecordPath ;    //= _T("sRecordPath");
CString g_sLangTxt_RecordPath ;    //= _T("录波路径");
CString g_sLangID_EnaChangeTime ;    //= _T("sEnaChangeTime");
CString g_sLangTxt_EnaChangeTime ;    //= _T("压板修改间隔时间");
CString g_sLangID_EnaChoseTime ;    //= _T("sEnaChoseTime");
CString g_sLangTxt_EnaChoseTime ;    //= _T("压板选择执行间隔时间");
CString g_sLangID_MonitErrorTime ;    //= _T("sMonitErrorTime");
CString g_sLangTxt_MonitErrorTime ;    //= _T("监视错误信息");
CString g_sLangID_BeforEnaRead ;    //= _T("sBeforEnaRead");
CString g_sLangTxt_BeforEnaRead ;    //= _T("投退压板前读状态");
CString g_sLangID_BeforEnaReadTime ;    //= _T("sBeforEnaReadTime");
CString g_sLangTxt_BeforEnaReadTime ;    //= _T("投退压板前读状态后延时");

CString g_sLangID_WritDataMess ;    //= _T("sWritDataMess");
CString g_sLangTxt_WritDataMess ;    //= _T("写数据信息");
CString g_sLangID_SetEdtTime ;    //= _T("sSetEdtTime");
CString g_sLangTxt_SetEdtTime ;    //= _T("设置编辑区时间");
CString g_sLangID_SetActTime ;    //= _T("sSetActTime");
CString g_sLangTxt_SetActTime ;    //= _T("设置活动区时间");
CString g_sLangID_SetEdtMess ;    //= _T("sSetEdtMess");
CString g_sLangTxt_SetEdtMess ;    //= _T("设置编辑区信息");
CString g_sLangID_SetActMess ;    //= _T("sSetActMess");
CString g_sLangTxt_SetActMess ;    //= _T("设置活动区信息");
CString g_sLangID_TestConnSta ;    //= _T("sTestConnSta");
CString g_sLangTxt_TestConnSta ;    //= _T("测试连接状态");
