// EncryptSafeNet.cpp: implementation of the CEncryptSafeNet class.
//
//////////////////////////////////////////////////////////////////////

#include "stdafx.h"
#include "EncryptSafeNet.h"
#include "..\API\GloblaDrawFunctions.h"

#ifdef use_Encrypt_SafeNetTool

// #include <stdlib.h>       
// #include <stdio.h>
// #include <malloc.h>
// #include <memory.h>

#if defined(_WIN32)
	#include "spromeps_win.h"
#else
	#include "spromeps_linux.h"
#endif

RBP_SPRO_APIPACKET el_spro = 0 ;

RBP_SPRO_APIPACKET mms_runtime_handle();


typedef void (*get_ikey_func)(unsigned char, unsigned char *);


static void get_8byte_code(unsigned char order, unsigned char *buf); 

static void get_8byte_key(unsigned char order, unsigned char *buf); 

 

RBP_SPRO_APIPACKET mms_runtime_handle()

{

    /** Initialize SafeNet Sentinel SuperPro key (user SDK ver 6.4.0) */

    if(!el_spro) {

        el_spro = (RBP_SPRO_APIPACKET)malloc(sizeof(RB_SPRO_APIPACKET));

        if(el_spro) {

            /******************************************************************************

            * Format Packet And Initialize API call is must for other API calls

            * Call RNBOsproFormatPacket API for Formating packet.

            * This API needs two parameters

            *	1. A pointer to a DWORD-aligned RBP_SPRO_APIPACKET record

            *	2. An integer containing length of the RB_SPRO_APIPACKET record in bytes

            ******************************************************************************/			

            if(RNBOsproFormatPacket(el_spro,sizeof(RB_SPRO_APIPACKET)) == SP_SUCCESS) {

                /******************************************************************************

                * RNBOsproInitialize API is used for Initilizing  packet.

                * This API needs one parameter  

                *	1. A pointer to a DWORD-aligned RBP_SPRO_APIPACKET record

                ******************************************************************************/			

                if(RNBOsproInitialize(el_spro) == SP_SUCCESS) {

                    /******************************************************************************

                    * RNBOsproSetProtcol API is used for  defining protocol used for network  

                    * communication. Default protocol type is TCP/IP

                    * This function needs two parameters

                    *	1. A pointer to a DWORD-aligned RBP_SPRO_APIPACKET record

                    *	2. A unsigned short integer type for protocol selection

                    *			TCP PROTOCOL         1

                    *			IPX PROTOCOL         2

                    *			NETBEUI PROTOCOL     4 

                    *			SAP PROTOCOL         8

                    ******************************************************************************/			

                    if(RNBOsproSetProtocol(el_spro, NSPRO_TCP_PROTOCOL) == SP_SUCCESS) {

                        /******************************************************************************

                        * RNBOsproSetContactServer API is used for directing request to specified server.

                        * This API needs two parameter  

                        *	1. A pointer to a DWORD-aligned RBP_SPRO_APIPACKET record

                        *	2. The name to which contact server is set

                        ******************************************************************************/			

                        if(RNBOsproSetContactServer(el_spro, RNBO_STANDALONE) == SP_SUCCESS) {

                            if(RNBOsproSetSharedLicense(el_spro,SP_ENABLE_MAINLIC_SHARING,SP_DISABLE_SUBLIC_SHARING) == SP_SUCCESS) {

                                /******************************************************************************

                                * RNBOsproFindFirstUnit API is used for obtaining license from Sentinel SuperPro Key.

                                * This API needs two parameter  

                                *	1. A pointer to a DWORD-aligned RBP_SPRO_APIPACKET record

                                *	2. This is assigned to you by SafeNet,Inc. or your distributor

                                *	   It identifies the Sentinel SuperPro Device to search for

                                ******************************************************************************/			

                                if(RNBOsproFindFirstUnit(el_spro, 0x8213) == SP_SUCCESS) {

//                                    apr_ikey_init_complete = 1;

                                    return el_spro;

                                }

                            }

                        }

                    }

                }

            }

        }

    }

//    apr_ikey_init_complete = 0;

    //apr_ikey_type = 110;

    return 0;

}

 
 


static void get_8byte_code(unsigned char order, unsigned char *buf) 

{

    static unsigned char byte8code[][8] = { 

 { 0xA2, 0x1E, 0x71, 0x10, 0x9D, 0x2D, 0x84, 0x5B },
 { 0x72, 0xC9, 0xA5, 0x5B, 0x87, 0x8A, 0x9B, 0x0E },
 { 0xEE, 0x10, 0x15, 0xB7, 0xF2, 0x48, 0xE0, 0x3C },
 { 0xF0, 0xEC, 0x5D, 0xCC, 0x69, 0x49, 0x33, 0xC4 },
 { 0x54, 0x45, 0x41, 0xD4, 0xB9, 0xA0, 0xD7, 0x5E },
 { 0x7B, 0x7A, 0x25, 0x1E, 0x76, 0x16, 0xF3, 0x10 },
 { 0xC9, 0xDD, 0x93, 0x8E, 0x75, 0xA6, 0x14, 0xB9 },
 { 0x28, 0x34, 0xB9, 0x1B, 0x53, 0xA9, 0x8B, 0x82 },
 { 0x39, 0xE8, 0x50, 0xED, 0x0A, 0x86, 0x89, 0x4A },
 { 0x1B, 0x17, 0xCC, 0xE6, 0x5A, 0x63, 0x0D, 0xF4 },
 { 0xFB, 0x5E, 0xC1, 0x25, 0xBD, 0x5A, 0x44, 0x79 },
 { 0x70, 0x7B, 0x78, 0x54, 0xB4, 0x6B, 0xB0, 0xD4 },
 { 0x03, 0x50, 0xCC, 0x62, 0xF2, 0xFB, 0xA5, 0x87 },
 { 0xB3, 0x62, 0xAB, 0x01, 0xDF, 0x51, 0xCC, 0x17 },
 { 0x72, 0x5C, 0x98, 0x29, 0x18, 0x18, 0xA3, 0x8B },
 { 0xA7, 0x8B, 0x2B, 0x94, 0xEC, 0xE0, 0xFB, 0xF1 },
 { 0xAA, 0x5F, 0x8F, 0x3F, 0xE0, 0x9D, 0x79, 0xDA },
 { 0x4B, 0xF0, 0x04, 0xEF, 0x2C, 0x26, 0x16, 0xD9 },
 { 0x4B, 0x77, 0x5B, 0xAA, 0x3C, 0xB7, 0x9F, 0x07 },
 { 0xE1, 0xD1, 0x7C, 0x3A, 0x30, 0x70, 0x36, 0x82 },
 { 0x36, 0xFF, 0xE3, 0xAD, 0x5C, 0xD4, 0xCF, 0xE9 },
 { 0xEA, 0xA8, 0x1E, 0xD8, 0xC9, 0x4B, 0xB3, 0xE2 },
 { 0x8D, 0x95, 0x51, 0xCF, 0xB3, 0xA0, 0x95, 0x26 },
 { 0x34, 0xB3, 0x6E, 0x08, 0x83, 0x27, 0x2E, 0xB0 },
 { 0x17, 0x0E, 0xD4, 0xEF, 0x08, 0x6D, 0x5F, 0x98 },
 { 0x72, 0x43, 0xE3, 0x3F, 0x26, 0x6B, 0xDB, 0x40 },
 { 0xA0, 0xC3, 0xC1, 0x04, 0x3A, 0x8E, 0xDC, 0x7F },
 { 0x9F, 0x17, 0x5A, 0xFD, 0x81, 0x98, 0x9E, 0x1F },
 { 0x8F, 0x59, 0xDB, 0x20, 0xA1, 0x1C, 0xE2, 0x5D },
 { 0x36, 0xB9, 0x38, 0x15, 0x21, 0x06, 0x6C, 0x6D },
 { 0x7F, 0xF9, 0xA7, 0xB7, 0xEC, 0x11, 0x85, 0xF3 },
 { 0xF7, 0xF1, 0x23, 0x96, 0xD3, 0x4F, 0x7A, 0x8B },
 { 0x4F, 0x0C, 0xEB, 0x78, 0x07, 0xA4, 0x1A, 0x42 },
 { 0xDC, 0xC9, 0xD3, 0xA3, 0x4B, 0x3C, 0x1B, 0x1A },
 { 0x3B, 0xAA, 0x54, 0x20, 0x50, 0x37, 0x8B, 0x25 },
 { 0x89, 0xF4, 0x5C, 0xDF, 0x14, 0x69, 0xFD, 0x3E },
 { 0x6F, 0x2B, 0x7E, 0xA3, 0xCD, 0xB1, 0x4E, 0x4D },
 { 0xBB, 0x63, 0x02, 0x13, 0x03, 0xF4, 0x52, 0x59 },
 { 0xD1, 0xF2, 0x64, 0x3D, 0x14, 0x9B, 0x4E, 0x11 },
 { 0x27, 0xF3, 0xD6, 0x0E, 0xB1, 0x13, 0x7B, 0x46 },
 { 0xCA, 0xC4, 0xBA, 0xDB, 0x5F, 0x4C, 0x8A, 0x6F },
 { 0xD7, 0x88, 0x29, 0xDB, 0xF6, 0x3B, 0x1A, 0x24 },
 { 0x02, 0xA6, 0x6F, 0xAB, 0x25, 0x59, 0x44, 0xA3 },
 { 0x13, 0x48, 0x8C, 0xC8, 0xEC, 0x21, 0x10, 0x4E },
 { 0x64, 0xDD, 0xB4, 0x18, 0x21, 0x96, 0xFC, 0x2B },
 { 0x65, 0x98, 0xD0, 0x62, 0xEC, 0xBA, 0x7C, 0x63 },
 { 0x18, 0xEF, 0xFB, 0xD1, 0x4B, 0x18, 0x75, 0xC4 },
 { 0x94, 0x1C, 0x06, 0x76, 0x8F, 0x3B, 0xC1, 0x3F },
 { 0x86, 0x9F, 0xF5, 0xC3, 0xDC, 0x34, 0xAE, 0x6A },
 { 0xAC, 0xBA, 0x7F, 0x10, 0xAD, 0x19, 0x7F, 0xFE },
 { 0x59, 0xF4, 0x92, 0x19, 0x4E, 0x80, 0xEA, 0x5A },
 { 0xF4, 0x97, 0xCD, 0x7E, 0x60, 0x08, 0x98, 0xFF },
 { 0x78, 0x32, 0x04, 0x42, 0x58, 0xD1, 0xA8, 0x12 },
 { 0xF5, 0x17, 0xBF, 0x4D, 0xFF, 0x2C, 0xDD, 0x0E },
 { 0xDE, 0xBB, 0xEA, 0xF5, 0x3A, 0xAA, 0x4E, 0x79 },
 { 0xE0, 0x68, 0x4A, 0x28, 0x31, 0x9C, 0x77, 0x82 },
 { 0xBD, 0x69, 0xFF, 0x5D, 0x13, 0xF0, 0x0C, 0x88 },
 { 0xD6, 0x17, 0x81, 0xAF, 0x14, 0x89, 0xE9, 0x7E },
 { 0xD4, 0xFF, 0xAC, 0xEE, 0xBD, 0x89, 0x6C, 0x20 },
 { 0x5F, 0x40, 0xAE, 0x5D, 0xD5, 0x8F, 0xEC, 0x68 },
 { 0xAD, 0x60, 0xB3, 0xA2, 0x90, 0x41, 0xAD, 0x21 },
 { 0x10, 0x14, 0x80, 0x01, 0xA1, 0x08, 0xF3, 0xFF },
 { 0xE4, 0xC8, 0x53, 0x43, 0x2C, 0xF2, 0x15, 0x7E },
 { 0x3B, 0xCA, 0xBC, 0x35, 0x4C, 0x30, 0xFD, 0x5D },
 { 0x57, 0xCF, 0x21, 0x27, 0x90, 0x98, 0xAC, 0x1D },
 { 0x30, 0x6F, 0x3C, 0x6E, 0x79, 0x23, 0xB3, 0x86 },
 { 0xF4, 0xA4, 0x98, 0xE2, 0xFE, 0x70, 0xBB, 0x23 },
 { 0x82, 0x4F, 0x18, 0x61, 0x08, 0x40, 0xFE, 0xC1 },
 { 0xEF, 0xB3, 0x71, 0x4A, 0xF6, 0xF8, 0xCC, 0xF4 },
 { 0x02, 0xF8, 0xAB, 0x02, 0x1B, 0x23, 0x07, 0x92 },
 { 0xB7, 0xA9, 0xA3, 0x73, 0x3B, 0xED, 0xA7, 0x36 },
 { 0xBF, 0x37, 0x8B, 0x88, 0x11, 0xA8, 0x37, 0xBF },
 { 0xFD, 0x74, 0x69, 0xB2, 0xCC, 0x4B, 0x56, 0xCE },
 { 0x0B, 0x18, 0x94, 0x66, 0x8E, 0xEE, 0x37, 0x4B },
 { 0xB4, 0x3F, 0x3B, 0x9D, 0xEB, 0x50, 0x22, 0xE0 },
 { 0x77, 0xE9, 0xDD, 0x52, 0x70, 0x51, 0xF0, 0x7C },
 { 0x0A, 0x7A, 0xD2, 0x08, 0x1A, 0x78, 0x92, 0xD2 },
 { 0xD5, 0x37, 0xC0, 0x42, 0xDA, 0x6E, 0x8B, 0xD8 },
 { 0x73, 0xCF, 0x27, 0x08, 0x17, 0x81, 0x72, 0x49 },
 { 0x34, 0xCF, 0xD6, 0x69, 0x2C, 0x22, 0x71, 0x23 },
 { 0x9D, 0x2C, 0x73, 0xF3, 0xE6, 0x67, 0xC8, 0x29 },
 { 0xE7, 0xBE, 0xF8, 0x3D, 0x08, 0x89, 0x4B, 0x62 },
 { 0x7C, 0xBF, 0x30, 0x5D, 0xC7, 0x67, 0xDF, 0x98 },
 { 0x7D, 0x50, 0x3E, 0x72, 0x4D, 0x02, 0x01, 0xDA },
 { 0x3F, 0xF4, 0x16, 0x1C, 0x3A, 0x40, 0xFA, 0xC9 },
 { 0x13, 0x02, 0xFF, 0x1E, 0x29, 0xBE, 0x10, 0x58 },
 { 0x79, 0x1E, 0x44, 0x01, 0xEC, 0xB3, 0xF6, 0xDB },
 { 0xD4, 0xDC, 0x18, 0xDC, 0xDB, 0xEA, 0xC9, 0x77 },
 { 0x39, 0x81, 0x2A, 0x1D, 0x2B, 0x41, 0x6E, 0x04 },
 { 0xA0, 0xA6, 0x31, 0x27, 0x35, 0x2D, 0x0B, 0x8E },
 { 0x63, 0xB9, 0x64, 0xCF, 0xF7, 0x34, 0x8A, 0xD5 },
 { 0xC3, 0x79, 0xE0, 0x94, 0x72, 0x1A, 0xCD, 0x64 },
 { 0x7D, 0xC6, 0x98, 0xD0, 0x15, 0xAD, 0x1F, 0xCC },
 { 0xAE, 0x7B, 0x28, 0x95, 0xE0, 0x7A, 0xA6, 0xE7 },
 { 0xC8, 0x66, 0x38, 0x71, 0xAC, 0x7D, 0xF3, 0x86 },
 { 0xDD, 0xD5, 0x61, 0x15, 0xE2, 0xF2, 0xC9, 0xDB },
 { 0xD2, 0x98, 0xB1, 0xD7, 0x02, 0xDE, 0xA2, 0xFE },
 { 0xE0, 0x84, 0x2B, 0x31, 0x1F, 0x86, 0x28, 0x6C },
 { 0x15, 0xF1, 0x45, 0x40, 0x61, 0xF6, 0xBD, 0x83 },
 { 0xD0, 0x3D, 0x68, 0x46, 0x82, 0x7C, 0xF4, 0x07 },
 { 0x48, 0x47, 0x72, 0x28, 0x51, 0x2A, 0x15, 0xA0 },
 { 0x06, 0xF5, 0x37, 0xF1, 0x32, 0x57, 0x9D, 0x5A },
 { 0x66, 0xAE, 0xFC, 0x4D, 0x9C, 0x1E, 0xBC, 0x23 },
 { 0x1A, 0xE0, 0xFB, 0x0F, 0x99, 0xDD, 0xD5, 0x50 },
 { 0xA7, 0x7C, 0xE3, 0xAB, 0x4A, 0xB8, 0x01, 0x19 },
 { 0xE6, 0x75, 0x55, 0xBD, 0x60, 0x14, 0x8D, 0x18 },
 { 0x84, 0x45, 0x67, 0x80, 0xA4, 0x1C, 0x77, 0xCE },
 { 0x82, 0x68, 0x25, 0x58, 0x71, 0x40, 0xF5, 0x1F },
 { 0xB6, 0xDE, 0x0B, 0x49, 0x34, 0xB1, 0xEE, 0xD1 },
 { 0x49, 0xAD, 0x8C, 0x7D, 0xF3, 0xE6, 0x7E, 0x10 },
 { 0x37, 0x5D, 0x8E, 0xC1, 0xC3, 0x19, 0x76, 0xED },
 { 0xD2, 0x7A, 0xEB, 0x50, 0xCB, 0xDA, 0xDA, 0x3E },
 { 0x16, 0xF2, 0xE8, 0x59, 0x3C, 0x62, 0x30, 0xF6 },
 { 0x44, 0xE4, 0x19, 0x31, 0xF4, 0xFA, 0xA9, 0x46 },
 { 0x9E, 0x77, 0xF9, 0x3F, 0x3D, 0x42, 0xE6, 0xD0 },
 { 0xC1, 0x57, 0x0A, 0x7F, 0xA6, 0x0E, 0xEB, 0x07 },
 { 0xCB, 0xA0, 0x71, 0xFF, 0x82, 0xE7, 0x9E, 0xB7 },
 { 0xE3, 0x65, 0x79, 0x63, 0x67, 0x88, 0x4B, 0x7B },
 { 0xB2, 0x2C, 0x0E, 0x61, 0xAF, 0x62, 0x23, 0x45 },
 { 0xE2, 0x70, 0x43, 0x46, 0xFA, 0x19, 0xB8, 0xD9 },
 { 0xA6, 0x1E, 0xCD, 0x6F, 0xAA, 0x04, 0x83, 0x52 },
 { 0x32, 0x18, 0x85, 0xD0, 0x66, 0xB1, 0x5E, 0x9C },
 { 0x3E, 0xB5, 0xEA, 0x71, 0x98, 0x5E, 0x0A, 0xF8 },
 { 0x88, 0x3E, 0x9C, 0xEC, 0xEF, 0x81, 0xAB, 0x7C },
 { 0x4F, 0x73, 0xE2, 0xF1, 0xDD, 0x42, 0x47, 0x90 },
 { 0xD8, 0x04, 0x26, 0xC2, 0x1A, 0xFB, 0x4A, 0x72 },
 { 0xED, 0x18, 0x73, 0xB7, 0x1F, 0xBF, 0x05, 0xB3 },
 { 0x59, 0xCA, 0xFE, 0xBB, 0xAC, 0xD0, 0x2A, 0xB7 },
 { 0x6D, 0xA7, 0x9A, 0xCC, 0x43, 0x27, 0x52, 0x39 },
 { 0x7E, 0x31, 0x42, 0x7F, 0xAA, 0xF0, 0x78, 0xC5 },
 { 0x64, 0x5F, 0x93, 0x7A, 0x6D, 0x0C, 0x7B, 0x3C },
 { 0xFD, 0x1B, 0x4F, 0xF9, 0x5A, 0x8D, 0x9F, 0x54 },
 { 0xA8, 0xC3, 0xDC, 0x4A, 0x03, 0x3D, 0x0C, 0x15 },
 { 0xCB, 0xA8, 0xC2, 0x50, 0x3F, 0x18, 0x4E, 0x5D },
 { 0x4E, 0x92, 0x31, 0x04, 0xA9, 0xCD, 0xD4, 0x5C },
 { 0x1D, 0x39, 0x79, 0xEF, 0x20, 0x41, 0x71, 0x19 },
 { 0xAA, 0xCD, 0x8F, 0xB1, 0x46, 0x0C, 0xDE, 0xEB },
 { 0x68, 0x70, 0x8F, 0x7D, 0x01, 0xFA, 0x35, 0x01 },
 { 0x51, 0xB7, 0x35, 0x9B, 0xFC, 0x8B, 0x77, 0xDB },
 { 0x61, 0x2D, 0x62, 0xE5, 0x27, 0x73, 0x08, 0xCF },
 { 0x18, 0xD0, 0x9D, 0x4A, 0x33, 0x1B, 0x2E, 0x85 },
 { 0xFC, 0x91, 0x8F, 0x4E, 0x17, 0x1E, 0x96, 0x7B },
 { 0x15, 0xD8, 0x86, 0x88, 0x8E, 0xCC, 0xCE, 0x81 },
 { 0x70, 0xFE, 0xF4, 0x22, 0x96, 0xAB, 0xCC, 0x3E },
 { 0x9D, 0xD1, 0xED, 0x5D, 0xF3, 0xF2, 0x65, 0xA9 },
 { 0x30, 0x14, 0xAC, 0x0B, 0xAA, 0x0C, 0xD7, 0x91 },
 { 0x43, 0xFC, 0x0E, 0x13, 0x86, 0x1B, 0x40, 0x16 },
 { 0xF3, 0xB4, 0x15, 0xF0, 0x96, 0x72, 0x25, 0x2D },
 { 0xDF, 0xDA, 0x67, 0x32, 0xAD, 0x19, 0xEC, 0x20 },
 { 0xAC, 0xCD, 0xFB, 0xE1, 0x4D, 0x62, 0x0C, 0x83 },
 { 0x2C, 0xB4, 0x83, 0x0D, 0xFD, 0x35, 0x61, 0x91 },
 { 0x58, 0xAF, 0x95, 0x4F, 0x4E, 0x7B, 0x65, 0x86 },
 { 0xF2, 0xF3, 0x10, 0x8A, 0x19, 0x29, 0xB2, 0x17 },
 { 0x5D, 0xDA, 0x67, 0xE5, 0x68, 0x9D, 0xB3, 0x7C },
 { 0x6F, 0x60, 0x22, 0x4A, 0xFC, 0x15, 0x2B, 0xF3 },
 { 0xF1, 0xA9, 0x5A, 0xE8, 0xCA, 0x36, 0xAF, 0x3B },
 { 0x22, 0x79, 0x41, 0xB2, 0x78, 0x86, 0x26, 0x1A },
 { 0x34, 0xBA, 0x97, 0xDD, 0xE5, 0xF2, 0x50, 0xD7 },
 { 0xCD, 0xFA, 0x36, 0x66, 0x9F, 0x49, 0x3C, 0xC0 },
 { 0x87, 0xEB, 0x87, 0x8A, 0x6B, 0xBE, 0xD1, 0xA6 },
 { 0x71, 0xE1, 0x0B, 0x4C, 0xC1, 0x6A, 0x46, 0x5C },
 { 0x8C, 0x57, 0xD3, 0xF2, 0x4D, 0xC8, 0xA9, 0x3B },
 { 0x4E, 0x6B, 0x08, 0x88, 0x6E, 0x37, 0x5C, 0xA1 },
 { 0x23, 0x5D, 0x64, 0x5C, 0xBB, 0x7B, 0x93, 0x6E },
 { 0xE7, 0x13, 0xB7, 0x80, 0x79, 0x3D, 0xD8, 0x86 },
 { 0x6D, 0x98, 0x63, 0x4C, 0x26, 0x86, 0x88, 0x51 },
 { 0xFB, 0x99, 0xE0, 0xD9, 0xF2, 0x48, 0x53, 0x3E },
 { 0xCB, 0xE7, 0x39, 0x87, 0x41, 0xD6, 0xBF, 0x3B },
 { 0x8C, 0xF8, 0x8C, 0x78, 0x2A, 0x66, 0xA5, 0x3F },
 { 0xDF, 0x65, 0x8E, 0x12, 0xFB, 0x96, 0xB3, 0xC1 },
 { 0xDB, 0x6D, 0x06, 0x81, 0xB2, 0xE4, 0xE8, 0x3E },
 { 0x8A, 0x71, 0x4D, 0x32, 0x85, 0x35, 0x1B, 0xB7 },
 { 0x69, 0x76, 0xD4, 0x59, 0x5B, 0x4F, 0x75, 0x30 },
 { 0xEB, 0xA6, 0x9E, 0x6D, 0x51, 0x5F, 0xF2, 0x32 },
 { 0xF6, 0xCF, 0xC1, 0xA7, 0x37, 0x74, 0xE5, 0x4A },
 { 0x65, 0xE3, 0xE9, 0x86, 0x10, 0x01, 0x71, 0x88 },
 { 0x85, 0x76, 0xD5, 0x4E, 0x95, 0x5F, 0x10, 0x98 },
 { 0x43, 0xD9, 0x84, 0xB2, 0x49, 0x0F, 0x4D, 0x55 },
 { 0xA8, 0x5A, 0x73, 0x07, 0x5E, 0x10, 0x66, 0x25 },
 { 0x55, 0xAB, 0x69, 0xA3, 0x87, 0x56, 0xE8, 0xE1 },
 { 0xD9, 0x7C, 0x5F, 0xFE, 0x3D, 0x58, 0xEF, 0x25 },
 { 0x88, 0x80, 0xA5, 0xBC, 0xD0, 0xB9, 0xFF, 0xDE },
 { 0x19, 0x0E, 0xAC, 0x0C, 0x31, 0x24, 0x94, 0x1F },
 { 0xD9, 0xC8, 0x18, 0x81, 0x25, 0xCA, 0x9B, 0x9D },
 { 0x26, 0x0E, 0x41, 0x94, 0xC6, 0xE0, 0xF6, 0x32 },
 { 0xF2, 0x88, 0xB3, 0x20, 0xFF, 0x1E, 0xFC, 0x5B },
 { 0x46, 0xA0, 0xAE, 0xE4, 0x12, 0x42, 0xF7, 0xBA },
 { 0xBD, 0x05, 0xA6, 0x05, 0x15, 0x8B, 0xA5, 0x94 },
 { 0x04, 0x2A, 0xC3, 0x89, 0x71, 0x3F, 0xB7, 0x53 },
 { 0x61, 0xC5, 0x62, 0xDD, 0x62, 0x26, 0x55, 0x05 },
 { 0x29, 0x50, 0x93, 0x50, 0x7A, 0x0C, 0x98, 0xDC },
 { 0x48, 0x8B, 0x9A, 0x96, 0x1E, 0x42, 0x0E, 0xAC },
 { 0xBD, 0xF9, 0x6E, 0x46, 0x07, 0x1E, 0x3A, 0x71 },
 { 0x1B, 0x5E, 0x3D, 0x5B, 0xC2, 0x77, 0x11, 0xC6 },
 { 0x0A, 0x47, 0xE5, 0xB7, 0x30, 0x29, 0x7E, 0x6E },
 { 0xC3, 0x82, 0x7C, 0x9B, 0x07, 0x97, 0xDF, 0xCF },
 { 0x98, 0xA2, 0xC9, 0x31, 0x4F, 0x24, 0x85, 0x72 },
 { 0x69, 0x7C, 0xC9, 0x03, 0xE6, 0xB9, 0x38, 0x85 },
 { 0x30, 0xAD, 0x2B, 0x81, 0xFD, 0x42, 0xB1, 0x59 },
 { 0x76, 0x12, 0xD5, 0x7E, 0x99, 0x31, 0x1F, 0xE4 },
 { 0xDC, 0x4D, 0x5D, 0xB3, 0x13, 0xFA, 0xA2, 0x40 },
 { 0x93, 0x47, 0x90, 0x3B, 0x98, 0x95, 0xD3, 0x2A },
 { 0xE4, 0xA9, 0xEE, 0x15, 0xA9, 0xFF, 0x3A, 0x83 },
 { 0xA9, 0x61, 0x2B, 0xA6, 0x9C, 0xB9, 0xD6, 0xD3 },
 { 0xD2, 0x24, 0xB0, 0x35, 0x19, 0x47, 0x99, 0xC1 },
 { 0xE1, 0xE6, 0x19, 0x6C, 0x9E, 0xB2, 0xE9, 0x9C },
 { 0x6E, 0x63, 0xB5, 0xDD, 0xFC, 0x07, 0x20, 0xD6 },
 { 0xA4, 0x9A, 0x7B, 0xD8, 0xD6, 0x0C, 0x84, 0xC2 },
 { 0x4C, 0x4C, 0x1D, 0x2A, 0xB4, 0x70, 0xDF, 0x9B },
 { 0x82, 0xEC, 0xFF, 0xC1, 0xBA, 0x82, 0xC5, 0x16 },
 { 0x04, 0x08, 0x40, 0xBE, 0x03, 0x6B, 0x39, 0xAE },
 { 0xE3, 0xF4, 0x65, 0x14, 0x31, 0xCA, 0xDE, 0xF3 },
 { 0xF0, 0xB9, 0xD4, 0x0E, 0xE9, 0x31, 0x80, 0x08 },
 { 0x42, 0x92, 0x5A, 0xC9, 0x52, 0xA6, 0x8C, 0x24 },
 { 0xB4, 0x6F, 0xA6, 0xB6, 0x9A, 0x24, 0x93, 0x11 },
 { 0x64, 0x76, 0xCC, 0x1A, 0x72, 0x17, 0xCB, 0xAF },
 { 0x36, 0x7D, 0xC3, 0x8D, 0x8D, 0xE4, 0x8E, 0x71 },
 { 0x4F, 0x92, 0xE7, 0x7E, 0x24, 0x5E, 0xD9, 0xDF },
 { 0x9A, 0x73, 0x77, 0xAD, 0x75, 0x52, 0xCE, 0x13 },
 { 0x47, 0x16, 0x18, 0xB0, 0x40, 0xFC, 0x33, 0x3C },
 { 0x46, 0x22, 0x51, 0x6F, 0x48, 0x8F, 0xF0, 0x1E },
 { 0xD0, 0x74, 0x0D, 0xA8, 0xD8, 0xB1, 0x94, 0x90 },
 { 0xDF, 0x9B, 0x1C, 0x6B, 0x3C, 0xFD, 0xD1, 0xFD },
 { 0xB1, 0x5D, 0xB1, 0x9F, 0x43, 0x80, 0xFC, 0xE3 },
 { 0x49, 0x30, 0xE5, 0x7B, 0xC4, 0x3C, 0x8E, 0x57 },
 { 0xEE, 0xC1, 0x33, 0x0E, 0x16, 0xA8, 0xA6, 0x7F },
 { 0xAA, 0x70, 0xFB, 0xB8, 0x96, 0x2D, 0x84, 0x17 },
 { 0xCC, 0xD1, 0xAE, 0x24, 0xAB, 0x0F, 0xEC, 0x67 },
 { 0x2D, 0xE9, 0x7A, 0xA6, 0xF2, 0x50, 0x64, 0xD1 },
 { 0xC3, 0x79, 0x85, 0x4A, 0xF5, 0xF4, 0x24, 0x79 },
 { 0x7D, 0x5C, 0x2B, 0xEB, 0xCF, 0xA8, 0xC0, 0xFC },
 { 0x6B, 0xA7, 0x8B, 0x85, 0x54, 0x9F, 0xC7, 0xA3 },
 { 0xC4, 0x35, 0x99, 0xBA, 0x1E, 0x8C, 0xA0, 0xB9 },
 { 0x24, 0xB1, 0xCD, 0x9F, 0x6A, 0x37, 0x75, 0x3E },
 { 0x0A, 0x1E, 0xA4, 0x3E, 0x9A, 0xFA, 0xB5, 0x66 },
 { 0x5B, 0x50, 0x1F, 0x17, 0xB3, 0x44, 0x92, 0x19 },
 { 0xDE, 0x71, 0x43, 0x9B, 0xE0, 0x19, 0x84, 0x74 },
 { 0xBE, 0x7E, 0x97, 0xAF, 0xED, 0x8F, 0xC4, 0x47 },
 { 0x0B, 0xC7, 0xA9, 0x2F, 0xCD, 0x53, 0xD2, 0x95 },
 { 0x39, 0x73, 0x89, 0x68, 0x15, 0x22, 0xEF, 0x18 },
 { 0x9F, 0xF9, 0x4C, 0x9D, 0x7E, 0x51, 0xA4, 0xBA },
 { 0xF9, 0xA8, 0x8B, 0x83, 0x67, 0x46, 0x39, 0x1D },
 { 0xE6, 0x1F, 0xE1, 0xC5, 0x50, 0xFC, 0x3F, 0x13 },
 { 0x6B, 0xD6, 0x71, 0x80, 0x60, 0x82, 0x07, 0x27 },
 { 0x6F, 0x94, 0x5D, 0xC8, 0xE0, 0x7D, 0x29, 0x12 },
 { 0x3D, 0xF6, 0x50, 0x22, 0xBE, 0xA2, 0xFE, 0x47 },
 { 0x05, 0xEE, 0xF5, 0x08, 0x0B, 0x3D, 0x25, 0x68 },
 { 0x5B, 0x42, 0x7D, 0x68, 0x7E, 0xAC, 0x02, 0xCE },
 { 0xB6, 0x1E, 0x25, 0xEF, 0xE4, 0x3A, 0x05, 0xF2 },
 { 0x31, 0x8F, 0x94, 0xDC, 0xEC, 0x38, 0x4D, 0xCE },
 { 0xFC, 0x8C, 0xE7, 0x5D, 0xAC, 0x1A, 0x6F, 0x7E },
 { 0x58, 0x27, 0x55, 0xE8, 0x07, 0x95, 0xDC, 0x21 },
 { 0x36, 0xBB, 0x91, 0xD0, 0x1A, 0x80, 0x21, 0xEF },
 { 0xE2, 0xA7, 0x6B, 0x12, 0xB8, 0xAB, 0x11, 0x4F },
 { 0xB6, 0xCA, 0xA6, 0xFB, 0xB3, 0x11, 0x54, 0xA8 },
 { 0xC5, 0xCF, 0x7E, 0x3E, 0x05, 0x49, 0xA4, 0x4E },
 { 0x92, 0xAF, 0x87, 0xA2, 0xD9, 0x4F, 0x8E, 0x19 },
 { 0x13, 0x69, 0xB2, 0x0E, 0x03, 0xF4, 0xE6, 0x31 },
 { 0x9E, 0x5E, 0x3B, 0xBB, 0xA8, 0x8A, 0x16, 0x4B },
 { 0xD3, 0xB5, 0xD0, 0xA5, 0x65, 0x5A, 0x0D, 0xB3 },
 { 0x32, 0x52, 0x49, 0xCA, 0xC7, 0x40, 0xB4, 0x2F },
 { 0xE9, 0x2C, 0x40, 0xDA, 0x3E, 0x6E, 0xF8, 0x79 },
 { 0x49, 0xCE, 0x93, 0xB8, 0x9C, 0xE9, 0x49, 0xC0 },
 { 0x48, 0xD7, 0xE5, 0xFD, 0x99, 0x0A, 0x1C, 0x25 },
 { 0x79, 0x1D, 0x76, 0x51, 0xFE, 0x69, 0x3F, 0x2E },
 { 0xFD, 0xE5, 0xA1, 0xC3, 0x47, 0x2D, 0x97, 0xB5 },
 { 0x3E, 0x2C, 0x34, 0x54, 0x39, 0xEA, 0x2C, 0x18 },
 { 0x2A, 0xA4, 0x96, 0x4B, 0x7E, 0x22, 0xF0, 0x03 },
 { 0x44, 0x45, 0x64, 0x53, 0x92, 0xE0, 0x49, 0xC2 },
 { 0x24, 0xC8, 0xED, 0xFC, 0x47, 0x2F, 0x92, 0xC8 },
 { 0xF5, 0x2D, 0xB6, 0x3A, 0x42, 0xA0, 0x98, 0x2A },
 { 0xF7, 0x36, 0xF7, 0xE5, 0x7C, 0xC8, 0x1D, 0x21 },
 { 0xFB, 0xEA, 0x1C, 0x37, 0xC2, 0xC0, 0x58, 0x8C },
 { 0xE9, 0x13, 0x45, 0x50, 0x35, 0xA3, 0x72, 0x6C },
 { 0x3D, 0xBF, 0xC7, 0xB5, 0xCB, 0x14, 0x0B, 0x66 },
 { 0x85, 0xC3, 0xA8, 0xCD, 0xCD, 0xB6, 0xB3, 0x44 },
 { 0xE5, 0x33, 0x27, 0x63, 0x57, 0xB1, 0x71, 0x74 },
 { 0x94, 0xEB, 0x32, 0x27, 0xDB, 0x34, 0x40, 0x88 },
 { 0x5C, 0x0A, 0xEE, 0x2D, 0x9E, 0xED, 0x8D, 0xB4 },
 { 0x1E, 0x72, 0x32, 0x6D, 0x39, 0x93, 0xBA, 0x53 },
 { 0x4B, 0x49, 0x0C, 0x41, 0x19, 0x5D, 0x9E, 0x62 },
 { 0x6C, 0x7A, 0x3B, 0xEA, 0xFF, 0x88, 0x03, 0x03 },
 { 0x9B, 0x35, 0xB3, 0x0A, 0x81, 0xD4, 0x26, 0xFC },
 { 0x08, 0x6B, 0x1C, 0x2B, 0x87, 0x07, 0x3B, 0x36 },
 { 0x75, 0x53, 0x53, 0x37, 0xCF, 0x69, 0xE6, 0x3E },
 { 0xBA, 0xE8, 0xE8, 0xFF, 0x6A, 0x47, 0xC3, 0xC7 },
 { 0x42, 0x69, 0x9E, 0xB5, 0x3D, 0x71, 0xDF, 0x26 },
 { 0x8C, 0xD7, 0xEE, 0x71, 0x81, 0xBC, 0x3C, 0xD5 },
 { 0xAB, 0x7A, 0x85, 0xAF, 0x43, 0x80, 0x52, 0xF0 },
 { 0xC6, 0x5D, 0xC1, 0xCF, 0xE4, 0x1A, 0x88, 0xBB },
 { 0x99, 0xCD, 0x38, 0x94, 0x9A, 0x6B, 0xBF, 0x1A },
 { 0xF2, 0xDE, 0x31, 0xA6, 0xED, 0x57, 0xC8, 0x18 },
 { 0x35, 0xE6, 0x29, 0x10, 0x3B, 0x48, 0xE8, 0x61 },
 { 0xD8, 0x4F, 0xC2, 0x35, 0xA9, 0x5B, 0xC7, 0xE8 },
 { 0x8A, 0x08, 0x10, 0x5F, 0x6B, 0xCE, 0xC1, 0x82 },
 { 0xA7, 0x6C, 0x31, 0x94, 0x83, 0xE4, 0xE7, 0x5A },
 { 0xBE, 0xC7, 0xC2, 0x80, 0x69, 0xB2, 0x77, 0x38 },
 { 0xF9, 0x19, 0x41, 0x24, 0x9B, 0x43, 0xD3, 0x76 },
 { 0xC7, 0x96, 0x92, 0x56, 0x18, 0x15, 0x01, 0x84 },
 { 0x5B, 0x27, 0x7C, 0x3E, 0xE6, 0x9A, 0x2A, 0x64 } 

     };



    memcpy(buf,byte8code[order],8);

}


 

static void get_8byte_key(unsigned char order, unsigned char *buf) 

{

    static unsigned char byte8result[][8] = { 

{ 0x65, 0xBE, 0x91, 0xE6, 0x8A, 0x8F, 0x87, 0x32   }, 
{ 0x0A, 0x1D, 0xD9, 0x7A, 0xC2, 0x6B, 0xDD, 0xD2   }, 
{ 0xB5, 0xCF, 0x1B, 0x5B, 0x49, 0x47, 0x51, 0x49   }, 
{ 0x29, 0x22, 0xC2, 0xB7, 0xB3, 0x9D, 0x91, 0xC5   }, 
{ 0x62, 0x59, 0x65, 0xE4, 0xF3, 0xE2, 0xC5, 0x11   }, 
{ 0x13, 0x90, 0x4D, 0x68, 0x3F, 0xEC, 0x7D, 0x9B   }, 
{ 0x75, 0x09, 0x5F, 0xEA, 0x32, 0xBF, 0xA5, 0x19   }, 
{ 0x73, 0xB8, 0x11, 0x16, 0x3F, 0xBC, 0x50, 0xBB   }, 
{ 0x19, 0xA8, 0x42, 0xB6, 0x23, 0x9E, 0xAB, 0xD8   }, 
{ 0x8D, 0x12, 0xE9, 0x26, 0x58, 0x85, 0xA7, 0x09   }, 
{ 0xAD, 0x80, 0x4E, 0xF1, 0xA4, 0x96, 0xB7, 0xDD   }, 
{ 0x11, 0x0C, 0xF5, 0x10, 0xF1, 0x7A, 0xBE, 0x02   }, 
{ 0xC4, 0xCE, 0x69, 0xCE, 0xE5, 0xB6, 0x62, 0x29   }, 
{ 0x21, 0x54, 0x90, 0xBC, 0x27, 0x10, 0x3F, 0x84   }, 
{ 0xDC, 0xF3, 0x0F, 0x30, 0xED, 0x6C, 0x68, 0xEB   }, 
{ 0x47, 0xFE, 0xBA, 0xFC, 0xBC, 0xCB, 0x26, 0x8A   }, 
{ 0xBD, 0x96, 0xEC, 0x8B, 0x80, 0x64, 0xB2, 0x30   }, 
{ 0x02, 0x7D, 0xA1, 0x70, 0x70, 0xAE, 0xCC, 0xD1   }, 
{ 0x6B, 0x0E, 0xC3, 0xA7, 0x5C, 0x3C, 0xA3, 0x63   }, 
{ 0x01, 0x9E, 0xF5, 0x7A, 0x84, 0xAF, 0x7E, 0x87   }, 
{ 0x27, 0x77, 0x2C, 0x45, 0x3E, 0x77, 0x15, 0xD6   }, 
{ 0xA5, 0x49, 0x0A, 0x8B, 0xDC, 0x0A, 0x00, 0xFF   }, 
{ 0x1D, 0x1B, 0x20, 0x67, 0xBC, 0x1B, 0x5D, 0x51   }, 
{ 0x13, 0x08, 0xE4, 0x2F, 0x67, 0x26, 0xD9, 0x44   }, 
{ 0xD7, 0xD8, 0xE3, 0x8B, 0x1A, 0x01, 0x5A, 0x73   }, 
{ 0xC5, 0x00, 0x94, 0x6E, 0x8B, 0x78, 0x77, 0x56   }, 
{ 0x9A, 0x89, 0xF8, 0x1E, 0x38, 0x7E, 0x62, 0xAF   }, 
{ 0xB8, 0x7C, 0x26, 0xE9, 0x85, 0x18, 0xCE, 0x10   }, 
{ 0xE2, 0xC5, 0xC9, 0x3B, 0x4F, 0xBE, 0x85, 0xC0   }, 
{ 0xAE, 0x43, 0xED, 0xFA, 0xA1, 0xA0, 0xB9, 0x38   }, 
{ 0x67, 0x73, 0xB5, 0x05, 0xC1, 0xF3, 0x40, 0x41   }, 
{ 0x62, 0x17, 0xE4, 0xE1, 0x41, 0x20, 0x6F, 0x9D   }, 
{ 0x17, 0x0E, 0x2E, 0xFE, 0xBF, 0x06, 0x5A, 0x65   }, 
{ 0xE8, 0xF9, 0x24, 0xC6, 0x3E, 0xFE, 0x96, 0xA9   }, 
{ 0x77, 0xC3, 0x3C, 0x0D, 0x98, 0x00, 0x23, 0x3F   }, 
{ 0x9F, 0x5B, 0x6F, 0x73, 0x31, 0xD7, 0xDE, 0x4D   }, 
{ 0x04, 0x55, 0xE5, 0x8A, 0xC9, 0xFD, 0x0A, 0x65   }, 
{ 0x68, 0x33, 0xDF, 0x14, 0x8C, 0x80, 0x60, 0x61   }, 
{ 0xA5, 0x0F, 0xE4, 0x1F, 0x82, 0x4E, 0xAD, 0x71   }, 
{ 0x1C, 0xBA, 0x80, 0x12, 0x74, 0xED, 0xAF, 0xBF   }, 
{ 0x10, 0x56, 0xCF, 0x75, 0x34, 0xE0, 0x59, 0xD4   }, 
{ 0xA7, 0xF2, 0x86, 0x7C, 0x74, 0x35, 0xEA, 0xAF   }, 
{ 0xF2, 0xC4, 0xD1, 0x7A, 0xAC, 0x13, 0x08, 0x98   }, 
{ 0x16, 0x65, 0x17, 0x8A, 0x7C, 0x74, 0x8E, 0xC5   }, 
{ 0xF3, 0xF3, 0x7A, 0x08, 0xC7, 0x92, 0xE9, 0x7D   }, 
{ 0xEB, 0x33, 0x36, 0x67, 0x60, 0x69, 0x7D, 0x82   }, 
{ 0x41, 0x9E, 0xA1, 0xE1, 0xB5, 0x4F, 0x39, 0xED   }, 
{ 0x3E, 0x16, 0x16, 0x27, 0x7B, 0x0D, 0x4C, 0x4C   }, 
{ 0xE7, 0x69, 0x04, 0x80, 0xFF, 0x2D, 0x16, 0xAB   }, 
{ 0xD2, 0x50, 0xA3, 0x0D, 0x58, 0x7F, 0x03, 0x56   }, 
{ 0x03, 0x11, 0x55, 0x49, 0x22, 0x31, 0xA7, 0xD7   }, 
{ 0xB5, 0x0B, 0xB6, 0xB7, 0xF0, 0x00, 0x54, 0x55   }, 
{ 0xB7, 0x72, 0xEE, 0x2B, 0x6B, 0x97, 0xAC, 0x88   }, 
{ 0xDC, 0xE4, 0xFE, 0x55, 0x6C, 0x1D, 0x35, 0x8C   }, 
{ 0x94, 0x63, 0x44, 0xEF, 0xD0, 0xBB, 0x11, 0x6A   }, 
{ 0x34, 0x55, 0x0A, 0xB5, 0xB6, 0x8D, 0xC6, 0xF6   }, 
{ 0xC6, 0x86, 0x62, 0x11, 0x8B, 0xDB, 0x2F, 0x63   }, 
{ 0xFD, 0x21, 0xE8, 0x91, 0x3D, 0x5A, 0xD5, 0x6C   }, 
{ 0x4C, 0x9D, 0x87, 0xF6, 0x23, 0xB1, 0xB4, 0xBE   }, 
{ 0xF7, 0x4A, 0xC0, 0x90, 0x0B, 0xB3, 0x98, 0xD8   }, 
{ 0x15, 0xEE, 0xB1, 0x12, 0xCE, 0x5D, 0xB8, 0xE2   }, 
{ 0xC6, 0xCF, 0xFE, 0xAB, 0xB1, 0x84, 0x38, 0x5C   }, 
{ 0x14, 0xD4, 0x24, 0x46, 0x6D, 0x14, 0xE6, 0x47   }, 
{ 0x04, 0xE5, 0x4D, 0xBC, 0x05, 0x60, 0xA1, 0x60   }, 
{ 0xD6, 0x55, 0x5D, 0x46, 0x11, 0x10, 0x55, 0x3C   }, 
{ 0x5A, 0xC4, 0x51, 0xB5, 0xDC, 0x56, 0xCC, 0x0F   }, 
{ 0xFA, 0x72, 0xBF, 0x35, 0x1F, 0xC2, 0x24, 0x0F   }, 
{ 0xC2, 0x69, 0xCE, 0x40, 0x96, 0x28, 0x2F, 0xF6   }, 
{ 0xCF, 0x7B, 0x12, 0xC1, 0x3B, 0x69, 0xB5, 0xEA   }, 
{ 0xA9, 0xAD, 0xE4, 0xB6, 0x66, 0x7C, 0xF2, 0x20   }, 
{ 0xB6, 0xCD, 0x43, 0xD9, 0x47, 0x5B, 0x79, 0xBE   }, 
{ 0x72, 0xCA, 0xB4, 0x93, 0x60, 0x66, 0x21, 0x33   }, 
{ 0x09, 0xE9, 0x33, 0x71, 0x2F, 0xBA, 0xC4, 0x06   }, 
{ 0x4E, 0x4A, 0x92, 0xCF, 0x79, 0x68, 0x75, 0xFD   }, 
{ 0x9F, 0x99, 0x31, 0xBE, 0x19, 0x6A, 0x77, 0x52   }, 
{ 0x92, 0xBE, 0xDB, 0xC6, 0x5A, 0x01, 0xF8, 0x66   }, 
{ 0x72, 0xA9, 0x21, 0xFC, 0xD9, 0x52, 0x81, 0x8B   }, 
{ 0x06, 0x08, 0x1A, 0xBA, 0xFA, 0x30, 0xD5, 0xE9   }, 
{ 0x16, 0x44, 0x04, 0x11, 0xDC, 0x76, 0x7C, 0xE6   }, 
{ 0x11, 0xF1, 0xE5, 0x43, 0xD9, 0x26, 0xCA, 0x07   }, 
{ 0x6E, 0xB6, 0x5B, 0x8F, 0xD2, 0x9A, 0x92, 0x7A   }, 
{ 0x5E, 0x0E, 0xD7, 0x60, 0x8F, 0x15, 0xE1, 0xC4   }, 
{ 0x0A, 0x3A, 0xF9, 0x7C, 0x2C, 0x03, 0x7A, 0xEE   }, 
{ 0xF3, 0xC4, 0xEF, 0xF0, 0xDF, 0xFD, 0xCC, 0xDC   }, 
{ 0xBA, 0xC3, 0xF9, 0x2D, 0x32, 0xA1, 0x15, 0xEA   }, 
{ 0x67, 0x5D, 0xB1, 0x6D, 0x03, 0xF1, 0x3E, 0xC2   }, 
{ 0xA5, 0x74, 0xE5, 0xBB, 0x0C, 0x12, 0xA0, 0xD0   }, 
{ 0x6B, 0xD4, 0x97, 0xD7, 0xE8, 0xCA, 0x32, 0x5F   }, 
{ 0x2A, 0xE5, 0xE2, 0xF6, 0xBA, 0x17, 0x6A, 0x7E   }, 
{ 0x6F, 0x46, 0x2F, 0xF7, 0x08, 0x46, 0x86, 0x6F   }, 
{ 0x41, 0x46, 0x4D, 0x24, 0xF5, 0x3F, 0x78, 0xCE   }, 
{ 0x65, 0x53, 0xB5, 0x6E, 0xA7, 0xD4, 0xFF, 0x40   }, 
{ 0xD0, 0x9A, 0x79, 0x95, 0x09, 0xE8, 0xA8, 0xD1   }, 
{ 0x83, 0x6D, 0x9D, 0xA3, 0x61, 0xCA, 0x72, 0x25   }, 
{ 0x2A, 0xFF, 0x04, 0x60, 0xF1, 0xF2, 0xA9, 0xB8   }, 
{ 0x63, 0xF7, 0x5F, 0xF4, 0x94, 0xB4, 0xE1, 0x1D   }, 
{ 0x98, 0x89, 0x51, 0x7D, 0xC1, 0x98, 0x20, 0x3A   }, 
{ 0xB8, 0x68, 0x8A, 0x1E, 0x21, 0xA1, 0x8E, 0xFA   }, 
{ 0xDD, 0x58, 0xE7, 0x9C, 0xA3, 0x3A, 0xFB, 0xA1   }, 
{ 0x86, 0x48, 0x2D, 0x29, 0xC1, 0x53, 0x8C, 0xBF   }, 
{ 0x9C, 0x7F, 0x6A, 0x0A, 0xB1, 0x85, 0x79, 0x44   }, 
{ 0x9D, 0x52, 0x60, 0x33, 0x44, 0x8C, 0x33, 0x90   }, 
{ 0x65, 0x5D, 0x8D, 0x96, 0x4B, 0xA8, 0xDA, 0x9D   }, 
{ 0x74, 0x30, 0xDD, 0x0A, 0x55, 0x7A, 0x8C, 0x19   }, 
{ 0xD2, 0xEE, 0x15, 0xEE, 0x82, 0xBB, 0xCD, 0x14   }, 
{ 0xB9, 0x37, 0x7F, 0xFB, 0x1D, 0x94, 0xCE, 0x5B   }, 
{ 0x85, 0xB0, 0x17, 0x4B, 0x0F, 0xAA, 0x9B, 0xC0   }, 
{ 0x68, 0x59, 0x38, 0x8F, 0x05, 0x6D, 0x51, 0x92   }, 
{ 0x21, 0xB9, 0x5B, 0x45, 0x51, 0x36, 0x9E, 0x01   }, 
{ 0x6C, 0x54, 0x2C, 0x64, 0x3A, 0x7B, 0xF3, 0xFD   }, 
{ 0x13, 0x88, 0x36, 0x9D, 0x77, 0xE3, 0xE1, 0x91   }, 
{ 0x94, 0xB9, 0x6A, 0x77, 0x90, 0x02, 0xD8, 0xD9   }, 
{ 0x4B, 0x6C, 0x95, 0x8B, 0x03, 0x13, 0xFF, 0x39   }, 
{ 0x03, 0x54, 0xA1, 0xD4, 0x1F, 0x39, 0x23, 0xAB   }, 
{ 0xEF, 0xD5, 0x94, 0x72, 0xBA, 0x4A, 0x70, 0x83   }, 
{ 0xE7, 0x93, 0xB1, 0x56, 0x4A, 0x34, 0x21, 0x33   }, 
{ 0xBE, 0x5C, 0x71, 0xAD, 0xB3, 0x35, 0xFB, 0x8D   }, 
{ 0x74, 0x03, 0x5F, 0xA5, 0x17, 0x80, 0xD7, 0x58   }, 
{ 0xDC, 0x33, 0x6F, 0x52, 0x10, 0x37, 0x9A, 0x89   }, 
{ 0x95, 0xDC, 0xBB, 0x5F, 0xC1, 0xB5, 0x04, 0xD2   }, 
{ 0x72, 0xF0, 0xB1, 0x43, 0xA6, 0x1C, 0x92, 0x2C   }, 
{ 0x51, 0xFE, 0xB1, 0xE0, 0xA8, 0xFE, 0x14, 0x3A   }, 
{ 0x7C, 0x3E, 0xA7, 0xFA, 0x5D, 0x40, 0x09, 0x93   }, 
{ 0x0C, 0xC2, 0xFF, 0x3F, 0xA4, 0x35, 0x80, 0xBD   }, 
{ 0xE5, 0x7F, 0x98, 0xEC, 0x34, 0x3F, 0x9D, 0x79   }, 
{ 0x20, 0x77, 0x12, 0xA7, 0x77, 0xC7, 0x31, 0x11   }, 
{ 0xE7, 0xB4, 0x9F, 0x2E, 0x86, 0x5D, 0xBF, 0x63   }, 
{ 0x0F, 0xAB, 0xB9, 0x16, 0xDB, 0xE6, 0x9C, 0x55   }, 
{ 0x2F, 0x3E, 0x31, 0xC2, 0x38, 0xBE, 0x45, 0x2F   }, 
{ 0x57, 0x82, 0x1F, 0x11, 0x6C, 0xEE, 0x33, 0xDC   }, 
{ 0x47, 0x5A, 0xB6, 0x26, 0x9C, 0x8E, 0x37, 0xF2   }, 
{ 0x49, 0x41, 0x3F, 0xAA, 0xB5, 0x88, 0x00, 0x92   }, 
{ 0x04, 0x23, 0x36, 0x8C, 0xCA, 0x1B, 0x6D, 0x7E   }, 
{ 0x1A, 0xD7, 0x30, 0xC5, 0x35, 0x3C, 0x0F, 0x33   }, 
{ 0x6E, 0x9C, 0x3F, 0x63, 0x39, 0xFF, 0xF5, 0xC5   }, 
{ 0xE0, 0xFE, 0xDF, 0x04, 0x10, 0x51, 0xB1, 0x80   }, 
{ 0x7B, 0x90, 0xAE, 0x88, 0x82, 0x8D, 0xC5, 0xB7   }, 
{ 0xBD, 0xE8, 0x6E, 0xD5, 0x4D, 0x5A, 0x51, 0x5E   }, 
{ 0x8D, 0x12, 0x56, 0x80, 0xFF, 0x15, 0x7E, 0xBB   }, 
{ 0x65, 0x5B, 0xB6, 0x6F, 0x3B, 0x12, 0xAB, 0xCE   }, 
{ 0x14, 0xC8, 0xE6, 0x59, 0x6B, 0x03, 0x5C, 0x4E   }, 
{ 0x20, 0x3B, 0xC7, 0x03, 0xD5, 0xD4, 0x6F, 0x04   }, 
{ 0x92, 0x5C, 0x75, 0x56, 0x0B, 0x3A, 0x5B, 0xA4   }, 
{ 0x66, 0x7F, 0xB5, 0xA1, 0x55, 0x98, 0xA6, 0x03   }, 
{ 0x5B, 0x2F, 0x7F, 0xA4, 0x6A, 0xD6, 0x7A, 0x2A   }, 
{ 0x66, 0x7E, 0xFC, 0xE4, 0xFD, 0x79, 0x50, 0x6A   }, 
{ 0xBA, 0xFC, 0x69, 0x4D, 0x5A, 0x63, 0x65, 0x2E   }, 
{ 0x67, 0xA1, 0x1B, 0x7C, 0x02, 0xEB, 0x1B, 0x41   }, 
{ 0x22, 0x07, 0x7F, 0xCB, 0x7C, 0x9E, 0x35, 0x00   }, 
{ 0x15, 0x83, 0x01, 0x26, 0x96, 0xE7, 0xF4, 0x4F   }, 
{ 0xC0, 0x28, 0x6A, 0xF9, 0xF6, 0x90, 0x95, 0x36   }, 
{ 0x42, 0x82, 0xE4, 0x66, 0x20, 0x01, 0x76, 0xDB   }, 
{ 0xB5, 0xCA, 0x19, 0x53, 0xAC, 0x4F, 0x31, 0x51   }, 
{ 0xAC, 0xDD, 0x35, 0xE4, 0x0F, 0x66, 0xA1, 0xF8   }, 
{ 0xA7, 0xFA, 0x4A, 0x1A, 0xEB, 0xC0, 0xF1, 0x3F   }, 
{ 0x03, 0xF1, 0xD8, 0x28, 0xA3, 0xD1, 0x5E, 0x3B   }, 
{ 0xB5, 0x21, 0xC9, 0xED, 0x15, 0xBC, 0x37, 0x9E   }, 
{ 0xC9, 0xBC, 0xF1, 0x4A, 0x83, 0x08, 0x61, 0x01   }, 
{ 0x54, 0xD9, 0x01, 0x06, 0xDB, 0x0C, 0xCE, 0x17   }, 
{ 0x96, 0x25, 0x63, 0xFA, 0xF4, 0x80, 0xCF, 0x3F   }, 
{ 0xCC, 0x9D, 0x6E, 0x2E, 0xA3, 0xDF, 0x3D, 0xF8   }, 
{ 0xA7, 0x41, 0x92, 0x04, 0xE2, 0x58, 0xEE, 0xBD   }, 
{ 0xF6, 0x49, 0xF4, 0x63, 0x71, 0x27, 0x17, 0xE3   }, 
{ 0x11, 0xBA, 0xAD, 0xDB, 0xDF, 0xE4, 0xD1, 0xC7   }, 
{ 0x8A, 0x2F, 0x8A, 0x4C, 0x8D, 0x45, 0x05, 0x8D   }, 
{ 0x6D, 0x79, 0x9B, 0x6D, 0x9B, 0x97, 0xF7, 0x49   }, 
{ 0xA2, 0x95, 0x5B, 0x65, 0xE9, 0x5D, 0x47, 0xD8   }, 
{ 0xBD, 0x26, 0xE8, 0xF8, 0x5E, 0x54, 0xAB, 0xAA   }, 
{ 0xB2, 0xCA, 0x4F, 0x85, 0x55, 0x1A, 0x74, 0x17   }, 
{ 0xC6, 0x79, 0xAD, 0xC6, 0x25, 0xF9, 0x57, 0x4B   }, 
{ 0x6B, 0x92, 0xD9, 0x86, 0x9F, 0x5C, 0x46, 0x36   }, 
{ 0x93, 0xE5, 0xE7, 0xF7, 0x41, 0x85, 0xE4, 0xD3   }, 
{ 0x9A, 0x1A, 0x2D, 0xB7, 0x8F, 0x1E, 0x5A, 0x54   }, 
{ 0x96, 0x59, 0xB7, 0xBA, 0x01, 0x59, 0x0E, 0x89   }, 
{ 0x36, 0xD7, 0x8E, 0xB0, 0xFE, 0x6B, 0xD1, 0xE3   }, 
{ 0x5A, 0x58, 0xD4, 0x22, 0x6E, 0x05, 0x89, 0x87   }, 
{ 0xCC, 0xB8, 0x8E, 0x5A, 0x5D, 0x68, 0xD1, 0x9B   }, 
{ 0x13, 0x9F, 0x66, 0x23, 0x14, 0xEE, 0xDB, 0x76   }, 
{ 0xEA, 0xB6, 0x14, 0x6F, 0xFD, 0xCB, 0x95, 0xBC   }, 
{ 0x29, 0x3C, 0xB2, 0xDD, 0x9C, 0x5A, 0x94, 0x34   }, 
{ 0xB0, 0x62, 0x16, 0xAF, 0xB6, 0x4E, 0x47, 0xBA   }, 
{ 0x92, 0xF7, 0xCE, 0x11, 0x24, 0x80, 0x85, 0xA6   }, 
{ 0x4E, 0xE1, 0x56, 0x8C, 0x00, 0xBA, 0x02, 0x45   }, 
{ 0x06, 0x69, 0x4B, 0x08, 0x9E, 0x42, 0x4A, 0x59   }, 
{ 0xF7, 0x41, 0xFD, 0xB6, 0x4D, 0x1D, 0x85, 0x59   }, 
{ 0x49, 0x1A, 0x30, 0xD8, 0xDE, 0xB0, 0x2D, 0x0C   }, 
{ 0x15, 0x97, 0xCC, 0xA7, 0x0B, 0xE1, 0x94, 0xE4   }, 
{ 0x89, 0x5B, 0xBB, 0xC3, 0x7F, 0x58, 0x5D, 0x3F   }, 
{ 0x0B, 0x5A, 0xA1, 0x5A, 0x17, 0xEB, 0xC2, 0x6B   }, 
{ 0xC3, 0xF6, 0x29, 0x5B, 0xA9, 0xF9, 0x81, 0x2B   }, 
{ 0x2C, 0x93, 0x8F, 0xA1, 0xAC, 0x7A, 0x1F, 0xBB   }, 
{ 0xF5, 0xAD, 0xF8, 0xEF, 0x16, 0xBD, 0xAB, 0xC0   }, 
{ 0x64, 0x1B, 0xCC, 0x2F, 0xC7, 0x3D, 0x3A, 0x95   }, 
{ 0xEB, 0x06, 0xF7, 0xC5, 0x5E, 0xA1, 0x82, 0x60   }, 
{ 0x6D, 0xA7, 0x73, 0x87, 0x7E, 0xCF, 0xC7, 0x15   }, 
{ 0x05, 0x4B, 0xB5, 0x63, 0xBE, 0x31, 0x6A, 0x6D   }, 
{ 0xC8, 0x49, 0x88, 0x9B, 0x59, 0x6E, 0x64, 0x48   }, 
{ 0xA8, 0xD2, 0xE6, 0x8F, 0xBE, 0x1F, 0xB7, 0xEE   }, 
{ 0x4B, 0xDD, 0xDA, 0x64, 0x8E, 0xAF, 0x4F, 0x29   }, 
{ 0xC9, 0xE2, 0x15, 0x6D, 0xC8, 0x21, 0xF9, 0x81   }, 
{ 0xB3, 0x46, 0xDA, 0x28, 0xC0, 0x88, 0xED, 0xAB   }, 
{ 0x8C, 0xFC, 0xA0, 0xAD, 0x1D, 0x94, 0xD9, 0x00   }, 
{ 0x51, 0xE7, 0x83, 0x5C, 0xE4, 0x14, 0xA8, 0xB3   }, 
{ 0xFA, 0x55, 0x38, 0x2D, 0x88, 0x20, 0xCE, 0x8B   }, 
{ 0xFA, 0xB1, 0x5C, 0x6B, 0xF8, 0x00, 0x26, 0x40   }, 
{ 0x0D, 0x93, 0x6C, 0xE7, 0x15, 0xFD, 0x60, 0xE1   }, 
{ 0xC6, 0xF4, 0x8A, 0x04, 0xB6, 0xDA, 0x01, 0x26   }, 
{ 0xD4, 0xFC, 0xD6, 0x94, 0xED, 0xAF, 0x56, 0x2F   }, 
{ 0xAF, 0x09, 0x93, 0x38, 0x7A, 0x56, 0x6B, 0xCC   }, 
{ 0x7F, 0x94, 0x4F, 0xC3, 0x0B, 0x16, 0x5D, 0x14   }, 
{ 0xE8, 0xEF, 0x20, 0x54, 0x79, 0x2F, 0xD0, 0x15   }, 
{ 0x22, 0x91, 0xB3, 0x69, 0xDD, 0x76, 0x05, 0x89   }, 
{ 0x7A, 0x13, 0x07, 0x07, 0x40, 0x49, 0x5C, 0xD8   }, 
{ 0x58, 0x4E, 0xC5, 0xD5, 0x86, 0xAE, 0x39, 0xA2   }, 
{ 0x4C, 0x17, 0x5B, 0xAD, 0x5B, 0xB8, 0xFB, 0xAD   }, 
{ 0xE5, 0x46, 0x9E, 0xB4, 0x9C, 0xE6, 0x74, 0x4C   }, 
{ 0x75, 0x0A, 0xE1, 0x5F, 0x1C, 0x44, 0x9E, 0x58   }, 
{ 0x56, 0x09, 0xF7, 0x2B, 0xAB, 0xFA, 0xDE, 0x4C   }, 
{ 0x44, 0xB3, 0x7C, 0x94, 0x2D, 0x8F, 0x4A, 0xBC   }, 
{ 0xF0, 0x4C, 0x96, 0x79, 0x16, 0x1A, 0x7C, 0xE4   }, 
{ 0xE3, 0x40, 0x8A, 0x8A, 0xE2, 0x7A, 0x55, 0x5C   }, 
{ 0xA1, 0x0B, 0x66, 0x1B, 0x1D, 0x74, 0x3F, 0x16   }, 
{ 0x70, 0x04, 0x64, 0x02, 0xE7, 0xDD, 0x38, 0x28   }, 
{ 0xB0, 0x93, 0x92, 0xB9, 0xF7, 0x98, 0x98, 0x67   }, 
{ 0x76, 0x8B, 0xA0, 0x91, 0x68, 0xB7, 0xDA, 0x08   }, 
{ 0x57, 0xBD, 0x2C, 0x73, 0x77, 0xC0, 0xB9, 0xED   }, 
{ 0x4A, 0x20, 0x6C, 0x1C, 0x09, 0x3E, 0x68, 0xF3   }, 
{ 0x76, 0xCF, 0xB7, 0x13, 0xBE, 0x77, 0xE0, 0x44   }, 
{ 0x41, 0xC0, 0xDA, 0x7C, 0xD2, 0x12, 0x0D, 0x2C   }, 
{ 0x41, 0x64, 0xA4, 0xF2, 0x87, 0xFC, 0xC9, 0xB3   }, 
{ 0xC8, 0xDE, 0xEB, 0x8F, 0xB6, 0xC7, 0xF2, 0x5A   }, 
{ 0x66, 0x3A, 0x57, 0x6B, 0x9D, 0x18, 0xEE, 0xA0   }, 
{ 0x5A, 0x5F, 0x70, 0x98, 0x1C, 0xC5, 0x3E, 0x01   }, 
{ 0x3F, 0x0F, 0x11, 0xBC, 0x09, 0xC2, 0xD6, 0x75   }, 
{ 0xC1, 0xFA, 0x2E, 0x69, 0x7B, 0x46, 0xC8, 0x85   }, 
{ 0x30, 0xCE, 0x61, 0x25, 0x97, 0xEF, 0xE7, 0x55   }, 
{ 0xB1, 0xE8, 0x43, 0xE3, 0x61, 0x83, 0xED, 0x36   }, 
{ 0xCC, 0x1F, 0x08, 0x32, 0x40, 0x5D, 0xAE, 0x75   }, 
{ 0x17, 0xD1, 0x51, 0x7C, 0xD2, 0xEB, 0x14, 0x5E   }, 
{ 0x6A, 0xE0, 0x27, 0xDA, 0x67, 0xB2, 0x2E, 0x96   }, 
{ 0xB5, 0x97, 0x8E, 0xBC, 0x23, 0x37, 0x1C, 0x2E   }, 
{ 0x4C, 0xEB, 0xA9, 0x54, 0xF4, 0xFC, 0x19, 0xF0   }, 
{ 0x5A, 0xB1, 0x81, 0xDD, 0xFF, 0x9E, 0xC2, 0xAC   }, 
{ 0x2C, 0x7B, 0x42, 0xFD, 0x8B, 0x08, 0x8D, 0xED   }, 
{ 0xE3, 0x8E, 0x93, 0xB8, 0xB8, 0xED, 0x24, 0x59   }, 
{ 0x23, 0x44, 0xFF, 0xDC, 0xA3, 0xFE, 0x46, 0x2D   }, 
{ 0x75, 0xF7, 0x00, 0x8C, 0x83, 0xEB, 0xA3, 0x14   }, 
{ 0xF1, 0xCB, 0x4D, 0xD3, 0xE5, 0x21, 0x09, 0xF4   }, 
{ 0xFB, 0xFD, 0xEE, 0xB7, 0xA3, 0x1F, 0xF5, 0x4E   }, 
{ 0x1F, 0xC2, 0x2A, 0xD0, 0xEE, 0xC0, 0xAA, 0xD4   }, 
{ 0x3D, 0x9F, 0x7F, 0x36, 0xD7, 0xDF, 0x1B, 0x21   }, 
{ 0x4E, 0x16, 0x80, 0xF0, 0x7A, 0xDF, 0x89, 0xB7   }, 
{ 0xFB, 0xF1, 0xB4, 0xC8, 0xB5, 0x74, 0xB7, 0x89   }, 
{ 0xCE, 0x9A, 0x14, 0xAF, 0x1A, 0x5D, 0x94, 0xA3   }, 
{ 0x97, 0xD0, 0x06, 0x73, 0x51, 0xCE, 0x4E, 0x84   }, 
{ 0x49, 0xCE, 0xC5, 0xD2, 0xA6, 0x25, 0x44, 0xCE   }, 
{ 0x92, 0x19, 0x6C, 0xAA, 0x5A, 0x7E, 0xA4, 0x42   }, 
{ 0x61, 0x35, 0x4C, 0x30, 0x7A, 0xF3, 0x0F, 0x64   }, 
{ 0x97, 0x9C, 0x62, 0xC4, 0xE1, 0xCC, 0x0F, 0x52   }, 
{ 0xBC, 0xDF, 0xC5, 0x53, 0xFB, 0x86, 0xC2, 0x67   }, 
{ 0xE7, 0x14, 0x1C, 0x12, 0x28, 0x75, 0x7E, 0xD3   }, 
{ 0x30, 0x65, 0xAC, 0x2E, 0xC5, 0x9F, 0xF5, 0xC7   }, 
{ 0x6A, 0x2A, 0xBB, 0x79, 0x5F, 0xED, 0x62, 0x6F   }, 
{ 0xB6, 0x47, 0xAF, 0xFE, 0x4E, 0x84, 0xC7, 0x6A   }, 
{ 0x25, 0x53, 0xBC, 0x7C, 0x33, 0x52, 0xA8, 0x14   }, 
{ 0xD3, 0x14, 0x8F, 0x56, 0x76, 0x5C, 0xAA, 0xCC   }, 
{ 0x51, 0xAC, 0x44, 0xDF, 0xE5, 0xF7, 0x30, 0x65   }, 
{ 0x40, 0xCA, 0x56, 0xB5, 0xF0, 0xE2, 0x37, 0x8F   }, 
{ 0x35, 0x6F, 0x59, 0xCE, 0xF4, 0x1A, 0x3E, 0xA4   }, 
{ 0x64, 0xF8, 0x9A, 0xF3, 0x4C, 0xBC, 0x5B, 0x89   }, 
{ 0xBA, 0x8C, 0x47, 0xD8, 0x3E, 0xE9, 0x6E, 0x60   }, 
{ 0xB5, 0x0A, 0x93, 0xEE, 0xE7, 0x54, 0x5F, 0xAC   }, 
{ 0x62, 0xED, 0x55, 0x82, 0x56, 0x5D, 0xE5, 0xE0   }, 
{ 0x52, 0x7A, 0x2E, 0x94, 0x65, 0x57, 0xC6, 0xD7   }, 
{ 0x84, 0xD0, 0x44, 0xBE, 0x5A, 0x67, 0xE2, 0xF7   }, 
{ 0x2A, 0xD1, 0xDB, 0x32, 0x64, 0x0B, 0x17, 0x4C   }, 
{ 0x63, 0x3A, 0xEB, 0x97, 0x1C, 0x27, 0x46, 0x0A   }, 
{ 0x21, 0xBB, 0x66, 0xC1, 0x28, 0x7C, 0xBB, 0x9D   }, 
{ 0x63, 0x50, 0xF3, 0x68, 0xA5, 0x1D, 0x92, 0xF8   }, 
{ 0x14, 0xEB, 0x82, 0x55, 0x92, 0x5C, 0x05, 0xB9   }, 
{ 0xD5, 0xE3, 0x26, 0x6A, 0xF1, 0xBC, 0x32, 0xE0   }, 
{ 0x59, 0xD6, 0x42, 0x5D, 0x3D, 0x88, 0x67, 0x2D   }, 
{ 0x8F, 0xD8, 0xA7, 0x61, 0x99, 0x0D, 0xEE, 0x27   }, 
{ 0x2C, 0x0A, 0xF8, 0x16, 0x58, 0x51, 0x29, 0x2E   }, 
{ 0x3D, 0x11, 0xEF, 0x2B, 0x88, 0xFA, 0x4C, 0xAE   }, 
{ 0xA7, 0xE7, 0xFA, 0x0D, 0xB2, 0x86, 0x24, 0x64   }, 
{ 0x11, 0x47, 0x9B, 0x79, 0x41, 0x94, 0x8E, 0x40   }, 
{ 0xA6, 0x8E, 0xCD, 0x59, 0x42, 0xED, 0xBD, 0x26   }, 
{ 0xFB, 0x86, 0xCA, 0x6A, 0x47, 0xF4, 0x50, 0x07   }, 
{ 0xD9, 0xF8, 0x42, 0x79, 0xF5, 0xAF, 0xC5, 0x7F   }, 
{ 0xA7, 0xAC, 0x88, 0x76, 0x86, 0x4C, 0xBA, 0x11   }, 
{ 0x09, 0x5E, 0x26, 0xEF, 0x89, 0xD4, 0xE1, 0x69   }, 
{ 0x2C, 0xD3, 0xA3, 0xB7, 0xDC, 0x96, 0x73, 0xFE   }, 
{ 0xF6, 0xD1, 0xAE, 0x3C, 0x4E, 0x72, 0x22, 0xAA   }, 
{ 0x6E, 0x7D, 0xF6, 0x94, 0x59, 0x4F, 0x57, 0x9F   }, 
{ 0x9E, 0xEE, 0xEC, 0x45, 0x74, 0x40, 0xD4, 0xC5   }, 
{ 0xE2, 0x9D, 0x26, 0xD5, 0xB3, 0x02, 0x49, 0xDA   }, 
{ 0x2F, 0x53, 0x03, 0x80, 0x06, 0x26, 0x46, 0xA3   }, 
{ 0x51, 0xD2, 0xF2, 0x06, 0xEB, 0x46, 0x6D, 0x74   }, 
{ 0xEE, 0x95, 0xBB, 0xFD, 0x24, 0xE7, 0xBF, 0x93   }  

 

    };



    memcpy(buf,byte8result[order],8);

}
 



int  apr_arch_ikey_query_protocols()

{

    RB_BYTE   qCell   = 10;
    RB_BYTE   qOrder  = 110;
    RB_WORD   qrySize = 120;
    RB_BYTE   qData[SPRO_MAX_QUERY_SIZE + 1 ];
    RB_BYTE   qResult[ SPRO_MAX_QUERY_SIZE + 1 ];
    RB_DWORD  qResult32;
    SP_STATUS status = 119;

    /*  Perform query */
    qOrder  = rand() % 256;
    qrySize = 2; 
	get_8byte_code(qOrder, qData);
	//printf(" %d ",qOrder );
    status = RNBOsproQuery(el_spro, qCell,(RBP_VOID)qData, (RBP_VOID)qResult, &qResult32, qrySize+6 );

    /*  Display the result.  */
    if (status == SP_SUCCESS) {
        get_8byte_key( qOrder, qData+qCell);
        if( memcmp(qResult,qData+qCell,8)!=0 ) {
            //printf("User lock is invalid!");
            return SP_ACCESS_DENIED;
        }
    }
    return status;
}

 

   
int  checkDogStatus()
{
	static unsigned int stimer = 0;	
	unsigned int	query_factor = 0;

	if (stimer==0)
		mms_runtime_handle();

 

	if ( SP_SUCCESS == apr_arch_ikey_query_protocols()  )  	{
		printf("Success \t\n");
		return 0;
	}
	else  {
		printf("\n Failed . \t\n");
		return 1; 
	}
	 
}



CEncryptSafeNet::CEncryptSafeNet()
{
	m_bSafeNetCheck = FALSE;
}

CEncryptSafeNet::~CEncryptSafeNet()
{
	if (el_spro != NULL)
	{
		free(el_spro);
		el_spro = NULL;
	}
}

void CEncryptSafeNet::OpenLocalEncryptFile()
{
	CEncryptTool::OpenLocalEncryptFile();

	CheckDogState();
}

void CEncryptSafeNet::CheckDogState()
{
	if (m_dwUseDog == 0)
	{
		m_bSafeNetCheck = TRUE;
	}
	else
	{
		if (checkDogStatus() == 0)
		{
			m_bSafeNetCheck = TRUE;
		}
		else
		{
			m_bSafeNetCheck = FALSE;
		}
	}	
}

BOOL CEncryptSafeNet::IsEncrypt()
{
	CEncryptTool::IsEncrypt();

	CheckDogState();

	return m_bRegistered && m_bSafeNetCheck;
}
#endif