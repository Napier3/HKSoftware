#include "stdafx.h"
#include "XFolder.h"
#include "XFileMngr.h"


CXFolder::CXFolder()
{

}

CXFolder::~CXFolder()
{

}


BOOL CXFolder::DeleteAllInFolder()
{
	//查找是否有打开的文件
	if(CheckFileOpen())
	{
		return FALSE;
	}

	CXFolder* pParent = (CXFolder*)this->GetParent();

	if(pParent != NULL)
	{
		DeleteAllDirectorys(this->GetFolderPath());
		pParent->Delete(this);

		return TRUE;
	}

	return FALSE;
}

BOOL CXFolder::CheckFileOpen()
{
	POS pos = this->GetHeadPosition();
	BOOL bFlag = FALSE;

	CExBaseObject* pObj = NULL;
	while(pos != NULL)
	{
		pObj = this->GetNext(pos);
		if(xfile_IsFile(pObj->GetClassID()))
		{
			CXFile* pFile = (CXFile*)pObj;
			if(pFile->m_bIsOpen)
			{
				bFlag = TRUE;
				return bFlag;
			}
		}
		else if(xfile_IsFolder(pObj->GetClassID()))
		{
			CXFolder* pFolder = (CXFolder*)pObj;
			bFlag = pFolder->CheckFileOpen();
			if(bFlag)
			{
				return TRUE;
			}
		}
	}

	return FALSE;
}

BOOL CXFolder::RenameFolder(const CString& strNewName)
{
	if (strNewName == m_strName)
	{
		return FALSE;
	}

	CXFolder *pParent = (CXFolder*)GetParent();
	CString strDestPath = pParent->m_strPath + strNewName;
	CString strSrcPath = m_strPath;

	if (strSrcPath.Right(1) == _T("\\"))
	{
		strSrcPath=strSrcPath.Left(strSrcPath.GetLength() - 1);
	}

#ifdef _UNICODE
	int nRet = _wrename(strSrcPath, strDestPath);
#else
	int nRet = rename(strSrcPath, strDestPath);
#endif

	if (nRet == 0)//IsFileExist(strDestPath))
	{
		m_strName = strNewName;
		m_strID = strNewName;
		m_strPath = strDestPath;
		return TRUE;
	}
	else
	{
		return FALSE;
	}


	return FALSE;
}

CXFile* CXFolder::AddFile(const CString& strFileName,BOOL bOverWrite)
{
	if(bOverWrite)
	{
		CXFile* pFileOld = (CXFile*)FindByLowerName(strFileName);
		ASSERT(pFileOld != NULL);
		Delete(pFileOld);
	}
	
	CXFile* pFile = new CXFile();
	pFile->m_strName = strFileName;
	pFile->m_strID = pFile->m_strName;
	AddTail(pFile);
	pFile->SetParent(this);
	
	return pFile;
}

BOOL CXFolder::IsFileExist(const CString& strFilePath)
{
	CString strName = GetLastFolderNameFromPathName(strFilePath);

	return (FindByID(strName) != NULL);
}

CXFile* CXFolder::AddFile(const CString& strFilePath)
{
	CString strName = GetLastFolderNameFromPathName(strFilePath);

	CXFile* pFile = new CXFile();
	pFile->m_strName = strName;
	pFile->m_strID = pFile->m_strName;
	pFile->m_strFileType = _T("");
	AddTail(pFile);
	pFile->SetParent(this);

	CString strDestFile = pFile->GetRelativePath(TRUE);

	//::CopyFile(strFilePath, strDestFile, FALSE);
	XCopyFile(strFilePath, strDestFile, FALSE);

	return pFile;
}

CXFile* CXFolder::AddFile2(const CString& strFile)
{
	CXFile* pFile = new CXFile();
	pFile->m_strName = strFile;
	pFile->m_strID = pFile->m_strName;
	pFile->m_strFileType = _T("");
	AddTail(pFile);
	pFile->SetParent(this);

	return pFile;
}

CXFile* CXFolder::OverWriteFile(const CString& strFilePath)
{
	CString strName = GetLastFolderNameFromPathName(strFilePath);
	CXFile* pFile = (CXFile*)FindByID(strName);

	if (pFile != NULL)
	{
		CString strDestFile = pFile->GetRelativePath(TRUE);
		//::CopyFile(strFilePath, strDestFile, FALSE);
		XCopyFile(strFilePath, strDestFile, FALSE);
	}

	return pFile;
}


CXFile* CXFolder::AddFile(CXFile *pSrcFile)
{
	CXFile *pNewFile = (CXFile*)pSrcFile->Clone();
	AddTail(pNewFile);
	pNewFile->SetParent(this);

	CString strSrcPath = pSrcFile->GetRelativePath(TRUE);
	CString strDestPath = pNewFile->GetRelativePath(TRUE);

	//::CopyFile(strSrcPath, strDestPath, FALSE);
	XCopyFile(strSrcPath, strDestPath, FALSE);

	return pNewFile;
}

CXFile* CXFolder::AddFile(CXFile *pSrcFile, const CString &strFileName)
{
	CXFile *pNewFile = (CXFile*)pSrcFile->Clone();
	AddTail(pNewFile);
	pNewFile->SetParent(this);
	pNewFile->m_strName = strFileName;
	pNewFile->m_strID = strFileName;

	CString strSrcPath = pSrcFile->GetRelativePath(TRUE);
	CString strDestPath = pNewFile->GetRelativePath(TRUE);

	//::CopyFile(strSrcPath, strDestPath, TRUE);
	XCopyFile(strSrcPath, strDestPath, TRUE);

	return pNewFile;
}

CXFolder* CXFolder::AddFolder(const CString& strFolderName, BOOL bCreateFolder)
{
	CXFolder* pNewFolder = NULL;

	if( FindByLowerName(strFolderName) == NULL)
	{
		pNewFolder = new CXFolder();
		AddTail(pNewFolder);
		pNewFolder->SetParent(this);
		pNewFolder->m_strName = strFolderName;
		pNewFolder->m_strID = strFolderName;
	
		CString strPath = m_strPath + strFolderName + _T("\\");
		pNewFolder->m_strPath = strPath;

		if (bCreateFolder)
		{
			CreateAllDirectories(strPath);
		}

		return pNewFolder;
	}
	
	return NULL;
}

BOOL CXFolder::GetFolderModifyTime(CString& strModifyTime)
{
	BOOL bTrue = FALSE;
	// 打开文件夹
	HANDLE hFolder = CreateFile (GetFolderPath(), 
		GENERIC_READ,
		FILE_SHARE_READ|FILE_SHARE_DELETE,
		NULL,
		OPEN_EXISTING,
		FILE_FLAG_BACKUP_SEMANTICS,
		NULL);

	FILETIME lpCreationTime; // 文件夹的创建时间
	FILETIME lpLastAccessTime; // 对文件夹的最近访问时间
	FILETIME lpLastWriteTime; // 文件夹的最近修改时间

	SYSTEMTIME systime;

	// 获取文件夹时间属性信息
	if (GetFileTime(hFolder, &lpCreationTime, &lpLastAccessTime, &lpLastWriteTime))
	{
		FILETIME ftime;
		FileTimeToLocalFileTime(&lpLastWriteTime, &ftime); // 转换成本地时间
		FileTimeToSystemTime(&ftime, &systime); // 转换成系统时间格式

		strModifyTime.Format(_T("%4d-%02d-%02d %02d:%02d")
			,systime.wYear,systime.wMonth,systime.wDay,systime.wHour
			,systime.wMinute);

		bTrue = TRUE;
	}

	CloseHandle(hFolder); // 关闭打开过的文件夹
	return bTrue;	
}

BOOL CXFolder::IsFolderExist()
{
	WIN32_FIND_DATA   wfd;
	BOOL rValue = FALSE;

	m_strPath = GetFolderPath();
	CString strPath = m_strPath;
	if(strPath.Right(1) == _T("\\"))
	{
		int nCount = m_strPath.ReverseFind('\\');
		strPath = m_strPath.Left(nCount);
	}
	
	HANDLE hFind = FindFirstFile(strPath, &wfd);
	
	if ((hFind != INVALID_HANDLE_VALUE) && (wfd.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY))
	{
		rValue = TRUE;   
	}

	FindClose(hFind);

	return rValue;
}

//在磁盘中查找子对象指向的文件和文件夹是否存在
//如果文件夹不存在，则在磁盘中创建
//如果文件不存在，则将子对象从链表中删除
BOOL CXFolder::CheckFileExist()
{
	//首先验证this指向的文件夹是否存在
	BOOL bChange = FALSE;
	BOOL bFlag = IsFolderExist();

	if(bFlag)
	{
		POS pos = this->GetHeadPosition();
		CExBaseObject* pObj = NULL;

		while(pos != NULL)
		{
			pObj = this->GetNext(pos);
			if( xfile_IsFolder(pObj->GetClassID()) )
			{
				CXFolder* pFolderBase = (CXFolder*)pObj;

				if( !pFolderBase->IsFolderExist() )
				{
					CreateAllDirectories(pFolderBase->GetFolderPath());
				}
			}
			else if( xfile_IsFile(pObj->GetClassID()) )
			{
				CXFile* pFileBase = (CXFile*)pObj;

				if( !pFileBase->IsFileExist() )
				{
					this->Delete(pObj);
					bChange = TRUE;
				}
			}
		}
	}
	else
	{
		CreateAllDirectories(GetFolderPath());
	}
	
	return bChange;
}

//不区分大小写的查找
CExBaseObject* CXFolder::FindByLowerName(CString strFolderName)
{	
	CExBaseObject* pTemp = NULL;
	CExBaseObject* pFind = NULL;

	POS pos = GetHeadPosition();

	while (pos != NULL)
	{
		pTemp = (CXFolder*)GetNext(pos);
		CString strName = pTemp->m_strName;
		
		if (strName.MakeLower() == strFolderName.MakeLower())
		{
			pFind = pTemp;
			break;
		}
	}

	return pFind;
}

CXFile* CXFolder::SelectFileInCurrFolder(const CString &strFile, BOOL bUseFullPath)
{
	CExBaseObject* pTemp = NULL;
	CExBaseObject* pFind = NULL;

	POS pos = GetHeadPosition();
	CString strTemp;

	while (pos != NULL)
	{
		pTemp = GetNext(pos);

		if (pTemp->IsBaseObject())
		{
			//strTemp = pTemp->m_strName;
			if (bUseFullPath)
			{
				strTemp = ((CXFile*)pTemp)->GetTotalFileName();
			}
			else
			{
				strTemp = pTemp->m_strName;
			}

			strTemp.MakeLower();

			if (strTemp == strFile)
			{
				pFind = pTemp;
				break;
			}
		}

	}

	return (CXFile*)pFind;
}

CXFile* CXFolder::SelectFileInSubFolder(const CString &strFile, BOOL bUseFullPath)
{
	CExBaseObject* pTemp = NULL;
	CExBaseObject* pFind = NULL;

	POS pos = GetHeadPosition();
	CString strTemp;

	while (pos != NULL)
	{
		pTemp = GetNext(pos);

		if (pTemp->IsBaseList())
		{
			pFind = ((CXFolder*)pTemp)->SelectFile(strFile, bUseFullPath);

			if (pFind != NULL)
			{
				break;
			}
		}
	}

	return (CXFile*)pFind;
}

CXFile* CXFolder::SelectFile(const CString &strFile, BOOL bUseFullPath)
{
	CXFile *pFileFind = SelectFileInCurrFolder(strFile, bUseFullPath);

	if (pFileFind != NULL)
	{
		return pFileFind;
	}

	pFileFind = SelectFileInSubFolder(strFile, bUseFullPath);

	return pFileFind;
}


CXFolder* CXFolder::SelectFolderInCurrFolder(const CString &strFolder, BOOL bUseFullPath)
{
	CExBaseObject* pTemp = NULL;
	CExBaseObject* pFind = NULL;

	POS pos = GetHeadPosition();
	CString strTemp;

	while (pos != NULL)
	{
		pTemp = GetNext(pos);

		if (pTemp->IsBaseList())
		{
			if (bUseFullPath)
			{
				strTemp = ((CXFolder*)pTemp)->GetFolderPath();
			}
			else
			{
				strTemp = pTemp->m_strName;
			}

			strTemp.MakeLower();

			if (strTemp == strFolder)
			{
				pFind = pTemp;
				break;
			}
		}

	}

	return (CXFolder*)pFind;
}

CXFolder* CXFolder::SelectFolderInSubFolder(const CString &strFolder, BOOL bUseFullPath)
{
	CExBaseObject* pTemp = NULL;
	CExBaseObject* pFind = NULL;

	POS pos = GetHeadPosition();
	CString strTemp;

	while (pos != NULL)
	{
		pTemp = GetNext(pos);

		if (pTemp->IsBaseList())
		{
			pFind = ((CXFolder*)pTemp)->SelectFolder(strFolder, bUseFullPath);

			if (pFind != NULL)
			{
				break;
			}
		}
	}

	return (CXFolder*)pFind;
}

CXFolder* CXFolder::SelectFolder(const CString &strFolder, BOOL bUseFullPath)
{
	CXFolder *pFileFind = SelectFolderInCurrFolder(strFolder, bUseFullPath);

	if (pFileFind != NULL)
	{
		return pFileFind;
	}

	pFileFind = SelectFolderInSubFolder(strFolder, bUseFullPath);

	return pFileFind;
}



long CXFolder::Search(CExBaseList *pListPostfix, BOOL bTraveSubFolder)
{
	CFileFind finder;
	CString strPath = m_strPath;
	CString strFinder = strPath + _T("*.*");
	BOOL bIsFinded = finder.FindFile(strFinder);

	while(bIsFinded)
	{
		bIsFinded = (BOOL)finder.FindNextFile();

		if( !finder.IsDots())
		{
			if(finder.IsDirectory())
			{
				if (bTraveSubFolder)
				{
					CXFolder* pChildFolder = AddFolder(finder.GetFileName(), FALSE);
				}
			}
			else
			{
				//获取后缀
				CString strFileWithExtension = finder.GetFileName();
				int npos = strFileWithExtension.ReverseFind('.'); 

				if(npos != -1)
				{
					npos++;
					//CString strFilePostFix = strFileWithExtension.Right(strFileWithExtension.GetLength() - npos); 

					if(pListPostfix->FindByID(strFileWithExtension.Mid(npos)) != NULL)
					{
						//CString strFileName = finder.GetFileName();//finder.GetFileTitle()+_T(".") + strFilePostFix;
						AddFile(finder.GetFileName(),FALSE);
					}
				}
			}
		}
	}

	finder.Close();

	if (bTraveSubFolder)
	{
		SearchChildren(pListPostfix, bTraveSubFolder);
	}

	return 0;
}

long CXFolder::SearchChildren(CExBaseList *pListPostfix, BOOL bTraveSubFolder)
{
	POS pos =  GetHeadPosition();
	CExBaseObject *p = NULL;
	CExBaseList oListFolder;
	CExBaseList oListFile;

	while (pos != NULL)
	{
		p = GetNext(pos);

		if (p->GetClassID() == CLASSID_XFOLDER)
		{
			oListFolder.AddTail(p);
		}
		else
		{
			oListFile.AddTail(p);
		}
	}

	RemoveAll();
	Append(oListFolder);
	Append(oListFile);
	oListFolder.RemoveAll();
	oListFile.RemoveAll();

	pos =  GetHeadPosition();

	while (pos != NULL)
	{
		p = GetNext(pos);

		if (p->GetClassID() == CLASSID_XFOLDER)
		{
			((CXFolder*)p)->Search(pListPostfix, bTraveSubFolder);
		}
	}

	return 0;
}

BOOL CXFolder::DeleteFolder()
{
	CString strPath = m_strPath;

	if (strPath.Right(1) == _T("\\"))
	{
		strPath = strPath.Left(strPath.GetLength() - 1);
	}

	BOOL bFlag =  ::RemoveDirectory(strPath);
	return bFlag;

}

BOOL CXFolder::DeleteFolderEx()
{
	CString strPath = m_strPath;

	if (strPath.Right(1) == _T("\\"))
	{
		strPath = strPath.Left(strPath.GetLength() - 1);
	}

	BOOL bFlag =  DeleteAllDirectorys(strPath);
	return bFlag;
}

long CXFolder::DeleteFile(const CString &strFile)
{
	return 0;
}

long CXFolder::DeleteFile(CXFile *pFile)
{
	pFile->DeleteFile();
	Delete(pFile);
	return 0;
}

BOOL CXFolder::CopyTo(const CString &strPath)
{
	return 0;
}

CXFolder* CXFolder::AddPath(const CString &strPath)
{
	CString strName = GetLastFolderNameFromPathName(strPath);
	CXFileMngr *pMngr = (CXFileMngr*)GetAncestor(CLASSID_XFILEMNGR);
	ASSERT(pMngr != NULL);
	CXFolder *pSrcFolder = new CXFolder();

	pSrcFolder->m_strPath = strPath;

	if (pSrcFolder->m_strPath.Right(1) != _T("\\"))
	{
		pSrcFolder->m_strPath += _T("\\");
	}

	pSrcFolder->m_strID = strName;
	pSrcFolder->m_strName = strName;

	pSrcFolder->Search(pMngr->GEtFilePostfixList(), TRUE);

	CXFolder *pDestFolder = (CXFolder*)Paste(pSrcFolder);
	delete pSrcFolder;
	return pDestFolder;
}

CString CXFolder::GetFolderPath(BOOL bValidateLastChar)
{
	if (bValidateLastChar)
	{
		CString strPath = m_strPath;

		if (strPath.Right(1) != _T("\\"))
		{
			strPath += _T("\\");
		}

		return strPath;
	}
	else
	{
		return m_strPath;
	}
}

CExBaseObject* CXFolder::Paste(CExBaseObject *pObj)
{
	UINT nClassID = pObj->GetClassID();
	CExBaseObject *pRet = NULL;

	if (nClassID == CLASSID_XFOLDER)
	{
		CXFolder *pNew = new CXFolder();
		pObj->CopyOwn(pNew);
		CString strPath = m_strPath + pObj->m_strName;
		pNew->m_strPath =strPath  + _T("\\");
		CreateAllDirectories(strPath);
		AddNewChild(pNew);
		pRet = pNew;

		CXFolder *pFolder = (CXFolder*)pObj;
		POS pos = pFolder->GetHeadPosition();
		CExBaseObject *p = NULL;

		while (pos != NULL)
		{
			p = pFolder->GetNext(pos);
			pNew->Paste(p);
		}
	}
	else if (nClassID == CLASSID_XFILE)
	{
		pRet = AddFile((CXFile*)pObj, pObj->m_strName);
	}

	return pRet;
}

CExBaseObject* CXFolder::Paste(CExBaseList *pList)
{
	return Paste((CExBaseObject*)pList);
}

void CXFolder::SetPath(const CString &strPath)
{
	if (strPath.Right(1) == _T("\\"))
	{
		m_strPath = strPath;
	}
	else
	{
		m_strPath = strPath + _T("\\");
	}
}

void XFile_BringFileHead(CXFolder *pFolder, const CString &strFilePostfix)
{
	CExBaseList oList;
	POS pos = pFolder->GetHeadPosition();
	CExBaseObject *p = NULL;
	long nLen = strFilePostfix.GetLength();

	while (pos != NULL)
	{
		p = (CExBaseObject *)pFolder->GetNext(pos);

		if (p->GetClassID() == CLASSID_XFOLDER)
		{
			XFile_BringFileHead((CXFolder*)p, strFilePostfix);
		}
		else
		{
			if (p->m_strID.Right(nLen) == strFilePostfix)
			{
				oList.AddTail(p);
			}
		}
	}

	pos = oList.GetHeadPosition();

	while (pos != NULL)
	{
		p = (CExBaseObject *)oList.GetNext(pos);
		pFolder->BringToHead(p);
	}

	oList.RemoveAll();
}



