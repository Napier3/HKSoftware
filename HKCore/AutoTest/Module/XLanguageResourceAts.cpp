//这段源代码由ClassGenerator创建
//版权所有 LiJunqing  lijunqing1224@126.com
//保留所有权利

//XLanguageResourceBase.cpp  CXLanguageResourceAtsBase


#include "stdafx.h"
#include "XLanguageResourceAts.h"
#include "../../Module/Api/GlobalConfigApi.h"

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

CString  g_strXLangRsAtsBaseFile = _T("RsAtsBase");

CXLanguageResourceAtsBase::CXLanguageResourceAtsBase()
{

}


CXLanguageResourceAtsBase::~CXLanguageResourceAtsBase()
{
	m_oXLangRsAtsBase.RemoveAll();
}

void CXLanguageResourceAtsBase::InitLangFileForDebug(const CString &strModule)
{
	m_strXLangFile = _P_GetLanguagePath();
	m_strXLangFile.AppendFormat(_T("%s.xml"), strModule.GetString());
}

CXLangItem* CXLanguageResourceAtsBase::rs_AddString(const CString &strID, CString *pstrString)
{
	CXLangItem *p = CXLanguage::AddString(strID, pstrString);

	m_oXLangRsAtsBase.AddTail(p);

	return p;
}

void CXLanguageResourceAtsBase::InitLangRsByFile()
{
	CXLanguageResourceBase::InitLangRsByFile();

	InitLangRsByFileEx(&m_oXLangRsAtsBase, g_strXLangRsAtsBaseFile);
}

void CXLanguageResourceAtsBase::RegisterLanguageResource()
{
	CXLanguageResourceBase::RegisterLanguageResource();
	rs_AddString(g_sLangID_OpenTemplate, &g_sLangTxt_OpenTemplate);
	rs_AddString(g_sLangID_OpenSubTemplate, &g_sLangTxt_OpenSubTemplate);
	rs_AddString(g_sLangID_OpenPowerTestTemplate, &g_sLangTxt_OpenPowerTestTemplate);

	// 	rs_AddString(g_sLangID_TraProtocol, &g_sLangTxt_TraProtocol);
	// 	rs_AddString(g_sLangID_61850Protocol, &g_sLangTxt_61850Protocol);
	rs_AddString(g_sLangID_Edit, &g_sLangTxt_Edit);
	// 	rs_AddString(g_sLangID_Browse, &g_sLangTxt_Browse);

	rs_AddString(g_sLangID_SelNone, &g_sLangTxt_SelNone);
	rs_AddString(g_sLangID_TestTask, &g_sLangTxt_TestTask);

	rs_AddString(g_sLangID_ExterScript, &g_sLangTxt_ExterScript);
	rs_AddString(g_sLangID_InterScript, &g_sLangTxt_InterScript);

	rs_AddString(g_sLangID_Attribute, &g_sLangTxt_Atrribute);
	rs_AddString(g_sLangID_Times, &g_sLangTxt_Times);
	rs_AddString(g_sLangID_DataPro, &g_sLangTxt_DataPro);

	rs_AddString(g_sLangID_TestTemplateFile, &g_sLangTxt_TestTemplateFile);
	rs_AddString(g_sLangID_TestSubTemplateFile, &g_sLangTxt_TestSubTemplateFile);
	rs_AddString(g_sLangID_ReportTemplateFile, &g_sLangTxt_ReportTemplateFile);

	rs_AddString(g_sLangID_ReportDefinition, &g_sLangTxt_ReportDefinition);
	rs_AddString(g_sLangID_TagManagement, &g_sLangTxt_TagManagement);
	rs_AddString(g_sLangID_LetterForm, &g_sLangTxt_LetterForm);
	rs_AddString(g_sLangID_ViewDevPara, &g_sLangTxt_ViewDevPara);
	rs_AddString(g_sLangID_TestInlegibleItems, &g_sLangTxt_TestInlegibleItems);
	rs_AddString(g_sLangID_TestCurrtItem, &g_sLangTxt_TestCurrtItem);
	rs_AddString(g_sLangID_TestCurrtItemDev, &g_sLangTxt_TestCurrtItemDev);
	rs_AddString(g_sLangID_TestCurrtItemStart, &g_sLangTxt_TestCurrtItemStart);
	rs_AddString(g_sLangID_ParaMdf, &g_sLangTxt_ParaMdf);
	rs_AddString(g_sLangID_UpdataPara, &g_sLangTxt_UpdataPara);
	rs_AddString(g_sLangID_UpdataParaToGb, &g_sLangTxt_UpdataParaToGb);
	rs_AddString(g_sLangID_ViewReport, &g_sLangTxt_ViewReport);
	rs_AddString(g_sLangID_ViewRecordFile, &g_sLangTxt_ViewRecordFile);
	rs_AddString(g_sLangID_ViewCharCurve, &g_sLangTxt_ViewCharCurve);
	rs_AddString(g_sLangID_ExpdNodes, &g_sLangTxt_ExpdNodes);

	rs_AddString(g_sLangID_ComictnComm, &g_sLangTxt_ComictnComm);
	rs_AddString(g_sLangID_ComictnFront, &g_sLangTxt_ComictnFront);
	rs_AddString(g_sLangID_ComictnLater, &g_sLangTxt_ComictnLater);
	rs_AddString(g_sLangID_ComputMode, &g_sLangTxt_ComputMode);
	rs_AddString(g_sLangID_ComictnTime, &g_sLangTxt_ComictnTime);
	rs_AddString(g_sLangID_Text, &g_sLangTxt_Text);

	rs_AddString(g_sLangID_CreatTestMngFail, &g_sLangTxt_CreatTestMngFail);
	rs_AddString(g_sLangID_CreatTestAbnom, &g_sLangTxt_CreatTestAbnom);
	rs_AddString(g_sLangID_CreatTestCmtFail, &g_sLangTxt_CreatTestCmtFail);
	rs_AddString(g_sLangID_NoPrtcCpnt, &g_sLangTxt_NoPrtcCpnt);
	rs_AddString(g_sLangID_CreatPrtcFail, &g_sLangTxt_CreatPrtcFail);
	rs_AddString(g_sLangID_FileOpenFalseS, &g_sLangTxt_FileOpenFalseS);
	rs_AddString(g_sLangID_TestFileOpenFalseS, &g_sLangTxt_TestFileOpenFalseS);
	rs_AddString(g_sLangID_CommunItemD, &g_sLangTxt_CommunItemD);
	rs_AddString(g_sLangID_TestStopS, &g_sLangTxt_TestStopS);
	rs_AddString(g_sLangID_CommunIgnored, &g_sLangTxt_CommunIgnored);
	rs_AddString(g_sLangID_OnlineFail, &g_sLangTxt_OnlineFail);
	rs_AddString(g_sLangID_TestStartInf, &g_sLangTxt_TestStartInf);
	rs_AddString(g_sLangID_ParaDnldFail, &g_sLangTxt_ParaDnldFail);
	rs_AddString(g_sLangID_TestUnsuptFctn, &g_sLangTxt_TestUnsuptFctn);
	rs_AddString(g_sLangID_TestOverTimeS, &g_sLangTxt_TestOverTimeS);
	rs_AddString(g_sLangID_CommunOverTime, &g_sLangTxt_CommunOverTime);
	rs_AddString(g_sLangID_CommunTestStop, &g_sLangTxt_CommunTestStop);
	rs_AddString(g_sLangID_ReCommunD, &g_sLangTxt_ReCommunD);
	rs_AddString(g_sLangID_CommunFalse, &g_sLangTxt_CommunFalse);

	rs_AddString(g_sLangID_StartCommun, &g_sLangTxt_StartCommun);
	rs_AddString(g_sLangID_ContNextItem, &g_sLangTxt_ContNextItem);
	rs_AddString(g_sLangID_TestContS, &g_sLangTxt_TestContS);
	rs_AddString(g_sLangID_TestStop3, &g_sLangTxt_TestStop3);
	rs_AddString(g_sLangID_NoTestItem, &g_sLangTxt_NoTestItem);
	rs_AddString(g_sLangID_ItemTestTimeD, &g_sLangTxt_ItemTestTimeD);
	rs_AddString(g_sLangID_ItemTestTimeD2, &g_sLangTxt_ItemTestTimeD2);
	rs_AddString(g_sLangID_Communtioning, &g_sLangTxt_Communtioning);
	rs_AddString(g_sLangID_MdfParaData, &g_sLangTxt_MdfParaData);
	rs_AddString(g_sLangID_CommunTestTimeD, &g_sLangTxt_CommunTestTimeD);
	rs_AddString(g_sLangID_CommunCmdS, &g_sLangTxt_CommunCmdS);
	rs_AddString(g_sLangID_CommunCmdItem, &g_sLangTxt_CommunCmdItem);
	rs_AddString(g_sLangID_CallRecordFail, &g_sLangTxt_CallRecordFail);
	rs_AddString(g_sLangID_ReadRecordFileS, &g_sLangTxt_ReadRecordFileS);
	rs_AddString(g_sLangID_TestStop4, &g_sLangTxt_TestStop4);
	rs_AddString(g_sLangID_TestCotrAbnom, &g_sLangTxt_TestCotrAbnom);
	rs_AddString(g_sLangID_ItemUncmpltS, &g_sLangTxt_ItemUncmpltS);
	rs_AddString(g_sLangID_TestCotrAbnom2, &g_sLangTxt_TestCotrAbnom2);
	rs_AddString(g_sLangID_EltrcProjectCmplt, &g_sLangTxt_EltrcProjectCmplt);
	rs_AddString(g_sLangID_NotCommunCmd, &g_sLangTxt_NotCommunCmd);
	rs_AddString(g_sLangID_CommunFalse2, &g_sLangTxt_CommunFalse2);
	rs_AddString(g_sLangID_TestItemFalse, &g_sLangTxt_TestItemFalse);
	rs_AddString(g_sLangID_CommunParaFalse, &g_sLangTxt_CommunParaFalse);
	rs_AddString(g_sLangID_ItemDataUnexistS, &g_sLangTxt_ItemDataUnexistS);
	rs_AddString(g_sLangID_ItemDataUnexist, &g_sLangTxt_ItemDataUnexist);
	rs_AddString(g_sLangID_ItemDataUnexist2, &g_sLangTxt_ItemDataUnexist2);
	rs_AddString(g_sLangID_ItemDataUnexist3, &g_sLangTxt_ItemDataUnexist3);
	rs_AddString(g_sLangID_ItemDataUnexist4, &g_sLangTxt_ItemDataUnexist4);
	rs_AddString(g_sLangID_SytmTestFalse, &g_sLangTxt_SytmTestFalse);
	rs_AddString(g_sLangID_TestAbnrm2, &g_sLangTxt_TestAbnrm2);
	rs_AddString(g_sLangID_TestAbnrm3, &g_sLangTxt_TestAbnrm3);
	rs_AddString(g_sLangID_DealCommunRst, &g_sLangTxt_DealCommunRst);
	rs_AddString(g_sLangID_CreatRptFail, &g_sLangTxt_CreatRptFail);
	rs_AddString(g_sLangID_WaitRtest, &g_sLangTxt_WaitRtest);
	rs_AddString(g_sLangID_CommunUnExist, &g_sLangTxt_CommunUnExist);
	rs_AddString(g_sLangID_CmdFalse, &g_sLangTxt_CmdFalse);
	rs_AddString(g_sLangID_CommunEngineFalse, &g_sLangTxt_CommunEngineFalse);
	rs_AddString(g_sLangID_PrtcEngineFalse, &g_sLangTxt_PrtcEngineFalse);
	rs_AddString(g_sLangID_PathData, &g_sLangTxt_PathData);
	rs_AddString(g_sLangID_PathFalse, &g_sLangTxt_PathFalse);
	rs_AddString(g_sLangID_FunctionError, &g_sLangTxt_FunctionError);
	rs_AddString(g_sLangID_TestFctnNo, &g_sLangTxt_TestFctnNo);
	rs_AddString(g_sLangID_UnCreatFctn, &g_sLangTxt_UnCreatFctn);
	rs_AddString(g_sLangID_CallRecordFail2, &g_sLangTxt_CallRecordFail2);
	rs_AddString(g_sLangID_ReportExpSucc, &g_sLangTxt_ReportExpSucc);
	rs_AddString(g_sLangID_CallCmdFail, &g_sLangTxt_CallCmdFail);
	////GuideBookDefine里的输出信息
	rs_AddString(g_sLangID_Qualified, &g_sLangTxt_Qualified);
	rs_AddString(g_sLangID_Unqualified, &g_sLangTxt_Unqualified);
	rs_AddString(g_sLangID_ErrorID, &g_sLangTxt_ErrorID);

	rs_AddString(g_sLangID_CurrZoneIndex, &g_sLangTxt_CurrZoneIndex);
	rs_AddString(g_sLangID_ZoneIndex, &g_sLangTxt_ZoneIndex);
	//
	rs_AddString(g_sLangID_ModifyAndSave, &g_sLangTxt_ModifyAndSave);
	//CharTemplateSelDlg里的输出信息
	rs_AddString(g_sLangID_SelCharCurve, &g_sLangTxt_SelCharCurve);

	rs_AddString(g_sLangID_ItemType, &g_sLangTxt_ItemType);
	rs_AddString(g_sLangID_Status, &g_sLangTxt_Status);
	rs_AddString(g_sLangID_ItemPath, &g_sLangTxt_ItemPath);
	rs_AddString(g_sLangID_ReportInf, &g_sLangTxt_ReportInf);
	rs_AddString(g_sLangID_RetestQualified, &g_sLangTxt_RetestQualified);
	rs_AddString(g_sLangID_ElectrQuanPrjc, &g_sLangTxt_ElectrQuanPrjc);
	rs_AddString(g_sLangID_ArtificialProject, &g_sLangTxt_ArtificialProject);



	rs_AddString(g_sLangID_ErrorDll, &g_sLangTxt_ErrorDll);
	rs_AddString(g_sLangID_DllUnStopTest, &g_sLangTxt_DllUnStopTest);

	rs_AddString(g_sLangID_CrtPrtlEgnFail, &g_sLangTxt_CrtPrtlEgnFail);
	rs_AddString(g_sLangID_RlsPrtlEgnFail, &g_sLangTxt_RlsPrtlEgnFail);
	rs_AddString(g_sLangID_TestLogMngmt, &g_sLangTxt_TestLogMngmt);
	rs_AddString(g_sLangID_TestRptRecodFile, &g_sLangTxt_TestRptRecodFile);
	rs_AddString(g_sLangID_TestRptFile, &g_sLangTxt_TestRptFile);
	rs_AddString(g_sLangID_TestTaskFile, &g_sLangTxt_TestTaskFile);
	rs_AddString(g_sLangID_SngDeviceRpt, &g_sLangTxt_SngDeviceRpt);
	rs_AddString(g_sLangID_MulDeviceRpt, &g_sLangTxt_MulDeviceRpt);
	rs_AddString(g_sLangID_SngDeviceRpt2, &g_sLangTxt_SngDeviceRpt2);
	rs_AddString(g_sLangID_MdvMgrpFile, &g_sLangTxt_MdvMgrpFile);
	rs_AddString(g_sLangID_CreateCpntFail, &g_sLangTxt_CreateCpntFail);
	rs_AddString(g_sLangID_MulDeviceRptS, &g_sLangTxt_MulDeviceRptS);
	rs_AddString(g_sLangID_SngDeviceRptS, &g_sLangTxt_SngDeviceRptS);
	rs_AddString(g_sLangID_FileRightError, &g_sLangTxt_FileRightError);
	rs_AddString(g_sLangID_DataIDUnext, &g_sLangTxt_DataIDUnext);
	rs_AddString(g_sLangID_TestCpntCopy, &g_sLangTxt_TestCpntCopy);
	rs_AddString(g_sLangID_SngDevMulPrtc, &g_sLangTxt_SngDevMulPrtc);
	rs_AddString(g_sLangID_SngDevMulPrtc2, &g_sLangTxt_SngDevMulPrtc2);
	rs_AddString(g_sLangID_WaitSetting, &g_sLangTxt_WaitSetting);
	rs_AddString(g_sLangID_RecordFileRead, &g_sLangTxt_RecordFileRead);
	rs_AddString(g_sLangID_RecordFileRead2, &g_sLangTxt_RecordFileRead2);
	rs_AddString(g_sLangID_ErrorMessage_a, &g_sLangTxt_ErrorMessage_a);

	rs_AddString(g_sLangID_ChrctCurDefn, &g_sLangTxt_ChrctCurDefn);
	rs_AddString(g_sLangID_ParaCurve, &g_sLangTxt_ParaCurve);
	rs_AddString(g_sLangID_ExpressionError, &g_sLangTxt_ExpressionError);
	rs_AddString(g_sLangID_ExpressionVariable, &g_sLangTxt_ExpressionVariable);
	rs_AddString(g_sLangID_Arc, &g_sLangTxt_Arc);
	rs_AddString(g_sLangID_Arcp, &g_sLangTxt_Arcp);
	rs_AddString(g_sLangID_Lens, &g_sLangTxt_Lens);
	rs_AddString(g_sLangID_Lined, &g_sLangTxt_Lined);
	rs_AddString(g_sLangID_Line, &g_sLangTxt_Line);
	rs_AddString(g_sLangID_Linep, &g_sLangTxt_Linep);
	rs_AddString(g_sLangID_Liner, &g_sLangTxt_Liner);
	rs_AddString(g_sLangID_Mho, &g_sLangTxt_Mho);
	rs_AddString(g_sLangID_I2T, &g_sLangTxt_I2T);
	rs_AddString(g_sLangID_IAC, &g_sLangTxt_IAC);
	rs_AddString(g_sLangID_IEC, &g_sLangTxt_IEC);
	rs_AddString(g_sLangID_IEEE, &g_sLangTxt_IEEE);
	rs_AddString(g_sLangID_INVOWNDEF, &g_sLangTxt_INVOWNDEF);

	rs_AddString(g_sLangID_CordnPtn, &g_sLangTxt_CordnPtn);
	rs_AddString(g_sLangID_TestFctnSel, &g_sLangTxt_TestFctnSel);
	rs_AddString(g_sLangID_Location, &g_sLangTxt_Location);
	rs_AddString(g_sLangID_RotationAngle, &g_sLangTxt_RotationAngle);
	rs_AddString(g_sLangID_CustomAngle, &g_sLangTxt_CustomAngle);
	rs_AddString(g_sLangID_CoordinatesConflict, &g_sLangTxt_CoordinatesConflict);
	rs_AddString(g_sLangID_VariableID, &g_sLangTxt_VariableID);
	rs_AddString(g_sLangID_AssociationValue, &g_sLangTxt_AssociationValue);
	rs_AddString(g_sLangID_EdgeType, &g_sLangTxt_EdgeType);
	rs_AddString(g_sLangID_TestPoint, &g_sLangTxt_TestPoint);
	rs_AddString(g_sLangID_ErrorBand, &g_sLangTxt_ErrorBand);
	rs_AddString(g_sLangID_EdgeDetails, &g_sLangTxt_EdgeDetails);
	rs_AddString(g_sLangID_CoordinateSystem, &g_sLangTxt_CoordinateSystem);
	rs_AddString(g_sLangID_DataMatchScript, &g_sLangTxt_DataMatchScript);
	rs_AddString(g_sLangID_Include, &g_sLangTxt_Include);
	rs_AddString(g_sLangID_CertainUninclude, &g_sLangTxt_CertainUninclude);
	rs_AddString(g_sLangID_DataItfcMng, &g_sLangTxt_DataItfcMng);
	rs_AddString(g_sLangID_DataItfc, &g_sLangTxt_DataItfc);
	rs_AddString(g_sLangID_DataItfcVari, &g_sLangTxt_DataItfcVari);
	rs_AddString(g_sLangID_DataDataUnExist, &g_sLangTxt_DataDataUnExist);
	rs_AddString(g_sLangID_SoftStrap, &g_sLangTxt_SoftStrap);
	rs_AddString(g_sLangID_SetValue, &g_sLangTxt_SetValue);
	rs_AddString(g_sLangID_TestPara, &g_sLangTxt_TestPara);
	rs_AddString(g_sLangID_ControlWord, &g_sLangTxt_ControlWord);
	rs_AddString(g_sLangID_OutputValue, &g_sLangTxt_OutputValue);
	rs_AddString(g_sLangID_InputValue, &g_sLangTxt_InputValue);
	rs_AddString(g_sLangID_AnalogValue, &g_sLangTxt_AnalogValue);
	rs_AddString(g_sLangID_PreDelay, &g_sLangTxt_PreDelay);
	rs_AddString(g_sLangID_PostDelay, &g_sLangTxt_PostDelay);
	rs_AddString(g_sLangID_RetryDelay, &g_sLangTxt_RetryDelay);
	rs_AddString(g_sLangID_CommunCmdUnExist, &g_sLangTxt_CommunCmdUnExist);
	rs_AddString(g_sLangID_CommunCmdTimes, &g_sLangTxt_CommunCmdTimes);
	rs_AddString(g_sLangID_AllRecord, &g_sLangTxt_AllRecord);
	rs_AddString(g_sLangID_StandardRecord, &g_sLangTxt_StandardRecord);
	rs_AddString(g_sLangID_NoRecord, &g_sLangTxt_NoRecord);
	rs_AddString(g_sLangID_NoDefin, &g_sLangTxt_NoDefin);
	rs_AddString(g_sLangID_RecordTimes, &g_sLangTxt_RecordTimes);
	rs_AddString(g_sLangID_TimeDiff, &g_sLangTxt_TimeDiff);
	rs_AddString(g_sLangID_RecordResult, &g_sLangTxt_RecordResult);
	rs_AddString(g_sLangID_Surplus, &g_sLangTxt_Surplus);
	rs_AddString(g_sLangID_AllExpRecord, &g_sLangTxt_AllExpRecord);
	rs_AddString(g_sLangID_Lack, &g_sLangTxt_Lack);
	rs_AddString(g_sLangID_CreatCharPara, &g_sLangTxt_CreatCharPara);
	rs_AddString(g_sLangID_Act, &g_sLangTxt_Act);
	rs_AddString(g_sLangID_Unact, &g_sLangTxt_Unact);
	rs_AddString(g_sLangID_UndefinDataPara, &g_sLangTxt_UndefinDataPara);
	rs_AddString(g_sLangID_ShowResult, &g_sLangTxt_ShowResult);
	rs_AddString(g_sLangID_ParaMdf2, &g_sLangTxt_ParaMdf2);
	rs_AddString(g_sLangID_LibraryFile, &g_sLangTxt_LibraryFile);
	rs_AddString(g_sLangID_FctnNotFound, &g_sLangTxt_FctnNotFound);
	rs_AddString(g_sLangID_MsgPrompt, &g_sLangTxt_MsgPrompt);
	rs_AddString(g_sLangID_TaskGuide2, &g_sLangTxt_TaskGuide2);
	rs_AddString(g_sLangID_DelCommunPara, &g_sLangTxt_DelCommunPara);
	rs_AddString(g_sLangID_Delete2, &g_sLangTxt_Delete2);
	rs_AddString(g_sLangID_ItemRstError, &g_sLangTxt_ItemRstError);
	rs_AddString(g_sLangID_DataD2, &g_sLangTxt_DataD2);
	rs_AddString(g_sLangID_NullReport, &g_sLangTxt_NullReport);
	rs_AddString(g_sLangID_AdjustReport, &g_sLangTxt_AdjustReport);
	rs_AddString(g_sLangID_ReDTest, &g_sLangTxt_ReDTest);
	rs_AddString(g_sLangID_AreaDefin, &g_sLangTxt_AreaDefin);
	rs_AddString(g_sLangID_ScriptOverwrite, &g_sLangTxt_ScriptOverwrite);
	rs_AddString(g_sLangID_DiffTypeData, &g_sLangTxt_DiffTypeData);
	rs_AddString(g_sLangID_FileNewest, &g_sLangTxt_FileNewest);
	rs_AddString(g_sLangID_ParaError2, &g_sLangTxt_ParaError2);
	rs_AddString(g_sLangID_ParaError3, &g_sLangTxt_ParaError3);
	rs_AddString(g_sLangID_ParaError4, &g_sLangTxt_ParaError4);
	rs_AddString(g_sLangID_ParaError5, &g_sLangTxt_ParaError5);
	rs_AddString(g_sLangID_FctnVariousUnExist, &g_sLangTxt_FctnVariousUnExist);
	rs_AddString(g_sLangID_NoDataReport, &g_sLangTxt_NoDataReport);
	rs_AddString(g_sLangID_ErrFctnTest, &g_sLangTxt_ErrFctnTest);
	rs_AddString(g_sLangID_ErrFctnUnExist, &g_sLangTxt_ErrFctnUnExist);
	rs_AddString(g_sLangID_StdErrorFctnTest, &g_sLangTxt_StdErrorFctnTest);
	rs_AddString(g_sLangID_StdErrorFctnUnExist, &g_sLangTxt_StdErrorFctnUnExist);
	rs_AddString(g_sLangID_StdErrorFctnUnExistData, &g_sLangTxt_StdErrorFctnUnExistData);
	rs_AddString(g_sLangID_FlterFctnTest, &g_sLangTxt_FlterFctnTest);
	rs_AddString(g_sLangID_FlterFctnUnExist, &g_sLangTxt_FlterFctnUnExist);
	rs_AddString(g_sLangID_FlterFctnUnExist2, &g_sLangTxt_FlterFctnUnExist2);
	rs_AddString(g_sLangID_VariationFctnTest, &g_sLangTxt_VariationFctnTest);
	rs_AddString(g_sLangID_VariationFctnItem, &g_sLangTxt_VariationFctnItem);
	rs_AddString(g_sLangID_VariationFctnUnExist, &g_sLangTxt_VariationFctnUnExist);
	rs_AddString(g_sLangID_VariationFctnUnExist2, &g_sLangTxt_VariationFctnUnExist2);
	rs_AddString(g_sLangID_VariationFctnUnExist3, &g_sLangTxt_VariationFctnUnExist3);
	rs_AddString(g_sLangID_VariationFctnUnExist4, &g_sLangTxt_VariationFctnUnExist4);
	rs_AddString(g_sLangID_VariationFctnUnExist5, &g_sLangTxt_VariationFctnUnExist5);
	rs_AddString(g_sLangID_VariationFctnUnExist6, &g_sLangTxt_VariationFctnUnExist6);
	rs_AddString(g_sLangID_SetItemIDUnExist, &g_sLangTxt_SetItemIDUnExist);
	rs_AddString(g_sLangID_SetItemIDUnExist2, &g_sLangTxt_SetItemIDUnExist2);
	rs_AddString(g_sLangID_PathItem2, &g_sLangTxt_PathItem2);
	rs_AddString(g_sLangID_CalCall, &g_sLangTxt_CalCall);
	rs_AddString(g_sLangID_NoDataReport2, &g_sLangTxt_NoDataReport2);
	rs_AddString(g_sLangID_PathNoItem, &g_sLangTxt_PathNoItem);
	rs_AddString(g_sLangID_PathSelItem, &g_sLangTxt_PathSelItem);
	rs_AddString(g_sLangID_CannotUse, &g_sLangTxt_CannotUse);
	rs_AddString(g_sLangID_CannotUse2, &g_sLangTxt_CannotUse2);
	rs_AddString(g_sLangID_CannotUse3, &g_sLangTxt_CannotUse3);
	rs_AddString(g_sLangID_ResultJude, &g_sLangTxt_ResultJude);
	rs_AddString(g_sLangID_NullDataReport, &g_sLangTxt_NullDataReport);
	rs_AddString(g_sLangID_DataReportID, &g_sLangTxt_DataReportID);
	rs_AddString(g_sLangID_DataUnExist2, &g_sLangTxt_DataUnExist2);
	rs_AddString(g_sLangID_DataUnExist3, &g_sLangTxt_DataUnExist3);
	rs_AddString(g_sLangID_DataPathUn, &g_sLangTxt_DataPathUn);
	rs_AddString(g_sLangID_FtcnCmdUse, &g_sLangTxt_FtcnCmdUse);
	rs_AddString(g_sLangID_FtcnCmdUse2, &g_sLangTxt_FtcnCmdUse2);
	rs_AddString(g_sLangID_FtcnScriptCall, &g_sLangTxt_FtcnScriptCall);
	rs_AddString(g_sLangID_FctnUnExist, &g_sLangTxt_FctnUnExist);
	rs_AddString(g_sLangID_FixedValueData, &g_sLangTxt_FixedValueData);
	rs_AddString(g_sLangID_Marking, &g_sLangTxt_Marking);
	rs_AddString(g_sLangID_XMLFile, &g_sLangTxt_XMLFile);
	rs_AddString(g_sLangID_WordFile, &g_sLangTxt_WordFile);
	rs_AddString(g_sLangID_ExcelFile, &g_sLangTxt_ExcelFile);
	rs_AddString(g_sLangID_OATSFile, &g_sLangTxt_OATSFile);
	rs_AddString(g_sLangID_DataTypeUnExist2, &g_sLangTxt_DataTypeUnExist2);
	rs_AddString(g_sLangID_CommunSetUnExist, &g_sLangTxt_CommunSetUnExist);
	rs_AddString(g_sLangID_TestTypeUnExist, &g_sLangTxt_TestTypeUnExist);
	rs_AddString(g_sLangID_CreatDomFail, &g_sLangTxt_CreatDomFail);
	rs_AddString(g_sLangID_OpenMsxmlFail, &g_sLangTxt_OpenMsxmlFail);
	rs_AddString(g_sLangID_YearMonDay, &g_sLangTxt_YearMonDay);
	rs_AddString(g_sLangID_UnitPara, &g_sLangTxt_UnitPara);
	rs_AddString(g_sLangID_FixedValue, &g_sLangTxt_FixedValue);
	rs_AddString(g_sLangID_Platen, &g_sLangTxt_Platen);
	rs_AddString(g_sLangID_Telemetering, &g_sLangTxt_Telemetering);
	rs_AddString(g_sLangID_Telecommunicating, &g_sLangTxt_Telecommunicating);
	rs_AddString(g_sLangID_FaultReport, &g_sLangTxt_FaultReport);
	rs_AddString(g_sLangID_ProtectEvent, &g_sLangTxt_ProtectEvent);
	rs_AddString(g_sLangID_FaultSignal, &g_sLangTxt_FaultSignal);
	rs_AddString(g_sLangID_AlarmSignal, &g_sLangTxt_AlarmSignal);
	rs_AddString(g_sLangID_SamplingValue, &g_sLangTxt_SamplingValue);
	rs_AddString(g_sLangID_Telecontrolling, &g_sLangTxt_Telecontrolling);
	rs_AddString(g_sLangID_Custom, &g_sLangTxt_Custom);
	rs_AddString(g_sLangID_SingDataMode, &g_sLangTxt_SingDataMode);
	rs_AddString(g_sLangID_ExcelDataMode, &g_sLangTxt_ExcelDataMode);
	rs_AddString(g_sLangID_ExcelDataMode2, &g_sLangTxt_ExcelDataMode2);

	rs_AddString(g_sLangID_NewCreatTask, &g_sLangTxt_NewCreatTask);
	rs_AddString(g_sLangID_NewProject, &g_sLangTxt_NewProject);
	rs_AddString(g_sLangID_DeleteTask, &g_sLangTxt_DeleteTask);
	rs_AddString(g_sLangID_DeleteProject, &g_sLangTxt_DeleteProject);
	rs_AddString(g_sLangID_TaskArchive, &g_sLangTxt_TaskArchive);
	rs_AddString(g_sLangID_ProjectArchive, &g_sLangTxt_ProjectArchive);
	rs_AddString(g_sLangID_OpenProject, &g_sLangTxt_OpenProject);
	rs_AddString(g_sLangID_CloseProject, &g_sLangTxt_CloseProject);
	rs_AddString(g_sLangID_TestRecordFile, &g_sLangTxt_TestRecordFile);
	rs_AddString(g_sLangID_RecordFile, &g_sLangTxt_RecordFile);
	rs_AddString(g_sLangID_LastAccessedTimes, &g_sLangTxt_LastAccessedTimes);
	rs_AddString(g_sLangID_ReportFile, &g_sLangTxt_ReportFile);
	rs_AddString(g_sLangID_ReportFileSize, &g_sLangTxt_ReportFileSize);
	rs_AddString(g_sLangID_NewTask, &g_sLangTxt_NewTask);
	rs_AddString(g_sLangID_EnterTask, &g_sLangTxt_EnterTask);
	rs_AddString(g_sLangID_NewReport, &g_sLangTxt_NewReport);

	rs_AddString(g_sLangID_TestComplete, &g_sLangTxt_TestComplete);
	rs_AddString(g_sLangID_TerminationTest, &g_sLangTxt_TerminationTest);
	rs_AddString(g_sLangID_Testing, &g_sLangTxt_Testing);
	rs_AddString(g_sLangID_UnTest, &g_sLangTxt_UnTest);
	rs_AddString(g_sLangID_SystemPara, &g_sLangTxt_SystemPara);
	rs_AddString(g_sLangID_CreatWordFail, &g_sLangTxt_CreatWordFail);
	rs_AddString(g_sLangID_TestReport, &g_sLangTxt_TestReport);
	rs_AddString(g_sLangID_Conclusion, &g_sLangTxt_Conclusion);
	rs_AddString(g_sLangID_UnqualifiedItem, &g_sLangTxt_UnqualifiedItem);
	rs_AddString(g_sLangID_ViewPara, &g_sLangTxt_ViewPara);
	rs_AddString(g_sLangID_FctnGbNotFound, &g_sLangTxt_FctnGbNotFound);
	rs_AddString(g_sLangID_DataBatch, &g_sLangTxt_DataBatch);
	rs_AddString(g_sLangID_Developing, &g_sLangTxt_Developing);
	rs_AddString(g_sLangID_ReportManager, &g_sLangTxt_ReportManager);
	rs_AddString(g_sLangID_TestReady, &g_sLangTxt_TestReady);
	rs_AddString(g_sLangID_TestWork, &g_sLangTxt_TestWork);
	rs_AddString(g_sLangID_CellpAdding, &g_sLangTxt_CellpAdding);
	rs_AddString(g_sLangID_ColumnFillMmode, &g_sLangTxt_ColumnFillMmode);
	rs_AddString(g_sLangID_HnagFillMmode, &g_sLangTxt_HnagFillMmode);
	rs_AddString(g_sLangID_ParaVarious, &g_sLangTxt_ParaVarious);
	rs_AddString(g_sLangID_Format, &g_sLangTxt_Format);
	rs_AddString(g_sLangID_Id, &g_sLangTxt_Id);
	// 	rs_AddString(g_sLangID_Variable, &g_sLangTxt_Variable);
	rs_AddString(g_sLangID_DataVariousDefin, &g_sLangTxt_DataVariousDefin);
	rs_AddString(g_sLangID_ProPaInf, &g_sLangTxt_ProPaInf);
	rs_AddString(g_sLangID_TestProjInf, &g_sLangTxt_TestProjInf);
	rs_AddString(g_sLangID_SetAsReport, &g_sLangTxt_SetAsReport);
	rs_AddString(g_sLangID_ViewMessJud, &g_sLangTxt_ViewMessJud);
	rs_AddString(g_sLangID_TestProTestRep, &g_sLangTxt_TestProTestRep);
	rs_AddString(g_sLangID_InstrutionInfo, &g_sLangTxt_InstrutionInfo);

	rs_AddString(g_sLangID_GuideAutoWizardFile, &g_sLangTxt_GuideAutoWizardFile);
	rs_AddString(g_sLangID_NextStep, &g_sLangTxt_NextStep);
	rs_AddString(g_sLangID_ClickToNextStep, &g_sLangTxt_ClickToNextStep);
	rs_AddString(g_sLangID_OperCompleteToNext, &g_sLangTxt_OperCompleteToNext);
	rs_AddString(g_sLangID_TestItemNotExist, &g_sLangTxt_TestItemNotExist);
	rs_AddString(g_sLangID_SetItem, &g_sLangTxt_SetItem);
	rs_AddString(g_sLangID_DestRefData, &g_sLangTxt_DestRefData);
	rs_AddString(g_sLangID_DataMap, &g_sLangTxt_DataMap);
	rs_AddString(g_sLangID_TestItem, &g_sLangTxt_TestItem);
	rs_AddString(g_sLangID_NumberGroup, &g_sLangTxt_NumberGroup);
	rs_AddString(g_sLangID_BatchEnumGroup, &g_sLangTxt_BatchEnumGroup);
	rs_AddString(g_sLangID_BatchItemNoDataset, &g_sLangTxt_BatchItemNoDataset);
	rs_AddString(g_sLangID_BatchItemNoId, &g_sLangTxt_BatchItemNoId);
	rs_AddString(g_sLangID_BatchItemNoName, &g_sLangTxt_BatchItemNoName);
	rs_AddString(g_sLangID_DataMapNotOnly, &g_sLangTxt_DataMapNotOnly);
	rs_AddString(g_sLangID_DatasetNotExist, &g_sLangTxt_DatasetNotExist);
	rs_AddString(g_sLangID_ChannelCfg, &g_sLangTxt_ChannelCfg);
	rs_AddString(g_sLangID_InsertReportTem, &g_sLangTxt_InsertReportTem);
	rs_AddString(g_sLangID_CannotInstant, &g_sLangTxt_CannotInstant);
	rs_AddString(g_sLangID_InsertTestTem, &g_sLangTxt_InsertTestTem);
	rs_AddString(g_sLangID_CommCmdNoDataset, &g_sLangTxt_CommCmdNoDataset);
	rs_AddString(g_sLangID_Initial, &g_sLangTxt_Initial);
	rs_AddString(g_sLangID_DealSubTemTestPara, &g_sLangTxt_DealSubTemTestPara);
	rs_AddString(g_sLangID_OpenedWizardFile, &g_sLangTxt_OpenedWizardFile);
	rs_AddString(g_sLangID_SelSubTem, &g_sLangTxt_SelSubTem);
	rs_AddString(g_sLangID_SelTestSubTem, &g_sLangTxt_SelTestSubTem);
	rs_AddString(g_sLangID_SelTestSubTemInsert, &g_sLangTxt_SelTestSubTemInsert);
	rs_AddString(g_sLangID_SelTestSubTemInsert2, &g_sLangTxt_SelTestSubTemInsert2);
	rs_AddString(g_sLangID_SaveTestTem, &g_sLangTxt_SaveTestTem);
	rs_AddString(g_sLangID_SaveTestTemWizardOver, &g_sLangTxt_SaveTestTemWizardOver);
	rs_AddString(g_sLangID_SetTestTemAttr, &g_sLangTxt_SetTestTemAttr);
	rs_AddString(g_sLangID_SetTestTemAttr2, &g_sLangTxt_SetTestTemAttr2);
	rs_AddString(g_sLangID_SetSubTemInterface, &g_sLangTxt_SetSubTemInterface);
	rs_AddString(g_sLangID_SetDeviceDataModel, &g_sLangTxt_SetDeviceDataModel);
	rs_AddString(g_sLangID_SetDeviceAttr, &g_sLangTxt_SetDeviceAttr);
	rs_AddString(g_sLangID_SetDeviceDataType, &g_sLangTxt_SetDeviceDataType);
	rs_AddString(g_sLangID_SetDeviceCharCurve, &g_sLangTxt_SetDeviceCharCurve);
	rs_AddString(g_sLangID_SetDeviceAttr2, &g_sLangTxt_SetDeviceAttr2);
	rs_AddString(g_sLangID_SetDeviceDataType2, &g_sLangTxt_SetDeviceDataType2);
	rs_AddString(g_sLangID_SetDeviceCharCurve2, &g_sLangTxt_SetDeviceCharCurve2);
	rs_AddString(g_sLangID_Execute, &g_sLangTxt_Execute);
	rs_AddString(g_sLangID_CommCmdError, &g_sLangTxt_CommCmdError);
	rs_AddString(g_sLangID_DataPathNoData, &g_sLangTxt_DataPathNoData);
	rs_AddString(g_sLangID_IdReplace, &g_sLangTxt_IdReplace);
	rs_AddString(g_sLangID_AddObjMatchUnsucc, &g_sLangTxt_AddObjMatchUnsucc);
	rs_AddString(g_sLangID_NameReplaceCompleted, &g_sLangTxt_NameReplaceCompleted);
	rs_AddString(g_sLangID_ReplaceCompleted2, &g_sLangTxt_ReplaceCompleted2);
	rs_AddString(g_sLangID_DealCommCmd, &g_sLangTxt_DealCommCmd);
	rs_AddString(g_sLangID_RelNotOnly, &g_sLangTxt_RelNotOnly);
	rs_AddString(g_sLangID_DataInterfaceName, &g_sLangTxt_DataInterfaceName);
	rs_AddString(g_sLangID_DealMode, &g_sLangTxt_DealMode);
	rs_AddString(g_sLangID_InitOptimizeList, &g_sLangTxt_InitOptimizeList);
	rs_AddString(g_sLangID_InitPreTestList, &g_sLangTxt_InitPreTestList);
	rs_AddString(g_sLangID_InitTestRecoverList, &g_sLangTxt_InitTestRecoverList);
	rs_AddString(g_sLangID_OptimizePreTestItem, &g_sLangTxt_OptimizePreTestItem);
	rs_AddString(g_sLangID_OptimizeTestRecoverItem, &g_sLangTxt_OptimizeTestRecoverItem);
	rs_AddString(g_sLangID_OptimizeIecCfgDownload, &g_sLangTxt_OptimizeIecCfgDownload);
	rs_AddString(g_sLangID_OptimizeSysParaEditItem, &g_sLangTxt_OptimizeSysParaEditItem);
	rs_AddString(g_sLangID_ItemClassSubItem, &g_sLangTxt_ItemClassSubItem);
	rs_AddString(g_sLangID_ItemClassAllSubItem, &g_sLangTxt_ItemClassAllSubItem);
	rs_AddString(g_sLangID_SelItemClassMode, &g_sLangTxt_SelItemClassMode);
	rs_AddString(g_sLangID_ImportTo, &g_sLangTxt_ImportTo);
	rs_AddString(g_sLangID_NoDataObjDef, &g_sLangTxt_NoDataObjDef);
	rs_AddString(g_sLangID_FileNameWithout, &g_sLangTxt_FileNameWithout);
	rs_AddString(g_sLangID_FileMngr, &g_sLangTxt_FileMngr);
	rs_AddString(g_sLangID_Average, &g_sLangTxt_Average);
	rs_AddString(g_sLangID_LastOne, &g_sLangTxt_LastOne);
	rs_AddString(g_sLangID_ErrorMax, &g_sLangTxt_ErrorMax);
	rs_AddString(g_sLangID_Standdeviation, &g_sLangTxt_Standdeviation);
	rs_AddString(g_sLangID_CommCmdCheckComplete, &g_sLangTxt_CommCmdCheckComplete);
	rs_AddString(g_sLangID_CommCmdParaAbnormal, &g_sLangTxt_CommCmdParaAbnormal);
	rs_AddString(g_sLangID_DeleteInvalidPara, &g_sLangTxt_DeleteInvalidPara);
	rs_AddString(g_sLangID_ElectricCheckComplete, &g_sLangTxt_ElectricCheckComplete);
	rs_AddString(g_sLangID_ElectricParaAbnormal, &g_sLangTxt_ElectricParaAbnormal);
	rs_AddString(g_sLangID_OpenDocFail, &g_sLangTxt_OpenDocFail);
	rs_AddString(g_sLangID_OpenWordFail, &g_sLangTxt_OpenWordFail);
	rs_AddString(g_sLangID_NoWord, &g_sLangTxt_NoWord);
	rs_AddString(g_sLangID_HaveMarkSureReplace, &g_sLangTxt_HaveMarkSureReplace);
	rs_AddString(g_sLangID_BookMarkExist, &g_sLangTxt_BookMarkExist);
	rs_AddString(g_sLangID_InsertTitleFail, &g_sLangTxt_InsertTitleFail);
	// 	rs_AddString(g_sLangID_Title, &g_sLangTxt_Title);
	rs_AddString(g_sLangID_InsertFail, &g_sLangTxt_InsertFail);
	rs_AddString(g_sLangID_Finish, &g_sLangTxt_Finish);
	rs_AddString(g_sLangID_Unqualified2, &g_sLangTxt_Unqualified2);
	rs_AddString(g_sLangID_TestFinish, &g_sLangTxt_TestFinish);


	rs_AddString(g_sLangID_SelNoArea, &g_sLangTxt_SelNoArea);
	rs_AddString(g_sLangID_SelOnlyOneRowCol, &g_sLangTxt_SelOnlyOneRowCol);
	rs_AddString(g_sLangID_ColRowsNotSame, &g_sLangTxt_ColRowsNotSame);
	rs_AddString(g_sLangID_SelNoItem, &g_sLangTxt_SelNoItem);
	rs_AddString(g_sLangID_MustSelYcItem, &g_sLangTxt_MustSelYcItem);
	rs_AddString(g_sLangID_HasNoMacroTest, &g_sLangTxt_HasNoMacroTest);
	rs_AddString(g_sLangID_HasNoYcItem, &g_sLangTxt_HasNoYcItem);
	rs_AddString(g_sLangID_RepeatTimeNotSame, &g_sLangTxt_RepeatTimeNotSame);
	rs_AddString(g_sLangID_MacroTestNotSame, &g_sLangTxt_MacroTestNotSame);

	rs_AddString(g_sLangID_AttrID_Value, &g_sLangTxt_AttrID_Value);
	rs_AddString(g_sLangID_AttrID_Name, &g_sLangTxt_AttrID_Name);

	rs_AddString(g_sLangID_TestPrjNotFinish,&g_sLangTxt_TestPrjNotFinish);
	rs_AddString(g_sLangID_RsltExprScript,&g_sLangTxt_RsltExprScript);
	rs_AddString(g_sLangID_IgnoreAbnormal, &g_sLangTxt_IgnoreAbnormal);

	rs_AddString(g_sLangID_SGroupS, &g_sLangTxt_SGroupS);
	rs_AddString(g_sLangID_SGroupFileName, &g_sLangTxt_SGroupFileName);

// 	rs_AddString(g_sLangID_IEC_Open,&g_sLangTxt_IEC_Open);
	rs_AddString(g_sLangID_IEC_AddSCL,&g_sLangTxt_IEC_AddSCL);
	rs_AddString(g_sLangID_IEC_DeleteNow,&g_sLangTxt_IEC_DeleteNow);
	rs_AddString(g_sLangID_IEC_Emptyout,&g_sLangTxt_IEC_Emptyout);
 	rs_AddString(g_sLangID_Native_FileName, &g_sLangTxt_Native_FileName);
	rs_AddString(g_sLangID_FilePath,&g_sLangTxt_FilePath);
	rs_AddString(g_sLangID_FileSize,&g_sLangTxt_FileSize);
// 	rs_AddString(g_sLangID_Native_Choose, &g_sLangTxt_Native_Choose);
	rs_AddString(g_sLangID_Dates, &g_sLangTxt_Dates);
// 	rs_AddString(g_sLangID_Native_Form, &g_sLangTxt_Native_Form);

	rs_AddString(g_sLangID_currentfile,&g_sLangTxt_currentfile);
	rs_AddString(g_sLangID_parsefile,&g_sLangTxt_parsefile);
	rs_AddString(g_sLangID_confirmfiles,&g_sLangTxt_confirmfiles);
	rs_AddString(g_sLangID_IEDdialog,&g_sLangTxt_IEDdialog);
	rs_AddString(g_sLangID_sameopen,&g_sLangTxt_sameopen);

	rs_AddString(g_sLangID_Native_ChooseOpenFile, &g_sLangTxt_Native_ChooseOpenFile);
	rs_AddString(g_sLangID_Gradient_ShowUpath,&g_sLangTxt_Gradient_ShowUpath);
	rs_AddString(g_sLangID_warning, &g_sLangTxt_warning);

	rs_AddString(g_sLangID_UpdataFail, &g_sLangTxt_UpdataFail);
	rs_AddString(g_sLangID_DownloadFile, &g_sLangTxt_DownloadFile);
	rs_AddString(g_sLangID_DownloadFail, &g_sLangTxt_DownloadFail);
	rs_AddString(g_sLangID_DownloadCompress, &g_sLangTxt_DownloadCompress);
	rs_AddString(g_sLangID_LocalUpgrades, &g_sLangTxt_LocalUpgrades);
	rs_AddString(g_sLangID_Reboot, &g_sLangTxt_Reboot);
	rs_AddString(g_sLangID_UnpackSucc, &g_sLangTxt_UnpackSucc);
	rs_AddString(g_sLangID_UnpackFail, &g_sLangTxt_UnpackFail);
    rs_AddString(g_sLangID_Update_UpdateSuccess, &g_sLangTxt_Update_UpdateSuccess);

	rs_AddString(g_sLangID_Escalating, &g_sLangTxt_Escalating);
	rs_AddString(g_sLangID_TesterUpdate, &g_sLangTxt_TesterUpdate);
	rs_AddString(g_sLangID_BackupSucc, &g_sLangTxt_BackupSucc);
	rs_AddString(g_sLangID_BackupFail, &g_sLangTxt_BackupFail);
	rs_AddString(g_sLangID_CopySucc, &g_sLangTxt_CopySucc);
	rs_AddString(g_sLangID_TesterUpdataFail, &g_sLangTxt_TesterUpdataFail);
	
	rs_AddString(g_sLangID_ExpSucc, &g_sLangTxt_ExpSucc);
	rs_AddString(g_sLangID_ExpFail, &g_sLangTxt_ExpFail);
	rs_AddString(g_sLangID_ImpSucc, &g_sLangTxt_ImpSucc);
	rs_AddString(g_sLangID_ImpFail, &g_sLangTxt_ImpFail);
	rs_AddString(g_sLangID_RemainingMemorySize, &g_sLangTxt_RemainingMemorySize);
	rs_AddString(g_sLangID_InsufficientSystemMemory, &g_sLangTxt_InsufficientSystemMemory);
	rs_AddString(g_sLangID_ExistenceSCDFiles, &g_sLangTxt_ExistenceSCDFiles);	
	rs_AddString(g_sLangID_NoExistenceSCLFiles, &g_sLangTxt_NoExistenceSCLFiles);
	rs_AddString(g_sLangID_AnalysisSCLFiles, &g_sLangTxt_AnalysisSCLFiles);
	rs_AddString(g_sLangID_LoadSCLFiles, &g_sLangTxt_LoadSCLFiles);	
	rs_AddString(g_sLangID_LoadSCLFilesProgressBar, &g_sLangTxt_LoadSCLFilesProgressBar);
	rs_AddString(g_sLangID_SaveSCLFiles, &g_sLangTxt_SaveSCLFiles);
	rs_AddString(g_sLangID_State_No, &g_sLangTxt_State_No);
	rs_AddString(g_sLangID_State_Yes, &g_sLangTxt_State_Yes);
	rs_AddString(g_sLangID_Expr, &g_sLangTxt_Expr);

	//2024-12-09 shaolei
	rs_AddString(g_sLangID_AutoTest_SvrName, &g_sLangTxt_AutoTest_SvrName);
	rs_AddString(g_sLangID_AutoTest_SvrVersion, &g_sLangTxt_AutoTest_SvrVersion);

	rs_AddString(g_sLangID_Xrio_EnterNumbers, &g_sLangTxt_Xrio_EnterNumbers);
	rs_AddString(g_sLangID_Xrio_ValueLessThanOREqual, &g_sLangTxt_Xrio_ValueLessThanOREqual);
	rs_AddString(g_sLangID_Xrio_ValueGreaterThanOREqual, &g_sLangTxt_Xrio_ValueGreaterThanOREqual);
	rs_AddString(g_sLangID_Xrio_InvalidDoublePrecisionValue, &g_sLangTxt_Xrio_InvalidDoublePrecisionValue);
	rs_AddString(g_sLangID_Xrio_InvalidIntValue, &g_sLangTxt_Xrio_InvalidIntValue);
	rs_AddString(g_sLangID_Xrio_LogInfo_ParamDataType, &g_sLangTxt_Xrio_LogInfo_ParamDataType);
	rs_AddString(g_sLangID_Xrio_LogInfo_NamePath, &g_sLangTxt_Xrio_LogInfo_NamePath);
	rs_AddString(g_sLangID_Xrio_LogInfo_IDPath, &g_sLangTxt_Xrio_LogInfo_IDPath);
	rs_AddString(g_sLangID_Xrio_LogInfo_InvalidParamDataType, &g_sLangTxt_Xrio_LogInfo_InvalidParamDataType);
	rs_AddString(g_sLangID_Xrio_LogInfo_MinGreaterThanMax, &g_sLangTxt_Xrio_LogInfo_MinGreaterThanMax);
	rs_AddString(g_sLangID_Xrio_InvalidEnumValue, &g_sLangTxt_Xrio_InvalidEnumValue);
	rs_AddString(g_sLangID_Xrio_InvalidBinaryValue, &g_sLangTxt_Xrio_InvalidBinaryValue);
}

static long g_nCXLanguageResourceAtsBase_InitLangTxt = 0;

void CXLanguageResourceAtsBase::InitLangTxt()
{
	CXLanguageResourceBase::InitLangTxt();

	if (g_nCXLanguageResourceAtsBase_InitLangTxt > 0)
	{
		return;
	}

	g_nCXLanguageResourceAtsBase_InitLangTxt = 1;

	g_sLangID_OpenTemplate             = _T("sOpenTemplate");
	g_sLangTxt_OpenTemplate            = _T("打开模板");
	g_sLangID_OpenPowerTestTemplate             = _T("sOpenPowerTestTemplate");
	g_sLangTxt_OpenPowerTestTemplate            = _T("打开PowerTest模板");
	g_sLangID_OpenSubTemplate          = _T("sOpenSubTemplate");
	g_sLangTxt_OpenSubTemplate         = _T("打开子模板");

	// g_sLangID_TraProtocol              = _T("sTraProtocol");
	// g_sLangTxt_TraProtocol             = _T("传统规约");
	// g_sLangID_61850Protocol            = _T("s61850Protocol");
	// g_sLangTxt_61850Protocol           = _T("61850规约");
	g_sLangID_Edit                     = _T("sEdit");
	g_sLangTxt_Edit                    = _T("编辑");
	// g_sLangID_Browse                   = _T("sBrowse");
	// g_sLangTxt_Browse                  = _T("浏览");

	g_sLangID_SelNone                  = _T("sSelNone");
	g_sLangTxt_SelNone                 = _T("全不选");
	g_sLangID_TestTask                 = _T("sTestTask");
	g_sLangTxt_TestTask                = _T("测试任务");

	g_sLangID_ExterScript              = _T("sExterScript");
	g_sLangTxt_ExterScript             = _T("外部脚本库文件");
	g_sLangID_InterScript              = _T("sInterScript");
	g_sLangTxt_InterScript             = _T("模板内部脚本库");

	g_sLangID_Attribute                = _T("sAttribute");
	g_sLangTxt_Atrribute               = _T("属性");
	g_sLangID_Times                    = _T("sTimes");
	g_sLangTxt_Times                   = _T("次数");
	g_sLangID_DataPro                  = _T("sDataPro");
	g_sLangTxt_DataPro                 = _T("数据处理");
	g_sLangID_TestTemplateFile         = _T("sTestTemplateFile");
	g_sLangTxt_TestTemplateFile        = _T("测试模板文件");
	g_sLangID_TestSubTemplateFile      = _T("sTestSubTemplateFile");
	g_sLangTxt_TestSubTemplateFile     = _T("测试子模板文件");
	g_sLangID_ReportTemplateFile      = _T("sReportTemplateFile");
	g_sLangTxt_ReportTemplateFile     = _T("报告模板文件");
	//
	g_sLangID_ReportDefinition         = _T("sReportDefinition");
	g_sLangTxt_ReportDefinition        = _T("报表定义");
	g_sLangID_TagManagement            = _T("sTagManagement");
	g_sLangTxt_TagManagement           = _T("标签管理");
	g_sLangID_LetterForm               = _T("sLetterForm");
	g_sLangTxt_LetterForm              = _T("宋体");
	g_sLangID_ViewDevPara              = _T("sViewDevPara");
	g_sLangTxt_ViewDevPara             = _T("查看设备参数");
	g_sLangID_TestInlegibleItems      = _T("sTestInlegibleItems");
	g_sLangTxt_TestInlegibleItems    = _T("测试全部不合格项目");
	g_sLangID_TestCurrtItem            = _T("sTestCurrtItem");
	g_sLangTxt_TestCurrtItem           = _T("测试当前项目");
	g_sLangID_TestCurrtItemDev         = _T("sTestCurrtItemDev");
	g_sLangTxt_TestCurrtItemDev        = _T("测试当前项目-装置独立测试");
	g_sLangID_TestCurrtItemStart       = _T("sTestCurrtItemStart");
	g_sLangTxt_TestCurrtItemStart      = _T("从当前项目开始测试");
	g_sLangID_ParaMdf                  = _T("sParaMdf");
	g_sLangTxt_ParaMdf                 = _T("参数修改");
	g_sLangID_UpdataPara               = _T("sUpdataPara");
	g_sLangTxt_UpdataPara              = _T("从模板更新参数");
	g_sLangID_UpdataParaToGb               = _T("sUpdataParaToGb");
	g_sLangTxt_UpdataParaToGb              = _T("更新参数至模板");
	g_sLangID_ViewReport               = _T("sViewReport");
	g_sLangTxt_ViewReport              = _T("查看报告");
	g_sLangID_ViewRecordFile           = _T("sViewRecordFile");
	g_sLangTxt_ViewRecordFile          = _T("查看录波文件");
	g_sLangID_ViewCharCurve            = _T("sViewCharCurve");
	g_sLangTxt_ViewCharCurve           = _T("查看特性曲线");
	g_sLangID_ExpdNodes                = _T("sExpdNodes");
	g_sLangTxt_ExpdNodes               = _T("展开全部子节点");

	g_sLangID_ComictnComm              = _T("sComictnComm");
	g_sLangTxt_ComictnComm             = _T("通讯命令");
	g_sLangID_ComictnFront             = _T("sComictnFront");
	g_sLangTxt_ComictnFront            = _T("通讯前延时");
	g_sLangID_ComictnLater             = _T("sComictnLater");
	g_sLangTxt_ComictnLater            = _T("通讯后延时");
	g_sLangID_ComputMode               = _T("sComputMode");
	g_sLangTxt_ComputMode              = _T("计算模式");
	g_sLangID_ComictnTime              = _T("sComictnTime");
	g_sLangTxt_ComictnTime             = _T("通讯次数");
	g_sLangID_Text                     = _T("sText");
	g_sLangTxt_Text                    = _T("文本");

	g_sLangID_CreatTestMngFail                     = _T("sCreatTestMngFail");
	g_sLangTxt_CreatTestMngFail                    = _T("创建测试仪管理组件失败");
	g_sLangID_CreatTestAbnom                       = _T("sCreatTestAbnom");
	g_sLangTxt_CreatTestAbnom                      = _T("创建测试仪通讯组件出现异常");
	g_sLangID_CreatTestCmtFail                     = _T("sCreatTestCmtFail");
	g_sLangTxt_CreatTestCmtFail                    = _T("创建测试仪通讯组件失败");
	g_sLangID_NoPrtcCpnt                           = _T("sNoPrtcCpnt");
	g_sLangTxt_NoPrtcCpnt                          = _T("没有注册规约引擎组件");
	g_sLangID_CreatPrtcFail                        = _T("sCreatPrtcFail");
	g_sLangTxt_CreatPrtcFail                       = _T("创建规约通讯设备失败");
	g_sLangID_FileOpenFalseS                       = _T("sFileOpenFalseS");
	g_sLangTxt_FileOpenFalseS                      = _T("打开文件\"%s\"出错");
	g_sLangID_TestFileOpenFalseS                   = _T("sTestFileOpenFalseS");
	g_sLangTxt_TestFileOpenFalseS                  = _T("打开试验文件\"%s\"出错");
	g_sLangID_CommunItemD                          = _T("sCommunItemD");
	g_sLangTxt_CommunItemD                         = _T("通讯命令项目个数：%d    电气量项目个数：%d");
	g_sLangID_TestStopS                            = _T("sTestStopS");
	g_sLangTxt_TestStopS                           = _T("【%s】测试停止");
	g_sLangID_CommunIgnored                        = _T("sCommunIgnored");
	g_sLangTxt_CommunIgnored                       = _T("忽略的电气量测试功能消息......");
	g_sLangID_OnlineFail                           = _T("sOnlineFail");
	g_sLangTxt_OnlineFail                          = _T("联机失败");
	g_sLangID_TestStartInf                         = _T("sTestStartInf");
	g_sLangTxt_TestStartInf                        = _T("------收到电气量测试开始消息【%s】");
	g_sLangID_ParaDnldFail                         = _T("sParaDnldFail");
	g_sLangTxt_ParaDnldFail                        = _T("------参数下载失败");
	g_sLangID_TestUnsuptFctn                       = _T("sTestUnsuptFctn");
	g_sLangTxt_TestUnsuptFctn                      = _T("------测试仪器底层功能接口不支持测试功能[%s]");
	g_sLangID_TestOverTimeS                        = _T("sTestOverTimeS");
	g_sLangTxt_TestOverTimeS                       = _T("------测试仪器底层测试功能[%s]测试超时, %d ms后重新测试");
	g_sLangID_CommunOverTime                       = _T("sCommunOverTime");
	g_sLangTxt_CommunOverTime                      = _T("通讯超时，测试终止！");
	g_sLangID_CommunTestStop                       = _T("sCommunTestStop");
	g_sLangTxt_CommunTestStop                      = _T("通讯过程中出现错误，测试终止");
	g_sLangID_ReCommunD                            = _T("sReCommunD");
	g_sLangTxt_ReCommunD                           = _T("通讯过程中出现错误，重新通讯第%d次，共%d次");
	g_sLangID_CommunFalse                          = _T("sCommunFalse");
	g_sLangTxt_CommunFalse                         = _T("通讯过程中出现错误，pCommCmd==NULL");

	g_sLangID_StartCommun                          = _T("sStartCommun");
	g_sLangTxt_StartCommun                         = _T("连接设备成功，开始执行通讯命令");
	g_sLangID_ContNextItem                         = _T("sContNextItem");
	g_sLangTxt_ContNextItem                        = _T("继续连接下一个设备");
	g_sLangID_TestContS                     = _T("sTestContS");
	g_sLangTxt_TestContS                    = _T("【%s】：【%s】忽略通讯过程中出现错误，测试继续");
	g_sLangID_TestStop3                     = _T("sTestStop3");
	g_sLangTxt_TestStop3                    = _T("通讯引擎异常，测试终止");
	g_sLangID_ReportExpSucc                     = _T("sReportExpSucc");
	g_sLangTxt_ReportExpSucc                    = _T("报告导出成功：\r\n");
	g_sLangID_NoTestItem                     = _T("sNoTestItem");
	g_sLangTxt_NoTestItem                    = _T("没有需要测试的项目！");
	g_sLangID_ItemTestTimeD                     = _T("sItemTestTimeD");
	g_sLangTxt_ItemTestTimeD                    = _T("------项目[%s]第%d次测试，共%d次");
	g_sLangID_ItemTestTimeD2                     = _T("sItemTestTimeD2");
	g_sLangTxt_ItemTestTimeD2                    = _T("------项目[%s]第1次测试，共1次");
	g_sLangID_Communtioning                     = _T("sCommuntioning ");
	g_sLangTxt_Communtioning                    = _T("通讯中.......");
	g_sLangID_MdfParaData                     = _T("sMdfParaData");
	g_sLangTxt_MdfParaData                   = _T("调试子模板方式，请手动修改保护装置的参数数据");
	g_sLangID_CommunTestTimeD                     = _T("sCommunTestTimeD");
	g_sLangTxt_CommunTestTimeD                    = _T("----%s通讯命令[%s]第%d次测试，共%d次");
	g_sLangID_CommunCmdS                     = _T("sCommunCmdS");
	g_sLangTxt_CommunCmdS                    = _T("----%s通讯命令[%s]");
	g_sLangID_CommunCmdItem                     = _T("sCommunCmdItem");
	g_sLangTxt_CommunCmdItem                    = _T("----------%s通讯命令项目[%s]");
	g_sLangID_CallRecordFail                     = _T("sCallRecordFail");
	g_sLangTxt_CallRecordFail                    = _T("调用录波文件失败");
	g_sLangID_ReadRecordFileS                     = _T("sReadRecordFileS");
	g_sLangTxt_ReadRecordFileS                    = _T("读取录波文件：【%s】");
	g_sLangID_TestStop4                     = _T("sTestStop4");
	g_sLangTxt_TestStop4                    = _T("    测试项目时序发生错误，测试停止");
	g_sLangID_TestCotrAbnom                     = _T("sTestCotrAbnom");
	g_sLangTxt_TestCotrAbnom                    = _T("------测试仪控制程序发生异常");
	g_sLangID_ItemUncmpltS                     = _T("sItemUncmpltS");
	g_sLangTxt_ItemUncmpltS                    = _T("------电气量项目\"%s\"还有子项目没有完成");
	g_sLangID_TestCotrAbnom2                     = _T("sTestCotrAbnom2");
	g_sLangTxt_TestCotrAbnom2                    = _T("      测试仪控制程序发生异常");
	g_sLangID_EltrcProjectCmplt                     = _T("sEltrcProjectCmplt");
	g_sLangTxt_EltrcProjectCmplt                    = _T("     电气量项目完成");
	g_sLangID_NotCommunCmd                     = _T("sNotCommunCmd");
	g_sLangTxt_NotCommunCmd                    = _T("通讯过程中出现错误，不是通讯命令");
	g_sLangID_CommunFalse2                     = _T("sCommunFalse2");
	g_sLangTxt_CommunFalse2                    = _T("通讯过程中出现错误，Item==NULL");
	g_sLangID_TestItemFalse                     = _T("sTestItemFalse");
	g_sLangTxt_TestItemFalse                    = _T("    >>>>>>>ExcuteCommCmd:测试项目时序发生错误");
	g_sLangID_CommunParaFalse                     = _T("sCommunParaFalse");
	g_sLangTxt_CommunParaFalse                    = _T("    通讯命令项目【%s】定义的参数【%s】错误");
	g_sLangID_ItemDataUnexistS                     = _T("sItemDataUnexistS");
	g_sLangTxt_ItemDataUnexistS                    = _T("项目(%s)通讯引擎设备数据模型()%s不存在");
	g_sLangID_ItemDataUnexist                     = _T("sItemDataUnexist");
	g_sLangTxt_ItemDataUnexist                    = _T("项目(%s)通讯引擎设备数据模型不存在");
	g_sLangID_ItemDataUnexist2                     = _T("sItemDataUnexist2");
	g_sLangTxt_ItemDataUnexist2                    = _T("项目【%s】通讯引擎设备数据集【%s】不存在");
	g_sLangID_ItemDataUnexist3                     = _T("sItemDataUnexist3");
	g_sLangTxt_ItemDataUnexist3                    = _T("项目【%s】设备数据模型【%s】不存在");
	g_sLangID_ItemDataUnexist4                     = _T("sItemDataUnexist4");
	g_sLangTxt_ItemDataUnexist4                    = _T("项目【%s】通讯引擎设备数据模型不存在");
	g_sLangID_SytmTestFalse                     = _T("sSytmTestFalse");
	g_sLangTxt_SytmTestFalse                    = _T("系统测试错误：ExcuteCommCmdOnDelayBeforeFinish");
	g_sLangID_TestAbnrm2                     = _T("sTestAbnrm2");
	g_sLangTxt_TestAbnrm2                    = _T("测试发生异常，试验过程中通讯命令没有对应的项目");
	g_sLangID_TestAbnrm3                     = _T("sTestAbnrm3");
	g_sLangTxt_TestAbnrm3                    = _T("测试发生异常，试验过程中通讯命令没有对应的项目[TestNextSubItems]");
	g_sLangID_DealCommunRst                     = _T("sDealCommunRst");
	g_sLangTxt_DealCommunRst                    = _T("----处理通讯命令【%s】结果");
	g_sLangID_CreatRptFail                     = _T("sCreatRptFail");
	g_sLangTxt_CreatRptFail                    = _T("创建报告对象失败");
	g_sLangID_WaitRtest                     = _T("sWaitRtest");
	g_sLangTxt_WaitRtest                    = _T("***********标准源告警，等待%d分钟后重新开始测试************");
	g_sLangID_CommunUnExist                     = _T("sCommunUnExist");
	g_sLangTxt_CommunUnExist                    = _T("通讯设备不存在");
	g_sLangID_CmdFalse                     = _T("sCmdFalse");
	g_sLangTxt_CmdFalse                    = _T("通讯配置文件【%s】不正确，命令【%s】错误");
	g_sLangID_CommunEngineFalse                     = _T("sCommunEngineFalse");
	g_sLangTxt_CommunEngineFalse                    = _T("    执行通讯过程：通讯引擎错误");
	g_sLangID_PrtcEngineFalse                     = _T("sPrtcEngineFalse ");
	g_sLangTxt_PrtcEngineFalse                     = _T("规约引擎设备数据对象错误");
	g_sLangID_PathData                     = _T("sPathData");
	g_sLangTxt_PathData                     = _T("路径：%s：数据个数%d");
	g_sLangID_PathFalse                     = _T("sPathFalse");
	g_sLangTxt_PathFalse                    = _T("路径错误：%s");
	g_sLangID_FunctionError                     = _T("sFunctionError");
	g_sLangTxt_FunctionError                    = _T("MtRegistPpDataMsg函数调用错误");
	g_sLangID_TestFctnNo                     = _T("sTestFctnNo");
	g_sLangTxt_TestFctnNo                    = _T("测试功能组件没有实现GetExternMsgRcvWnd、G方法etExternMsgID");
	g_sLangID_UnCreatFctn                     = _T("sTUnCreatFctn");
	g_sLangTxt_UnCreatFctn                    = _T("还没有创建测试功能组件！");
	g_sLangID_CallRecordFail2                     = _T("sCallRecordFail2");
	g_sLangTxt_CallRecordFail2                    = _T("调用录波命令失败");
	g_sLangID_CallCmdFail                     = _T("sCallCmdFail");
	g_sLangTxt_CallCmdFail                    = _T("调用命令失败");
	//GuideBookDefine里的输出信息
	g_sLangID_Qualified                       = _T("sQualified");
	g_sLangTxt_Qualified                      = _T("合格");
	g_sLangID_Unqualified                     = _T("sUnqualified");
	g_sLangTxt_Unqualified                    = _T("不合格");
	g_sLangID_ErrorID                     = _T("sErrorID");
	g_sLangTxt_ErrorID                    = _T("错误的数据集ID");

	g_sLangID_CurrZoneIndex                     = _T("sCurrZoneIndex");
	g_sLangTxt_CurrZoneIndex                    = _T("当前定值区");
	g_sLangID_ZoneIndex                     = _T("sZoneIndex");
	g_sLangTxt_ZoneIndex                    = _T("%d区");

	g_sLangID_ModifyAndSave                     = _T("sModifyAndSave");
	g_sLangTxt_ModifyAndSave                    = _T("文件已修改，是否保存？");
	//CharTemplateSelDlg里的输出信息
	g_sLangID_SelCharCurve                     = _T("sSelCharCurve");
	g_sLangTxt_SelCharCurve                    = _T("选择特性曲线");

	g_sLangID_ItemType                     = _T("sItemType");
	g_sLangTxt_ItemType                    = _T("项目类型");
	g_sLangID_Status                     = _T("sStatus");
	g_sLangTxt_Status                    = _T("状态");
	g_sLangID_ItemPath                     = _T("sItemPath");
	g_sLangTxt_ItemPath                    = _T("项目路径");
	g_sLangID_ReportInf                     = _T("sReportInf");
	g_sLangTxt_ReportInf                    = _T("报告信息");
	g_sLangID_RetestQualified                     = _T("sRetestQualified ");
	g_sLangTxt_RetestQualified                     = _T("重测合格");
	g_sLangID_ElectrQuanPrjc                     = _T("sElectrQuanPrjc");
	g_sLangTxt_ElectrQuanPrjc                   = _T("电气量项目");
	g_sLangID_ArtificialProject                     = _T("sArtificialProject");
	g_sLangTxt_ArtificialProject                    = _T("人工项目");

	g_sLangID_ErrorDll                 = _T("sErrorDll");
	g_sLangTxt_ErrorDll             = _T("错误的DLL调用 %s::%s(\"%s\", \"%s\")");
	g_sLangID_DllUnStopTest                 = _T("sDllUnStopTest");
	g_sLangTxt_DllUnStopTest            = _T("DLL调用(%s::%s)处理中，不能终止测试...");

	g_sLangID_CrtPrtlEgnFail                = _T("sCrtPrtlEgnFail");
	g_sLangTxt_CrtPrtlEgnFail               = _T("创建规约引擎[%s]失败");
	g_sLangID_RlsPrtlEgnFail                = _T("sRlsPrtlEgnFail");
	g_sLangTxt_RlsPrtlEgnFail               = _T("释放规约引擎[%s]失败");
	g_sLangID_TestLogMngmt                = _T("sTestLogMngmt");
	g_sLangTxt_TestLogMngmt               = _T("测试记录文件管理");
	g_sLangID_TestRptRecodFile                = _T("sTestRptRecodFile");
	g_sLangTxt_TestRptRecodFile                = _T("测试报告记录文件");
	g_sLangID_TestRptFile                = _T("sTestRptFile");
	g_sLangTxt_TestRptFile               = _T("测试报告文件");
	g_sLangID_TestTaskFile                = _T("sTestTaskFile");
	g_sLangTxt_TestTaskFile               = _T("测试任务文件");
	g_sLangID_SngDeviceRpt                = _T("sSngDeviceRpt");
	g_sLangTxt_SngDeviceRpt               = _T("单装置多通道测试报告文件");
	g_sLangID_MulDeviceRpt                = _T("sMulDeviceRpt");
	g_sLangTxt_MulDeviceRpt               = _T("多装置测试报告文件");
	g_sLangID_SngDeviceRpt2                = _T("sSngDeviceRpt2");
	g_sLangTxt_SngDeviceRpt2               = _T("单装置多规约测试报告文件");
	g_sLangID_MdvMgrpFile                = _T("sMdvMgrpFile");
	g_sLangTxt_MdvMgrpFile              = _T("多装置多通道测试报告文件");
	g_sLangID_CreateCpntFail                = _T("sCreateCpntFail");
	g_sLangTxt_CreateCpntFail             = _T("创建测试组件失败");
	g_sLangID_MulDeviceRptS                = _T("sMulDeviceRptS");
	g_sLangTxt_MulDeviceRptS               = _T("多装置测试报告文件(*.%s)|*.%s||");
	g_sLangID_SngDeviceRptS                = _T("sSngDeviceRptS");
	g_sLangTxt_SngDeviceRptS               = _T("单装置多规约测试报告文件(*.%s)|*.%s||");
	g_sLangID_MdvMgrpFilter                = _T("sMdvMgrpFilter");
	g_sLangTxt_MdvMgrpFilter               = _T("多装置多组测试报告文件(*.%s)|*.%s||");
	g_sLangID_FileRightError                = _T("sFileRightError");
	g_sLangTxt_FileRightError               = _T("文件【%s】版本错误！");
	g_sLangID_DataIDUnext                = _T("sDataIDUnext");
	g_sLangTxt_DataIDUnext               = _T("数据ID(%s)不存在");
	g_sLangID_TestCpntCopy                = _T("sTestCpntCopy");
	g_sLangTxt_TestCpntCopy                = _T("        [%s]:[%s]测试完成(复制报告)");
	g_sLangID_SngDevMulPrtc                = _T("sSngDevMulPrtc");
	g_sLangTxt_SngDevMulPrtc               = _T("单装置多规约-路径1：%s");
	g_sLangID_SngDevMulPrtc2                = _T("sSngDevMulPrtc2");
	g_sLangTxt_SngDevMulPrtc2               = _T("单装置多规约-路径2：%s");
	g_sLangID_WaitSetting                = _T("sWaitSetting");
	g_sLangTxt_WaitSetting                = _T("配置操作中，等待配置完成......");
	g_sLangID_RecordFileRead                = _T("sRecordFileRead");
	g_sLangTxt_RecordFileRead                = _T("读取录波文件前延时0秒,共%d秒");
	g_sLangID_RecordFileRead2                = _T("sRecordFileRead2");
	g_sLangTxt_RecordFileRead2               = _T("读取录波文件前延时%d秒,共%d秒");
	g_sLangID_ErrorMessage_a                = _T("sErrorMessage_a");
	g_sLangTxt_ErrorMessage_a              = _T("错误的处理消息...............");

	g_sLangID_ChrctCurDefn                = _T("sChrctCurDefn");
	g_sLangTxt_ChrctCurDefn               = _T("特性曲线定义");
	g_sLangID_ParaCurve                = _T("sParaCurve");
	g_sLangTxt_ParaCurve              = _T("曲线参数");
	g_sLangID_ExpressionError                = _T("sExpressionError");
	g_sLangTxt_ExpressionError              = _T("表达式【%s】 错误");
	g_sLangID_ExpressionVariable                = _T("sExpressionVariable");
	g_sLangTxt_ExpressionVariable              = _T("表达式变量【%s】 错误");
	g_sLangID_Arc                = _T("sArc");
	g_sLangTxt_Arc              = _T("圆弧（arc）");
	g_sLangID_Arcp                = _T("sArcp");
	g_sLangTxt_Arcp              = _T("圆弧（arcp）");
	g_sLangID_Lens                = _T("sLens");
	g_sLangTxt_Lens              = _T("透镜（lens）");
	g_sLangID_Lined                = _T("sLined");
	g_sLangTxt_Lined              = _T("线段（lined）");
	g_sLangID_Liner                = _T("sLiner");
	g_sLangTxt_Liner              = _T("射线（liner）");
	g_sLangID_Line                = _T("sLine");
	g_sLangTxt_Line              = _T("直线（line）");
	g_sLangID_Linep                = _T("sLinep");
	g_sLangTxt_Linep              = _T("直线（linep）");
	g_sLangID_Mho                = _T("sMho");
	g_sLangTxt_Mho              = _T("圆（mho）");

	g_sLangID_I2T                = _T("sI2T"); //I2T
	g_sLangTxt_I2T                = _T("反时限I2T)");
	g_sLangID_IAC                = _T("sIAC"); //IAC
	g_sLangTxt_IAC                = _T("反时限IAC");
	g_sLangID_IEC                = _T("sIEC"); //IEC
	g_sLangTxt_IEC                = _T("反时限IEC");
	g_sLangID_IEEE                = _T("sIEEE"); //IEEE
	g_sLangTxt_IEEE                = _T("反时限IEEE");
	g_sLangID_INVOWNDEF                = _T("sINVOWNDEF"); //INVOWNDEF
	g_sLangTxt_INVOWNDEF                = _T("反时限INVOWNDEF)");

	g_sLangID_CordnPtn                = _T("sCordnPtn");
	g_sLangTxt_CordnPtn              = _T("坐标模式");
	g_sLangID_TestFctnSel                = _T("sTestFctnSel");
	g_sLangTxt_TestFctnSel              = _T("测试功能选择");
	g_sLangID_Location                = _T("sLocation ");
	g_sLangTxt_Location               = _T("位置");
	g_sLangID_RotationAngle                = _T("sRotationAngle");
	g_sLangTxt_RotationAngle              = _T("旋转角度");
	g_sLangID_CustomAngle                = _T("sCustomAngle");
	g_sLangTxt_CustomAngle              = _T("自定义线角度");
	g_sLangID_CoordinatesConflict                = _T("sCoordinatesConflict");
	g_sLangTxt_CoordinatesConflict             = _T("特性曲线的坐标系“%s”与与图形管理模块的坐标系“%s”冲突");
	g_sLangID_VariableID                = _T("sVariableID");
	g_sLangTxt_VariableID             = _T("变量ID");
	g_sLangID_AssociationValue                = _T("sAssociationValue");
	g_sLangTxt_AssociationValue              = _T("关联定值");
	g_sLangID_EdgeType                = _T("sEdgeType");
	g_sLangTxt_EdgeType              = _T("边类型");
	g_sLangID_TestPoint                = _T("sTestPoint");
	g_sLangTxt_TestPoint              = _T("测点数");
	g_sLangID_ErrorBand                = _T("sErrorBand");
	g_sLangTxt_ErrorBand              = _T("误差带");
	g_sLangID_EdgeDetails                = _T("sEdgeDetails");
	g_sLangTxt_EdgeDetails              = _T("边详细信息");
	g_sLangID_CoordinateSystem                = _T("sCoordinateSystem");
	g_sLangTxt_CoordinateSystem              = _T("坐标系");
	g_sLangID_DataMatchScript                = _T("sDataMatchScript");
	g_sLangTxt_DataMatchScript              = _T("数据匹配脚本");
	g_sLangID_Include                = _T("sInclude");
	g_sLangTxt_Include              = _T("包含");
	g_sLangID_CertainUninclude                = _T("sCertainUninclude");
	g_sLangTxt_CertainUninclude              = _T("必须不包含");
	g_sLangID_DataItfcMng                = _T("sDataItfcMng");
	g_sLangTxt_DataItfcMng               = _T("数据接口管理");
	g_sLangID_DataItfc               = _T("sDataItfc");
	g_sLangTxt_DataItfc               = _T("数据接口");
	g_sLangID_DataItfcVari               = _T("sDataItfcVari");
	g_sLangTxt_DataItfcVari               = _T("数据接口变量");
	g_sLangID_DataDataUnExist               = _T("sDataDataUnExist");
	g_sLangTxt_DataDataUnExist               = _T("数据【%s】在数据集【%s】不存在");
	g_sLangID_SoftStrap               = _T("sSoftStrap");
	g_sLangTxt_SoftStrap               = _T("软压板");
	g_sLangID_SetValue               = _T("sSetValue");
	g_sLangTxt_SetValue               = _T("整定值");
	g_sLangID_TestPara               = _T("sTestPara");
	g_sLangTxt_TestPara               = _T("测试参数");
	g_sLangID_ControlWord               = _T("sControlWord");
	g_sLangTxt_ControlWord               = _T("控制字");
	g_sLangID_OutputValue               = _T("sOutputValue");
	g_sLangTxt_OutputValue               = _T("开出量");
	g_sLangID_InputValue               = _T("sInputValue");
	g_sLangTxt_InputValue               = _T("开入量");
	g_sLangID_AnalogValue               = _T("sAnalogValue");
	g_sLangTxt_AnalogValue               = _T("模拟量");

	g_sLangID_PreDelay               = _T("sPreDelay");
	g_sLangTxt_PreDelay               = _T("[%s]通讯前延时 (%s)==>>(%s)");
	g_sLangID_PostDelay               = _T("sPostDelay");
	g_sLangTxt_PostDelay               = _T("[%s]通讯后延时 (%s)==>>(%s)");
	g_sLangID_RetryDelay               = _T("sRetryDelay");
	g_sLangTxt_RetryDelay               = _T("[%s]重试前延时 (%s)==>>(%s)");
	g_sLangID_CommunCmdUnExist               = _T("sCommunCmdUnExist");
	g_sLangTxt_CommunCmdUnExist              = _T("通讯项目【%s】对应的通讯命令【%s】不存在");
	g_sLangID_CommunCmdTimes               = _T("sCommunCmdTimes");
	g_sLangTxt_CommunCmdTimes               = _T("通讯命令参数：%s");
	g_sLangID_AllRecord               = _T("sAllRecord");
	g_sLangTxt_AllRecord               = _T("全部报文：%s");
	g_sLangID_StandardRecord               = _T("sStandardRecord");
	g_sLangTxt_StandardRecord               = _T("标准报文：%s");
	g_sLangID_NoRecord               = _T("sNoRecord");
	g_sLangTxt_NoRecord               = _T("检索结果中没有报文【%s】=【%s】");
	g_sLangID_NoDefin               = _T("sNoDefin");
	g_sLangTxt_NoDefin                = _T("没有定义【%s】");
	g_sLangID_RecordTimes               = _T("sRecordTimes");
	g_sLangTxt_RecordTimes               = _T("报文【%s】【%s】时间差【%s】-【%s】=%d ms");
	g_sLangID_TimeDiff               = _T("sTimeDiff");
	g_sLangTxt_TimeDiff                = _T("CalSoeTimeEx：【%s，%s】【%s，%s】时间差【%s】-【%s】=%d ms");
	g_sLangID_RecordResult               = _T("sRecordResult");
	g_sLangTxt_RecordResult               = _T("报文验证的结果中没有【%s】");
	g_sLangID_Surplus               = _T("sSurplus");
	g_sLangTxt_Surplus               = _T("多余：%s");
	g_sLangID_AllExpRecord               = _T("sAllExpRecord");
	g_sLangTxt_AllExpRecord               = _T("全部出口报文：%s");
	g_sLangID_Lack               = _T("sLack");
	g_sLangTxt_Lack                 = _T("缺少：%s");
	g_sLangID_CreatCharPara               = _T("sCreatCharPara");
	g_sLangTxt_CreatCharPara                 = _T("创建特性曲线搜索线：参数ID“%s”不存在");
	g_sLangID_Act               = _T("sAct");
	g_sLangTxt_Act                 = _T("动作");
	g_sLangID_Unact               = _T("sUnact");
	g_sLangTxt_Unact                  = _T("未动作");
	g_sLangID_UndefinDataPara               = _T("sUndefinDataPara");
	g_sLangTxt_UndefinDataPara                 = _T("没有定义“%s”数据变量");
	g_sLangID_ShowResult               = _T("sShowResult");
	g_sLangTxt_ShowResult                  = _T("表达式【%s】计算结果为【%s】");
	g_sLangID_ParaMdf2               = _T("sParaMdf2");
	g_sLangTxt_ParaMdf2               = _T("[%s]参数修改： [%s] ==[%s] ->[%s]");
	g_sLangID_LibraryFile               = _T("sLibraryFile");
	g_sLangTxt_LibraryFile                  = _T("库文件不存在【%s】");
	g_sLangID_FctnNotFound               = _T("sFctnNotFound");
	g_sLangTxt_FctnNotFound                  = _T("【%s】write_qrcode_file 函数入口没找到");
	g_sLangID_MsgPrompt               = _T("sMsgPrompt");
	g_sLangTxt_MsgPrompt                  = _T("消息提示");
	g_sLangID_TaskGuide2               = _T("sTaskGuide2");
	g_sLangTxt_TaskGuide2                   = _T("作业指导");
	g_sLangID_DelCommunPara               = _T("sDelCommunPara");
	g_sLangID_Delete2               = _T("sDelete2");
	g_sLangTxt_Delete2                  = _T("删除：%s");
	g_sLangTxt_DelCommunPara                  = _T("删除通讯命令的参数：%s");
	g_sLangID_ItemRstError               = _T("sItemRstError");
	g_sLangTxt_ItemRstError                  = _T("项目【%s】结果脚本语法错误");
	g_sLangID_DataD2               = _T("sDataD2");
	g_sLangTxt_DataD2                  = _T("数据%d【%s】");
	g_sLangID_NullReport               = _T("sNullReport");
	g_sLangTxt_NullReport                  = _T("空白报告部分使用“%s”替换");
	g_sLangID_AdjustReport               = _T("sAdjustReport");
	g_sLangTxt_AdjustReport                  = _T("调整报告区域");
	g_sLangID_ReDTest               = _T("sReDTest");
	g_sLangTxt_ReDTest                  = _T("重复第%d次测试");
	g_sLangID_AreaDefin               = _T("sAreaDefin");
	g_sLangTxt_AreaDefin                 = _T("区域定义");
	g_sLangID_ScriptOverwrite               = _T("sScriptOverwrite");
	g_sLangTxt_ScriptOverwrite                 = _T("脚本【%s】已经存在，并且两个脚本不一致，是否覆盖?");
	g_sLangID_DiffTypeData               = _T("sDiffTypeData");
	g_sLangTxt_DiffTypeData                 = _T("变量[%s]存在不同类型数据类型定义");
	g_sLangID_FileNewest               = _T("sFileNewest ");
	g_sLangTxt_FileNewest                  = _T("引用脚本【%s】不存在，请检查脚本库文件是否为最新版本");
	g_sLangID_ParaError2               = _T("sParaError2");
	g_sLangTxt_ParaError2                 = _T("ExitExe(\"%s\")参数错误");
	g_sLangID_NoDataReport               = _T("sNoDataReport");
	g_sLangTxt_NoDataReport                 = _T("没有报告数据");
	g_sLangID_ParaError3               = _T("sParaError3");
	g_sLangTxt_ParaError3                = _T("CalAinErr函数:绝对误差限[%f]和相对误差限[%f]都小于0，参数错误！");
	g_sLangID_ParaError4               = _T("sParaError4");
	g_sLangTxt_ParaError4                = _T("CalAinStdError函数:绝对误差限[%f]和相对误差限[%f]都小于0，参数错误！");
	g_sLangID_ParaError5               = _T("sParaError5");
	g_sLangTxt_ParaError5                = _T("CalVariationEror函数:误差限[%f]都小于0，参数错误！");
	g_sLangID_FctnVariousUnExist               = _T("sFctnVariousUnExist");
	g_sLangTxt_FctnVariousUnExist                = _T("CalVariationErrorEx函数:误差限变量[%s]不存在！");
	g_sLangID_ErrFctnTest               = _T("sErrFctnTest");
	g_sLangTxt_ErrFctnTest                 = _T("CalAinErr函数只用用于测试量值测试项目");
	g_sLangID_ErrFctnUnExist               = _T("sErrFctnUnExist");
	g_sLangTxt_ErrFctnUnExist                 = _T("CalAinErr函数数据【%s】不存在");
	g_sLangID_StdErrorFctnTest               = _T("sStdErrorFctnTest");
	g_sLangTxt_StdErrorFctnTest                 = _T("CalAinStdError函数只用用于测试量值测试项目");
	g_sLangID_StdErrorFctnUnExist               = _T("sStdErrorFctnUnExist");
	g_sLangTxt_StdErrorFctnUnExist                 = _T("CalAinStdError函数数据【%s】不存在");
	g_sLangID_StdErrorFctnUnExistData               = _T("sStdErrorFctnUnExistData");
	g_sLangTxt_StdErrorFctnUnExistData                 = _T("CalAinStdError函数数据【%d】不存在不够");
	g_sLangID_FlterFctnTest               = _T("sFlterFctnTest");
	g_sLangTxt_FlterFctnTest                 = _T("FlterCalErrorMax函数只用用于测试量值测试项目");
	g_sLangID_FlterFctnUnExist               = _T("sFlterFctnUnExist");
	g_sLangTxt_FlterFctnUnExist                 = _T("FlterCalErrorMax函数数据【%s】不存在");
	g_sLangID_FlterFctnUnExist2               = _T("sFlterFctnUnExist2");
	g_sLangTxt_FlterFctnUnExist2                 = _T("FlterCalErrorMax函数绝对误差数据【%s】不存在");
	g_sLangID_VariationFctnTest               = _T("sVariationFctnTest");
	g_sLangTxt_VariationFctnTest                  = _T("CalVariationErrorEx函数只用用于测量值测试项目");
	g_sLangID_VariationFctnItem               = _T("sVariationFctnItem");
	g_sLangTxt_VariationFctnItem                  = _T("CalVariationErrorEx函数所在的项目的父项目不是电气量项目");
	g_sLangID_VariationFctnUnExist               = _T("sVariationFctnUnExist");
	g_sLangTxt_VariationFctnUnExist                 = _T("CalVariationErrorEx函数数据【%s】不存在");
	g_sLangID_VariationFctnUnExist2               = _T("sVariationFctnUnExist2");
	g_sLangTxt_VariationFctnUnExist2                 = _T("CalVariationErrorEx函数基准值【%s】不存在");
	g_sLangID_VariationFctnUnExist3               = _T("sVariationFctnUnExist3");
	g_sLangTxt_VariationFctnUnExist3                 = _T("CalVariationErrorEx函数数据【实测值】【%s】不存在");
	g_sLangID_VariationFctnUnExist4               = _T("sVariationFctnUnExist4");
	g_sLangTxt_VariationFctnUnExist4                 = _T("CalVariationErrorEx函数数据【理论值】【%s】不存在");
	g_sLangID_VariationFctnUnExist5               = _T("sVariationFctnUnExist5");
	g_sLangTxt_VariationFctnUnExist5                 = _T("CalVariationErrorEx函数：测试参数基准值【%s】不存在");
	g_sLangID_VariationFctnUnExist6               = _T("sVariationFctnUnExist6");
	g_sLangTxt_VariationFctnUnExist6                = _T("CalVariationErrorEx函数数据【结果变量】【%s】不存在");
	g_sLangID_ResultJude               = _T("sResultJude");
	g_sLangTxt_ResultJude                = _T("实测值=%.5f  ,理论值=%.5f  ,基准值=%.5f  变差=%.5f 误差限=%.5f  结果判断=%d");
	g_sLangID_SetItemIDUnExist               = _T("sSetItemIDUnExist");
	g_sLangTxt_SetItemIDUnExist                 = _T("SetItemParaValue ID不存在,Path(%s) ID(%s) items");
	g_sLangID_SetItemIDUnExist2               = _T("sSetItemIDUnExist2");
	g_sLangTxt_SetItemIDUnExist2                 = _T("SetReportValue ID不存在,Path(%s) ID(%s) items");
	g_sLangID_PathItem               = _T("sPathItem");
	g_sLangTxt_PathItem                = _T("路径检索的项目不唯一,Path(%s) select %d items");
	g_sLangID_PathItem2               = _T("sPathItem2");
	g_sLangTxt_PathItem2                 = _T("路径指定的项目不存在,Path(%s) select %d items");
	g_sLangID_CalCall               = _T("sCalCall");
	g_sLangTxt_CalCall                 = _T("CalTmGap只能在通讯命令项目中被调用");
	g_sLangID_NoDataReport2               = _T("sNoDataReport2");
	g_sLangTxt_NoDataReport2                 = _T("CalTmGap:没有报告数据");
	g_sLangID_PathNoItem               = _T("sPathNoItem");
	g_sLangTxt_PathNoItem                 = _T("路径[%s]没有选择的项目");
	g_sLangID_PathSelItem               = _T("sPathSelItem");
	g_sLangTxt_PathSelItem                 = _T("路径[%s]选择的项目不唯一");
	g_sLangID_CannotUse               = _T("sCannotUse");
	g_sLangTxt_CannotUse                 = _T("DownMacroPara不能在项目\"%s\"中使用");
	g_sLangID_CannotUse2               = _T("sCannotUse2");
	g_sLangTxt_CannotUse2                 = _T("DownMacroPara不能在项目\"%s\"中使用(项目的父对象错误)");
	g_sLangID_CannotUse3               = _T("sCannotUse3");
	g_sLangTxt_CannotUse3                 = _T("DownMacroPara不能在项目\"%s\"中使用(项目的父对象非电气量项目)");

	g_sLangID_NullDataReport               = _T("sNullDataReport");
	g_sLangTxt_NullDataReport                 = _T("FilterCombineReportEx函数：报告数据为空");
	g_sLangID_DataReportID               = _T("sDataReportID ");
	g_sLangTxt_DataReportID                  = _T("不存在ID为\"%s\"的报告数据");
	g_sLangID_DataUnExist2               = _T("sDataUnExist2");
	g_sLangTxt_DataUnExist2                 = _T("数据【%s】不存在");
	g_sLangID_DataUnExist3               = _T("sDataUnExist3");
	g_sLangTxt_DataUnExist3                 = _T("数据值【%s】不存在");
	g_sLangID_DataPathUn               = _T("sDataPathUn");
	g_sLangTxt_DataPathUn                 = _T("数据路径【%s】检索出的数据【%d】不存在");
	g_sLangID_FtcnCmdUse               = _T("sFtcnCmdUse");
	g_sLangTxt_FtcnCmdUse                  = _T("CalSoeTime函数只能在通讯命令中使用");
	g_sLangID_FtcnCmdUse2               = _T("sFtcnCmdUse2");
	g_sLangTxt_FtcnCmdUse2                 = _T("SetCmdZoneIndex函数只能用于通讯命令");
	g_sLangID_FtcnScriptCall               = _T("sFtcnScriptCall");
	g_sLangTxt_FtcnScriptCall                 = _T("函数ValidBeginEndValRange只能作为电气量项目的脚本调用");
	g_sLangID_FctnUnExist               = _T("sFctnUnExist");
	g_sLangTxt_FctnUnExist                 = _T("函数ValidBeginEndValRange:[%s]不存在");
	g_sLangID_FixedValueData               = _T("sFixedValueData");
	g_sLangTxt_FixedValueData                 = _T("%s(%s)定值单数据");
	g_sLangID_Marking               = _T("sMarking");
	g_sLangTxt_Marking                 = _T("标示");
	g_sLangID_PdfFile               = _T("sPdfFile");
	g_sLangTxt_PdfFile                 = _T("Pdf定值文件");
	g_sLangID_XMLFile               = _T("sXMLFile");
	g_sLangTxt_XMLFile                 = _T("XML定值文件");
	g_sLangID_WordFile               = _T("sWordFile");
	g_sLangTxt_WordFile                 = _T("Word定值文件");
	g_sLangID_ExcelFile               = _T("sExcelFile");
	g_sLangTxt_ExcelFile                 = _T("Excel定值文件");
	g_sLangID_OATSFile               = _T("sOATSFile");
	g_sLangTxt_OATSFile                  = _T("OATS自定义定值文件");
	g_sLangID_DataTypeUnExist2               = _T("sDataTypeUnExist2");
	g_sLangTxt_DataTypeUnExist2                  = _T("数据类型文件 [%s] 不存在");
	g_sLangID_CommunSetUnExist               = _T("sCommunSetUnExist");
	g_sLangTxt_CommunSetUnExist                  = _T("通讯配置文件\"%s\"不存在");
	g_sLangID_TestTypeUnExist               = _T("sTestTypeUnExist");
	g_sLangTxt_TestTypeUnExist                  = _T("测试类型配置文件\"%s\"不存在");
	g_sLangID_CreatDomFail               = _T("sCreatDomFail");
	g_sLangTxt_CreatDomFail                  = _T("MSXML2创建DOMDocument失败");
	g_sLangID_OpenMsxmlFail               = _T("sOpenMsxmlFail");
	g_sLangTxt_OpenMsxmlFail                  = _T("MSXML2打开文件【%s】失败");
	g_sLangID_YearMonDay               = _T("sYearMonDay");
	g_sLangTxt_YearMonDay                  = _T("%Y年%m月%d日");
	g_sLangID_UnitPara               = _T("sUnitPara");
	g_sLangTxt_UnitPara                  = _T("装置参数");
	g_sLangID_FixedValue               = _T("sFixedValue");
	g_sLangTxt_FixedValue                  = _T("定值");
	g_sLangID_Platen               = _T("sPlaten");
	g_sLangTxt_Platen                  = _T("压板");
	g_sLangID_Telemetering               = _T("sTelemetering");
	g_sLangTxt_Telemetering                  = _T("遥测");
	g_sLangID_Telecommunicating               = _T("sTelecommunicating");
	g_sLangTxt_Telecommunicating                  = _T("遥信");
	g_sLangID_FaultReport               = _T("sFaultReport");
	g_sLangTxt_FaultReport                 = _T("故障报告");
	g_sLangID_ProtectEvent               = _T("sProtectEvent");
	g_sLangTxt_ProtectEvent                  = _T("保护事件");
	g_sLangID_FaultSignal               = _T("sFaultSignal");
	g_sLangTxt_FaultSignal                  = _T("故障信号");
	g_sLangID_AlarmSignal              = _T("sAlarmSignal");
	g_sLangTxt_AlarmSignal                  = _T("告警信号");
	g_sLangID_SamplingValue               = _T("sSamplingValue");
	g_sLangTxt_SamplingValue                  = _T("采样值");
	g_sLangID_Telecontrolling               = _T("sTelecontrolling");
	g_sLangTxt_Telecontrolling                 = _T("遥控");
	g_sLangID_Custom               = _T("sCustom");
	g_sLangTxt_Custom                  = _T("自定义");
	g_sLangID_SingDataMode               = _T("sSingDataMode");
	g_sLangTxt_SingDataMode                  = _T("单一数据填写模式");
	g_sLangID_ExcelDataMode               = _T("sExcelDataMode");
	g_sLangTxt_ExcelDataMode                  = _T("表格行填写模式");
	g_sLangID_ExcelDataMode2               = _T("sExcelDataMode2");
	g_sLangTxt_ExcelDataMode2                  = _T("表格列填写模式");

	g_sLangID_NewCreatTask               = _T("sNewCreatTask");
	g_sLangTxt_NewCreatTask                  = _T("新建任务");
	g_sLangID_NewProject               = _T("sNewProject");
	g_sLangTxt_NewProject                  = _T("新建工程");
	g_sLangID_DeleteTask               = _T("sDeleteTask");
	g_sLangTxt_DeleteTask                  = _T("删除任务");
	g_sLangID_TaskArchive               = _T("sTaskArchive");
	g_sLangID_DeleteProject               = _T("sDeleteProject");
	g_sLangTxt_DeleteProject                  = _T("删除工程");
	g_sLangTxt_TaskArchive                  = _T("任务归档");
	g_sLangID_ProjectArchive               = _T("sProjectArchive");
	g_sLangTxt_ProjectArchive                  = _T("工程归档");
	g_sLangID_OpenProject               = _T("sOpenProject");
	g_sLangTxt_OpenProject                  = _T("打开工程");
	g_sLangID_CloseProject               = _T("sCloseProject");
	g_sLangTxt_CloseProject                  = _T("关闭工程");
	g_sLangID_TestRecordFile               = _T("sTestRecordFile");
	g_sLangTxt_TestRecordFile                 = _T("测试记录文件");
	g_sLangID_RecordFile               = _T("sRecordFile");
	g_sLangTxt_RecordFile                  = _T("记录文件大小");
	g_sLangID_LastAccessedTimes               = _T("sLastAccessedTimes");
	g_sLangTxt_LastAccessedTimes                 = _T("最后访问时间");
	g_sLangID_ReportFile               = _T("sReportFile");
	g_sLangTxt_ReportFile                   = _T("报告文件");
	g_sLangID_ReportFileSize               = _T("sReportFileSize");
	g_sLangTxt_ReportFileSize                  = _T("报告文件大小");
	g_sLangID_NewTask               = _T("sNewTask");
	g_sLangTxt_NewTask                  = _T("新任务");
	g_sLangID_EnterTask               = _T("sEnterTask");
	g_sLangTxt_EnterTask                  = _T("进入测试");
	g_sLangID_NewReport               = _T("sNewReport ");
	g_sLangTxt_NewReport                   = _T("新报告");

	g_sLangID_TestComplete               = _T("sTestComplete");
	g_sLangTxt_TestComplete                  = _T("测试完成");
	g_sLangID_TerminationTest               = _T("sTerminationTest");
	g_sLangTxt_TerminationTest                 = _T("终止测试");
	g_sLangID_Testing               = _T("sTesting");
	g_sLangTxt_Testing                  = _T("测试中");
	g_sLangID_UnTest               = _T("sUnTest");
	g_sLangTxt_UnTest                  = _T("未测试");
	g_sLangID_SystemPara               = _T("sSystemPara");
	g_sLangTxt_SystemPara                  = _T("系统参数");
	g_sLangID_CreatWordFail               = _T("sCreatWordFail");
	g_sLangTxt_CreatWordFail                  = _T("创建Word失败！导出任务报告失败！");
	g_sLangID_TestReport               = _T("sTestReport");
	g_sLangTxt_TestReport                 = _T("测试报告");
	g_sLangID_Conclusion               = _T("sConclusion");
	g_sLangTxt_Conclusion                  = _T("结论");
	g_sLangID_UnqualifiedItem               = _T("sUnqualifiedItem");
	g_sLangTxt_UnqualifiedItem                  = _T("有不合格项");
	g_sLangID_ViewPara               = _T("sViewPara");
	g_sLangTxt_ViewPara                  = _T("查看参数");
	g_sLangID_FctnGbNotFound               = _T("sFctnGbNotFound");
	g_sLangTxt_FctnGbNotFound                  = _T("函数GbUICreate入口地址没有找到");
	g_sLangID_DataBatch               = _T("sDataBatch");
	g_sLangTxt_DataBatch                  = _T("数据集遍历批量");
	g_sLangID_Developing               = _T("sDeveloping");
	g_sLangTxt_Developing                  = _T("开发中");
	g_sLangID_ReportManager               = _T("sReportManager");
	g_sLangTxt_ReportManager                  = _T("报告管理");
	g_sLangID_TestReady               = _T("sTestReady");
	g_sLangTxt_TestReady                  = _T("测试准备");
	g_sLangID_TestWork               = _T("sTestWork");
	g_sLangTxt_TestWork                   = _T("测试工作恢复");
	g_sLangID_CellpAdding               = _T("sCellpAdding");
	g_sLangTxt_CellpAdding                   = _T("单元格填充");
	g_sLangID_ColumnFillMmode               = _T("sColumnFillMmode");
	g_sLangTxt_ColumnFillMmode                   = _T("列填充模式");
	g_sLangID_HnagFillMmode               = _T("sHnagFillMmode");
	g_sLangTxt_HnagFillMmode                  = _T("行填充模式");
	g_sLangID_ParaVarious               = _T("sParaVarious");
	g_sLangTxt_ParaVarious                  = _T("参数变量");
	g_sLangID_Format               = _T("sFormat");
	g_sLangTxt_Format                  = _T("格式");
	g_sLangID_Id               = _T("sId");
	g_sLangTxt_Id                  = _T("ID");
	// g_sLangID_Variable               = _T("sVariable");
	// g_sLangTxt_Variable                  = _T("变量");
	g_sLangID_DataVariousDefin               = _T("sDataVariousDefin");
	g_sLangTxt_DataVariousDefin                  = _T("数据接口变量定义");

	g_sLangID_ProPaInf             = _T("sProPaInf");
	g_sLangTxt_ProPaInf            = _T("项目的路径信息");
	g_sLangID_TestProjInf          = _T("sTestProjInf");
	g_sLangTxt_TestProjInf         = _T("测试项目信息");
	g_sLangID_SetAsReport          = _T("sSetAsReport");
	g_sLangTxt_SetAsReport         = _T("设为最终报告");
	g_sLangID_ViewMessJud          = _T("sViewMessJud");
	g_sLangTxt_ViewMessJud         = _T("查看报文判断");
	g_sLangID_TestProTestRep       = _T("sTestProTestRep");
	g_sLangTxt_TestProTestRep      = _T("测试项目实验报告");
	g_sLangID_InstrutionInfo       = _T("sInstrutionInfo");
	g_sLangTxt_InstrutionInfo      = _T("说明信息");
	g_sLangID_GuideAutoWizardFile       = _T("sGuideAutoWizardFile");
	g_sLangTxt_GuideAutoWizardFile      = _T("作业指导书自动向导文件");

	g_sLangID_NextStep       = _T("sNextStep");
	g_sLangTxt_NextStep      = _T("下一步");
	g_sLangID_ClickToNextStep       = _T("sClickToNextStep");
	g_sLangTxt_ClickToNextStep      = _T("点击进入到向导的下一步骤");
	g_sLangID_OperCompleteToNext       = _T("sOperCompleteToNext");
	g_sLangTxt_OperCompleteToNext      = _T("操作完成，点击【下一步】按钮");
	g_sLangID_TestItemNotExist                 = _T("sTestItemNotExist");
	g_sLangTxt_TestItemNotExist             = _T("测试项目【%s】不存在");
	g_sLangID_SetItem                 = _T("sSetItem");
	g_sLangTxt_SetItem             = _T("设置项目【%s】\r\n设置通讯命令数据：数据集、参数数据");
	g_sLangID_DestRefData                 = _T("sDestRefData");
	g_sLangTxt_DestRefData             = _T("目标引用数据");
	g_sLangID_DataMap                 = _T("sDataMap");
	g_sLangTxt_DataMap            = _T("数据映射");
	g_sLangID_TestItem                 = _T("sTestItem");
	g_sLangTxt_TestItem            = _T("测试项目");
	g_sLangID_NumberGroup                 = _T("sNumberGroup");
	g_sLangTxt_NumberGroup            = _T("第%d组");
	g_sLangID_ItemClassName                = _T("sItemClassName");
	g_sLangTxt_ItemClassName            = _T("项目分类名称");
	g_sLangID_ItemClassId                 = _T("sItemClassId");
	g_sLangTxt_ItemClassId            = _T("项目分类ID");
	g_sLangID_BatchEnumGroup                 = _T("sBatchEnumGroup");
	g_sLangTxt_BatchEnumGroup            = _T("批量枚举组");
	g_sLangID_BatchItemNoName                = _T("sBatchItemNoName");
	g_sLangTxt_BatchItemNoName            = _T("批量项目没有输入名称");
	g_sLangID_BatchItemNoId                 = _T("sBatchItemNoId");
	g_sLangTxt_BatchItemNoId            = _T("批量项目没有输入ID");
	g_sLangID_BatchItemNoDataset                 = _T("sBatchItemNoDataset");
	g_sLangTxt_BatchItemNoDataset            = _T("批量项目没有关联数据集");
	g_sLangID_DatasetNotExist                 = _T("sDatasetNotExist");
	g_sLangTxt_DatasetNotExist            = _T("【%s】对应的数据集数据不存在");
	g_sLangID_DataMapNotOnly                 = _T("sDataMapNotOnly");
	g_sLangTxt_DataMapNotOnly            = _T("数据接口映射【%s】不唯一");
	g_sLangID_ChannelCfg                 = _T("sChannelCfg");
	g_sLangTxt_ChannelCfg            = _T("通道配置：%s");
	g_sLangID_InsertReportTem                 = _T("sInsertReportTem");
	g_sLangTxt_InsertReportTem            = _T("插入报告模板【%s】");
	g_sLangID_CannotInstant                 = _T("sCannotInstant");
	g_sLangTxt_CannotInstant            = _T("映射【%s】【%s】没有建立任何映射关系，不能被实例化！");
	g_sLangID_InsertTestTem                 = _T("sInsertTestTem");
	g_sLangTxt_InsertTestTem            = _T("插入测试模板【%s】");
	g_sLangID_CommCmdNoDataset                 = _T("sCommCmdNoDataset");
	g_sLangTxt_CommCmdNoDataset            = _T("通讯命令【%s】没有对应的数据集");
	g_sLangID_Initial                 = _T("sInitial");
	g_sLangTxt_Initial            = _T("初始化........");
	g_sLangID_DealSubTemTestPara                = _T("sDealSubTemTestPara");
	g_sLangTxt_DealSubTemTestPara            = _T("处理子模板测试参数........");
	g_sLangID_OpenedWizardFile                 = _T("sOpenedWizardFile");
	g_sLangTxt_OpenedWizardFile            = _T("打开的向导文件：\r\n【%s】\r\n子模板：\r\n【%s】\r\n与当前子模板：\r\n【%s】\r\n不一致！");
	g_sLangID_SelSubTem                = _T("sSelSubTem");
	g_sLangTxt_SelSubTem            = _T("选择子模板，点击按钮【打开】添加子模板，点击【取消】按钮结束选择");
	g_sLangID_SelTestSubTem                 = _T("sSelTestSubTem");
	g_sLangTxt_SelTestSubTem           = _T("选择测试子模板");
	g_sLangID_SelTestSubTemInsert                 = _T("sSelTestSubTemInsert");
	g_sLangTxt_SelTestSubTemInsert           = _T("选择测试子模板插入的位置，合法的位置为“设备”和“项目分类”");
	g_sLangID_SelTestSubTemInsert2                 = _T("sSelTestSubTemInsert2");
	g_sLangTxt_SelTestSubTemInsert2           = _T("%s: 选择测试子模板插入的位置");
	g_sLangID_SaveTestTem                 = _T("sSaveTestTem");
	g_sLangTxt_SaveTestTem           = _T("保存测试模板");
	g_sLangID_SaveTestTemWizardOver                 = _T("sSaveTestTemWizardOver");
	g_sLangTxt_SaveTestTemWizardOver           = _T("保存测试模板，结束向导");
	g_sLangID_SetTestTemAttr                 = _T("sSetTestTemAttr");
	g_sLangTxt_SetTestTemAttr           = _T("设置测试模板的属性");
	g_sLangID_SetTestTemAttr2                 = _T("sSetTestTemAttr2");
	g_sLangTxt_SetTestTemAttr2           = _T("设置测试模板的属性：主要设置测试功能文件、规约种类选择");
	g_sLangID_SetSubTemInterface                 = _T("sSetSubTemInterface");
	g_sLangTxt_SetSubTemInterface           = _T("设置子模板的接口，插入子模板到模板中");
	g_sLangID_SetDeviceDataModel                 = _T("sSetDeviceDataModel");
	g_sLangTxt_SetDeviceDataModel           = _T("设置设备数据模型");
	g_sLangID_SetDeviceAttr                = _T("sSetDeviceAttr");
	g_sLangTxt_SetDeviceAttr           = _T("设置设备的属性，建议将名称和ID设置为保护型号的名字");
	g_sLangID_SetDeviceDataType                 = _T("sSetDeviceDataType");
	g_sLangTxt_SetDeviceDataType           = _T("设置设备的数据模型，选择磁盘上已经存在的设备数据模型文件，此文件通过MMS客户端从保护装置枚举得到");
	g_sLangID_SetDeviceCharCurve                 = _T("sSetDeviceCharCurve");
	g_sLangTxt_SetDeviceCharCurve           = _T("设置设备的特性曲线，此步骤可以暂时不设置，设置子模板时再设置特性曲线");
	g_sLangID_SetDeviceAttr2                = _T("sSetDeviceAttr2");
	g_sLangTxt_SetDeviceAttr2           = _T(" ==>> 设置设备的属性");
	g_sLangID_SetDeviceDataType2                 = _T("sSetDeviceDataType2");
	g_sLangTxt_SetDeviceDataType2           = _T(" ==>> 设置设备的数据模型");
	g_sLangID_SetDeviceCharCurve2                 = _T("sSetDeviceCharCurve2");
	g_sLangTxt_SetDeviceCharCurve2           = _T(" ==>> 设置设备的特性曲线");
	g_sLangID_Execute                 = _T("sExecute");
	g_sLangTxt_Execute           = _T("执行");
	g_sLangID_CommCmdError                = _T("sCommCmdError");
	g_sLangTxt_CommCmdError           = _T("通讯命令【%s】错误");
	g_sLangID_DataPathNoData                 = _T("sDataPathNoData");
	g_sLangTxt_DataPathNoData           = _T("数据路径【%s】对应的数据不存在");
	g_sLangID_IdReplace                 = _T("sIdReplace");
	g_sLangTxt_IdReplace           = _T("【第%d个 共%d个】ID替换：【%s】==>>【%s】");
	g_sLangID_NameReplaceCompleted                = _T("sNameReplaceCompleted");
	g_sLangTxt_NameReplaceCompleted           = _T("名称替换完成");
	g_sLangID_ReplaceCompleted2                 = _T("sReplaceCompleted2");
	g_sLangTxt_ReplaceCompleted2           = _T("替换完成.......");
	g_sLangID_AddObjMatchUnsucc                 = _T("sAddObjMatchUnsucc");
	g_sLangTxt_AddObjMatchUnsucc          = _T("添加没有匹配成功的对象");
	g_sLangID_DealCommCmd                 = _T("sDealCommCmd");
	g_sLangTxt_DealCommCmd          = _T("处理通讯命令：%s");
	g_sLangID_RelNotOnly                = _T("sRelNotOnly");
	g_sLangTxt_RelNotOnly         = _T("【%s】关联关系不唯一");
	g_sLangID_DataInterfaceName                 = _T("sDataInterfaceName");
	g_sLangTxt_DataInterfaceName          = _T("数据接口名称");
	g_sLangID_DealMode                 = _T("sDealMode");
	g_sLangTxt_DealMode          = _T("处理模式");
	g_sLangID_StartValue                = _T("sStartValue");
	g_sLangTxt_StartValue         = _T("起始值");
	g_sLangID_StepNumber                = _T("sStepNumber");
	g_sLangTxt_StepNumber         = _T("步数");
	g_sLangID_SCLChannelName                 = _T("sSCLChannelName");
	g_sLangTxt_SCLChannelName          = _T("SCL通道名");
	g_sLangID_DataName                 = _T("sDataName");
	g_sLangTxt_DataName          = _T("数据名称");
	g_sLangID_ChannelIndex                = _T("sChannelIndex");
	g_sLangTxt_ChannelIndex         = _T("通道编号");
	g_sLangID_DatasetTraverse                 = _T("sDatasetTraverse");
	g_sLangTxt_DatasetTraverse          = _T("数据集遍历");
	g_sLangID_NumberArithmetic                = _T("sNumberArithmetic");
	g_sLangTxt_NumberArithmetic         = _T("数值等差变化");
	g_sLangID_InitOptimizeList                 = _T("sInitOptimizeList");
	g_sLangTxt_InitOptimizeList          = _T("7-1：初始化优化项目链表............");
	g_sLangID_InitPreTestList                = _T("sInitPreTestList");
	g_sLangTxt_InitPreTestList         = _T("7-2：初始化试验前测试准备项目链表............");
	g_sLangID_InitTestRecoverList                 = _T("sInitTestRecoverList");
	g_sLangTxt_InitTestRecoverList          = _T("7-3：初始化试验恢复项目链表............");
	g_sLangID_OptimizePreTestItem                = _T("sOptimizePreTestItem");
	g_sLangTxt_OptimizePreTestItem          = _T("7-4：优化试验前测试准备项目............");
	g_sLangID_OptimizeTestRecoverItem                = _T("sOptimizeTestRecoverItem");
	g_sLangTxt_OptimizeTestRecoverItem         = _T("7-5：优化试验恢复项目............");
	g_sLangID_OptimizeIecCfgDownload                 = _T("sOptimizeIecCfgDownload");
	g_sLangTxt_OptimizeIecCfgDownload          = _T("7-6：优化IEC61850配置下载............");
	g_sLangID_OptimizeSysParaEditItem                = _T("sOptimizeSysParaEditItem");
	g_sLangTxt_OptimizeSysParaEditItem         = _T("7-7：优化系统参数编辑项目............");
	g_sLangID_ItemClassAllSubItem                = _T("sItemClassAllSubItem");
	g_sLangTxt_ItemClassAllSubItem         = _T("项目分类的全部子项目（包含子分类）");
	g_sLangID_ItemClassSubItem                 = _T("sItemClassSubItem");
	g_sLangTxt_ItemClassSubItem          = _T("项目分类的子项目（不包含子分类）");
	g_sLangID_SelItemClassMode                = _T("sSelItemClassMode");
	g_sLangTxt_SelItemClassMode         = _T("选择项目分类以及子项目选择模式");
	g_sLangID_ImportTo                = _T("sImportTo");
	g_sLangTxt_ImportTo         = _T("导入到 %s");
	g_sLangID_NoDataObjDef                = _T("sNoDataObjDef");
	g_sLangTxt_NoDataObjDef         = _T("没有[%s]对应的数据对象定义");
	g_sLangID_FileNameWithout                = _T("sFileNameWithout");
	g_sLangTxt_FileNameWithout         = _T("文件名不能包含下列任何字符之一: \r\n  \\ / : * ? < > |");
	g_sLangID_FileMngr                = _T("sFileMngr");
	g_sLangTxt_FileMngr         = _T("文件管理");
	g_sLangID_Average                 = _T("sAverage");
	g_sLangTxt_Average            = _T("平均值");
	g_sLangID_LastOne                 = _T("sLastOne");
	g_sLangTxt_LastOne            = _T("最后一个");
	g_sLangID_ErrorMax                 = _T("sErrorMax");
	g_sLangTxt_ErrorMax            = _T("误差最大值");
	g_sLangID_Standdeviation                 = _T("sStanddeviation");
	g_sLangTxt_Standdeviation            = _T("标准差");
	g_sLangID_CommCmdCheckComplete                 = _T("sCommCmdCheckComplete");
	g_sLangTxt_CommCmdCheckComplete            = _T("通讯命令数据检查完成！");
	g_sLangID_CommCmdParaAbnormal                 = _T("sCommCmdParaAbnormal");
	g_sLangTxt_CommCmdParaAbnormal            = _T("通讯命令:\r\n%s\r\n\r\n参数异常，请手动修改。修改完成，点击“确定”继续\r\n");
	g_sLangID_DeleteInvalidPara       = _T("sDeleteInvalidPara");
	g_sLangTxt_DeleteInvalidPara   = _T("删除无效参数：【%s】=【%s】");
	g_sLangID_ElectricCheckComplete                 = _T("sElectricCheckComplete");
	g_sLangTxt_ElectricCheckComplete            = _T("电气量测试功能数据检查完成！");
	g_sLangID_ElectricParaAbnormal                 = _T("sElectricParaAbnormal");
	g_sLangTxt_ElectricParaAbnormal            = _T("电气量测试:\r\n%s\r\n\r\n参数异常，请手动修改。修改完成，点击“确定”继续\r\n");
	g_sLangID_OpenWordFail                 = _T("sOpenWordFail");
	g_sLangTxt_OpenWordFail            = _T("打开Word失败");
	g_sLangID_HaveMarkSureReplace       = _T("sHaveMarkSureReplace");
	g_sLangTxt_HaveMarkSureReplace   = _T("当前位置有标签，确定替换");
	g_sLangID_NoWord                 = _T("sNoWord");
	g_sLangTxt_NoWord            = _T("没有安装Word");
	g_sLangID_OpenDocFail                 = _T("sOpenDocFail");
	g_sLangTxt_OpenDocFail            = _T("打开文档失败！");
	g_sLangID_BookMarkExist                 = _T("sBookMarkExist");
	g_sLangTxt_BookMarkExist            = _T("书签【%s】在数据报告中【%s】已经存在");
	g_sLangID_InsertTitleFail       = _T("sInsertTitleFail");
	g_sLangTxt_InsertTitleFail   = _T("插入标题【%s】失败");
	// g_sLangID_Title                 = _T("sTitle");
	// g_sLangTxt_Title            = _T("标题 %d");
	g_sLangID_InsertFail                 = _T("sInsertFail");
	g_sLangTxt_InsertFail            = _T("插入%s失败");
	g_sLangID_Finish                 = _T("sFinish");
	g_sLangTxt_Finish            = _T("完 成");
	g_sLangID_Unqualified2                 = _T("sUnqualified2");
	g_sLangTxt_Unqualified2            = _T("[%s]不合格");
	g_sLangID_TestFinish                 = _T("sTestFinish");
	g_sLangTxt_TestFinish            = _T("********测试结束********");


	g_sLangID_SelNoArea = _T("sSelNoArea");
	g_sLangTxt_SelNoArea = _T("没有选择表格区域！");
	g_sLangID_SelOnlyOneRowCol = _T("sSelOnlyOneRowCol");
	g_sLangTxt_SelOnlyOneRowCol = _T("选择表格区域只有一行一列，不具备批量插入条件！");
	g_sLangID_ColRowsNotSame = _T("sColRowsNotSame");
	g_sLangTxt_ColRowsNotSame = _T("选择表格区域每列的行列数不相同，不具备批量插入条件！");
	g_sLangID_SelNoItem = _T("sSelNoItem");
	g_sLangTxt_SelNoItem = _T("没有选择测试项目！");
	g_sLangID_MustSelYcItem = _T("sMustSelYcItem");
	g_sLangTxt_MustSelYcItem = _T("请选择包含遥测项目的项目分类！");
	g_sLangID_HasNoMacroTest = _T("sHasNoMacroTest");
	g_sLangTxt_HasNoMacroTest = _T("【%s】下没有电气量测试功能");
	g_sLangID_HasNoYcItem = _T("sHasNoYcItem");
	g_sLangTxt_HasNoYcItem = _T("【%s】下没有遥测测试电气量测试功能");
	g_sLangID_RepeatTimeNotSame = _T("sRepeatTimeNotSame");
	g_sLangTxt_RepeatTimeNotSame = _T("【%s】的重复次数%d与【%s】的重复次数%d不一致!");
	g_sLangID_MacroTestNotSame = _T("sMacroTestNotSame");
	g_sLangTxt_MacroTestNotSame = _T("【%s】与【%s】的测试功能不一致!");

	g_sLangID_AttrID_Value = _T("sAttrID_Value");
	g_sLangTxt_AttrID_Value = _T("数值(value)");
	g_sLangID_AttrID_Name = _T("sAttrID_Name");
	g_sLangTxt_AttrID_Name = _T("名称");

	g_sLangID_TestPrjNotFinish = _T("sTestPrjNotFinish");
	g_sLangTxt_TestPrjNotFinish = _T("测试报告[%s]没有测试完成");

	g_sLangID_RsltExprScript = _T("sRsltExprScript");
	g_sLangTxt_RsltExprScript = _T("结果判断表达式");
	g_sLangID_IgnoreAbnormal       = _T("sIgnoreAbnormal");
	g_sLangTxt_IgnoreAbnormal  = _T("忽略异常");

	g_sLangID_SGroupS           = _T("sSGroupS");
	g_sLangTxt_SGroupS          = _T("%s%s-组%d.%s");
	g_sLangID_SGroupFileName           = _T("sSGroupFnm");
	g_sLangTxt_SGroupFileName          = _T("%s-组%d");

// 	g_sLangID_IEC_Open                 =_T("IEC_Open");
// 	g_sLangTxt_IEC_Open                 =_T("打开");
	g_sLangID_IEC_AddSCL                =_T("IEC_AddSCL");
	g_sLangTxt_IEC_AddSCL                =_T("新增SCL");
	g_sLangID_IEC_DeleteNow              =_T("IEC_DeleteNow");
	g_sLangTxt_IEC_DeleteNow              =_T("删除当前");
	g_sLangID_IEC_Emptyout                =_T("IEC_Emptyout");
	g_sLangTxt_IEC_Emptyout                =_T("清空全部");

 	g_sLangID_Native_FileName = _T("Native_FileName");	
	g_sLangTxt_Native_FileName = _T("文件名称");
	g_sLangID_FilePath						 =_T("FilePath");
	g_sLangTxt_FilePath						 =_T("文件路径");
	g_sLangID_FileSize                       =_T("FileSize");
	g_sLangTxt_FileSize                      =_T("文件大小");
// 	g_sLangID_Native_Choose = _T("Native_Choose");
// 	g_sLangTxt_Native_Choose = _T("选择");

	g_sLangID_Dates							=_T("Dates");
	g_sLangTxt_Dates						=_T("日期");

// 	g_sLangID_Native_Form =_T("Native_Form"); //格式
// 	g_sLangTxt_Native_Form = _T("格式");


	g_sLangID_currentfile                                                                     =_T("currentfile");
	g_sLangTxt_currentfile                                                                     =_T("当前文件(%s)已打开.");
	g_sLangID_parsefile                                                                        =_T("parsefile");
	g_sLangTxt_parsefile                                                                        =_T("生成解析文件(%s)失败,可能原SCL文件名包含中文信息导致.");
	g_sLangID_confirmfiles                                                                      =_T("confirmfiles");
	g_sLangTxt_confirmfiles                                                                      =_T("请确认,是否清空全部SCL文件？");
	g_sLangID_IEDdialog                                                                          =_T("IEDdialog");
	g_sLangTxt_IEDdialog                                                                         =_T("IED选择对话框");
	g_sLangID_sameopen                                                                           =_T("sameopen");
	g_sLangTxt_sameopen                                                                           =_T("【%s】与【%s】使用相同的开入【%s】.");

	g_sLangID_Native_ChooseOpenFile = _T("Native_ChooseOpenFile");
	g_sLangTxt_Native_ChooseOpenFile = _T("选择需要打开的文件");

	g_sLangID_Gradient_ShowUpath  = _T("Gradient_ShowUpath"); //LCQ
	g_sLangTxt_Gradient_ShowUpath  = _T("显示U盘路径");

	g_sLangID_warning = _T("warning");
	g_sLangTxt_warning = _T("警告");

	g_sLangID_UpdataFail                 = _T("sUpdataFail");
	g_sLangTxt_UpdataFail                = _T("测试仪更新:查询[系统标识:%d,版本标识:%d]更新信息失败!");
	g_sLangID_DownloadFile				 = _T("sDownloadFile");
	g_sLangTxt_DownloadFile              = _T("测试仪更新:查询信息完成，开始下载文件，请稍后...[系统标识:%d,版本标识:%d]");
	g_sLangID_DownloadFail               = _T("sDownloadFail");
	g_sLangTxt_DownloadFail              = _T("测试仪更新:下载版本文件[%s]失败!");
	g_sLangID_DownloadCompress           = _T("sDownloadCompress ");
	g_sLangTxt_DownloadCompress          = _T("测试仪更新:下载版本文件[%s]完成,准备解压缩!");
	g_sLangID_LocalUpgrades              = _T("sLocalUpgrades");
	g_sLangTxt_LocalUpgrades             = _T("测试仪更新:已结束与云平台交互,开始解压缩更新包并进行本地升级!");
	g_sLangID_Reboot                     = _T("sReboot");
	g_sLangTxt_Reboot                    = _T("测试仪更新:升级成功后,需将测试仪重启,请稍等......");	
	g_sLangID_UnpackSucc                 = _T("sUnpackSucc");
	g_sLangTxt_UnpackSucc                = _T("测试仪更新：解压本地更新包【%s】成功!");
	g_sLangID_UnpackFail                 = _T("sUnpackFail");
	g_sLangTxt_UnpackFail                = _T("测试仪更新：解压本地更新包【%s】失败!");
	g_sLangID_Update_UpdateSuccess       = _T("sUpdate_UpdateSuccess");
    g_sLangTxt_Update_UpdateSuccess =_T("程序升级成功，请手动重启仪器");
	g_sLangID_Escalating				 = _T("sEscalating");
	g_sLangTxt_Escalating			     = _T("正在准备升级文件，请稍后...");
    g_sLangID_TesterUpdate				 = _T("sTesterUpdate");
    g_sLangTxt_TesterUpdate		         = _T("测试仪更新：已更新%.02f%%");
	g_sLangID_BackupSucc			     = _T("sBackupSucc");
	g_sLangTxt_BackupSucc				 = _T("测试仪更新：文件【%s】备份成功!");
	g_sLangID_BackupFail				 = _T("sBackupFail");
	g_sLangTxt_BackupFail				 = _T("测试仪更新：文件【%s】备份失败!");
	g_sLangID_CopySucc				     = _T("sCopySucc");
	g_sLangTxt_CopySucc				     = _T("测试仪更新：文件【%s】拷贝成功!");
	g_sLangID_TesterUpdataFail			 = _T("sTesterUpdataFail");
	g_sLangTxt_TesterUpdataFail			 = _T("测试仪更新：文件【%s】更新失败!");

	g_sLangID_ExpSucc = _T("ExpSucc");
	g_sLangTxt_ExpSucc = _T("导出成功");
	g_sLangID_ExpFail = _T("ExpFail");
	g_sLangTxt_ExpFail = _T("导出失败");
	g_sLangID_ImpSucc = _T("ImpSucc");
	g_sLangTxt_ImpSucc = _T("导入成功");
	g_sLangID_ImpFail = _T("ImpFail");
	g_sLangTxt_ImpFail = _T("导入失败");

	g_sLangID_RemainingMemorySize = _T("RemainingMemorySize");
	g_sLangTxt_RemainingMemorySize = _T("当前系统剩余内存大小%lu B.");
	g_sLangID_InsufficientSystemMemory = _T("InsufficientSystemMemory");
	g_sLangTxt_InsufficientSystemMemory = _T("当前系统剩余内存不足");
	g_sLangID_ExistenceSCDFiles = _T("ExistenceSCDFiles");
	g_sLangTxt_ExistenceSCDFiles = _T("当前存在同名SCD文件，是否继续？");
	g_sLangID_NoExistenceSCLFiles = _T("NoExistenceSCLFiles");
	g_sLangTxt_NoExistenceSCLFiles = _T("当前文件(%s)没有扩展名不是SCL文件.");

	g_sLangID_AnalysisSCLFiles = _T("AnalysisSCLFiles");
	g_sLangTxt_AnalysisSCLFiles = _T("SCL解析");
	g_sLangID_LoadSCLFiles = _T("LoadSCLFiles");
	g_sLangTxt_LoadSCLFiles = _T("正在加载SCL文件...");
	g_sLangID_LoadSCLFilesProgressBar = _T("LoadSCLFilesProgressBar");
	g_sLangTxt_LoadSCLFilesProgressBar = _T("SCL加载进度条");

	g_sLangID_SaveSCLFiles = _T("SaveSCLFiles");
	g_sLangTxt_SaveSCLFiles = _T("正在保存SCL配置...");

	g_sLangID_State_No = _T("State_No");
	g_sLangTxt_State_No = _T("否");
	g_sLangID_State_Yes = _T("State_Yes");
	g_sLangTxt_State_Yes = _T("是");
	g_sLangID_Expr = _T("Expr");//Expr
	g_sLangTxt_Expr = _T("表达式（Expr）");//表达式（Expr）

	g_sLangID_AutoTest_SvrName = _T("sAutoTest_SvrName");
	g_sLangTxt_AutoTest_SvrName = _T("自动测试服务名称");
	g_sLangID_AutoTest_SvrVersion = _T("sAutoTest_SvrVersion");
	g_sLangTxt_AutoTest_SvrVersion = _T("自动测试服务版本");

	//国际版移植 20250207 xueyangfan
	g_sLangID_Xrio_EnterNumbers =_T("Xrio_EnterNumbers");
	g_sLangTxt_Xrio_EnterNumbers =_T("请输入一个数字。");
	g_sLangID_Xrio_ValueLessThanOREqual =_T("Xrio_ValueLessThanOREqual");
	g_sLangTxt_Xrio_ValueLessThanOREqual =_T("值必须 <= ");
	g_sLangID_Xrio_ValueGreaterThanOREqual =_T("Xrio_ValueGreaterThanOREqual");
	g_sLangTxt_Xrio_ValueGreaterThanOREqual =_T("值必须 >= ");
	g_sLangID_Xrio_InvalidDoublePrecisionValue = _T("Xrio_InvalidDoublePrecisionValue");
	g_sLangTxt_Xrio_InvalidDoublePrecisionValue = _T("无效的双精度值！");
	g_sLangID_Xrio_InvalidIntValue = _T("Xrio_InvalidIntValue");
	g_sLangTxt_Xrio_InvalidIntValue = _T("无效的整形值！");
	g_sLangID_Xrio_LogInfo_ParamDataType = _T("Xrio_LogInfo_ParamDataType");
	g_sLangTxt_Xrio_LogInfo_ParamDataType = _T("参数数据类型");
	g_sLangID_Xrio_LogInfo_NamePath = _T("Xrio_LogInfo_NamePath");
	g_sLangTxt_Xrio_LogInfo_NamePath = _T("名称路径");
	g_sLangID_Xrio_LogInfo_IDPath = _T("Xrio_LogInfo_IDPath");
	g_sLangTxt_Xrio_LogInfo_IDPath = _T("ID路径");
	g_sLangID_Xrio_LogInfo_InvalidParamDataType = _T("Xrio_LogInfo_InvalidParamDataType");
	g_sLangTxt_Xrio_LogInfo_InvalidParamDataType = _T("参数含无效数据类型！数据类型改为字符串型！");
	g_sLangID_Xrio_LogInfo_MinGreaterThanMax = _T("Xrio_LogInfo_MinGreaterThanMax");
	g_sLangTxt_Xrio_LogInfo_MinGreaterThanMax = _T("最小值大于最大值！");
	g_sLangID_Xrio_InvalidEnumValue = _T("Xrio_InvalidEnumValue");
	g_sLangTxt_Xrio_InvalidEnumValue = _T("无效的枚举值！");
	g_sLangID_Xrio_InvalidBinaryValue = _T("Xrio_InvalidBinaryValue");
	g_sLangTxt_Xrio_InvalidBinaryValue = _T("无效的二进制值！");

}


CString g_sLangID_OpenTemplate             ;//= _T("sOpenTemplate");
CString g_sLangTxt_OpenTemplate            ;//= _T("打开模板");
CString g_sLangID_OpenPowerTestTemplate             ;//= _T("sOpenPowerTestTemplate");
CString g_sLangTxt_OpenPowerTestTemplate            ;//= _T("打开PowerTest模板");
CString g_sLangID_OpenSubTemplate          ;//= _T("sOpenSubTemplate");
CString g_sLangTxt_OpenSubTemplate         ;//= _T("打开子模板");

// CString g_sLangID_TraProtocol              ;//= _T("sTraProtocol");
// CString g_sLangTxt_TraProtocol             ;//= _T("传统规约");
// CString g_sLangID_61850Protocol            ;//= _T("s61850Protocol");
// CString g_sLangTxt_61850Protocol           ;//= _T("61850规约");
CString g_sLangID_Edit                     ;//= _T("sEdit");
CString g_sLangTxt_Edit                    ;//= _T("编辑");
// CString g_sLangID_Browse                   ;//= _T("sBrowse");
// CString g_sLangTxt_Browse                  ;//= _T("浏览");

CString g_sLangID_SelNone                  ;//= _T("sSelNone");
CString g_sLangTxt_SelNone                 ;//= _T("全不选");
CString g_sLangID_TestTask                 ;//= _T("sTestTask");
CString g_sLangTxt_TestTask                ;//= _T("测试任务");

CString g_sLangID_ExterScript              ;//= _T("sExterScript");
CString g_sLangTxt_ExterScript             ;//= _T("外部脚本库文件");
CString g_sLangID_InterScript              ;//= _T("sInterScript");
CString g_sLangTxt_InterScript             ;//= _T("模板内部脚本库");

CString g_sLangID_Attribute                ;//= _T("sAttribute");
CString g_sLangTxt_Atrribute               ;//= _T("属性");
CString g_sLangID_Times                    ;//= _T("sTimes");
CString g_sLangTxt_Times                   ;//= _T("次数");
CString g_sLangID_DataPro                  ;//= _T("sDataPro");
CString g_sLangTxt_DataPro                 ;//= _T("数据处理");
CString g_sLangID_TestTemplateFile         ;//= _T("sTestTemplateFile");
CString g_sLangTxt_TestTemplateFile        ;//= _T("测试模板文件");
CString g_sLangID_TestSubTemplateFile      ;//= _T("sTestSubTemplateFile");
CString g_sLangTxt_TestSubTemplateFile     ;//= _T("测试子模板文件");
CString g_sLangID_ReportTemplateFile      ;//= _T("sReportTemplateFile");
CString g_sLangTxt_ReportTemplateFile     ;//= _T("报告模板文件");
//
CString g_sLangID_ReportDefinition         ;//= _T("sReportDefinition");
CString g_sLangTxt_ReportDefinition        ;//= _T("报表定义");
CString g_sLangID_TagManagement            ;//= _T("sTagManagement");
CString g_sLangTxt_TagManagement           ;//= _T("标签管理");
CString g_sLangID_LetterForm               ;//= _T("sLetterForm");
CString g_sLangTxt_LetterForm              ;//= _T("宋体");
CString g_sLangID_ViewDevPara              ;//= _T("sViewDevPara");
CString g_sLangTxt_ViewDevPara             ;//= _T("查看设备参数");
CString g_sLangID_TestInlegibleItems      ;//= _T("sTestInlegibleItems");
CString g_sLangTxt_TestInlegibleItems    ;//= _T("测试全部不合格项目");
CString g_sLangID_TestCurrtItem            ;//= _T("sTestCurrtItem");
CString g_sLangTxt_TestCurrtItem           ;//= _T("测试当前项目");
CString g_sLangID_TestCurrtItemDev         ;//= _T("sTestCurrtItemDev");
CString g_sLangTxt_TestCurrtItemDev        ;//= _T("测试当前项目-装置独立测试");
CString g_sLangID_TestCurrtItemStart       ;//= _T("sTestCurrtItemStart");
CString g_sLangTxt_TestCurrtItemStart      ;//= _T("从当前项目开始测试");
CString g_sLangID_ParaMdf                  ;//= _T("sParaMdf");
CString g_sLangTxt_ParaMdf                 ;//= _T("参数修改");
CString g_sLangID_UpdataPara               ;//= _T("sUpdataPara");
CString g_sLangTxt_UpdataPara              ;//= _T("从模板更新参数");
CString g_sLangID_UpdataParaToGb               ;//= _T("sUpdataParaToGb");
CString g_sLangTxt_UpdataParaToGb              ;//= _T("更新参数至模板");
CString g_sLangID_ViewReport               ;//= _T("sViewReport");
CString g_sLangTxt_ViewReport              ;//= _T("查看报告");
CString g_sLangID_ViewRecordFile           ;//= _T("sViewRecordFile");
CString g_sLangTxt_ViewRecordFile          ;//= _T("查看录波文件");
CString g_sLangID_ViewCharCurve            ;//= _T("sViewCharCurve");
CString g_sLangTxt_ViewCharCurve           ;//= _T("查看特性曲线");
CString g_sLangID_ExpdNodes                ;//= _T("sExpdNodes");
CString g_sLangTxt_ExpdNodes               ;//= _T("展开全部子节点");

CString g_sLangID_ComictnComm              ;//= _T("sComictnComm");
CString g_sLangTxt_ComictnComm             ;//= _T("通讯命令");
CString g_sLangID_ComictnFront             ;//= _T("sComictnFront");
CString g_sLangTxt_ComictnFront            ;//= _T("通讯前延时");
CString g_sLangID_ComictnLater             ;//= _T("sComictnLater");
CString g_sLangTxt_ComictnLater            ;//= _T("通讯后延时");
CString g_sLangID_ComputMode               ;//= _T("sComputMode");
CString g_sLangTxt_ComputMode              ;//= _T("计算模式");
CString g_sLangID_ComictnTime              ;//= _T("sComictnTime");
CString g_sLangTxt_ComictnTime             ;//= _T("通讯次数");
CString g_sLangID_Text                     ;//= _T("sText");
CString g_sLangTxt_Text                    ;//= _T("文本");

CString g_sLangID_CreatTestMngFail                     ;//= _T("sCreatTestMngFail");
CString g_sLangTxt_CreatTestMngFail                    ;//= _T("创建测试仪管理组件失败");
CString g_sLangID_CreatTestAbnom                       ;//= _T("sCreatTestAbnom");
CString g_sLangTxt_CreatTestAbnom                      ;//= _T("创建测试仪通讯组件出现异常");
CString g_sLangID_CreatTestCmtFail                     ;//= _T("sCreatTestCmtFail");
CString g_sLangTxt_CreatTestCmtFail                    ;//= _T("创建测试仪通讯组件失败");
CString g_sLangID_NoPrtcCpnt                           ;//= _T("sNoPrtcCpnt");
CString g_sLangTxt_NoPrtcCpnt                          ;//= _T("没有注册规约引擎组件");
CString g_sLangID_CreatPrtcFail                        ;//= _T("sCreatPrtcFail");
CString g_sLangTxt_CreatPrtcFail                       ;//= _T("创建规约通讯设备失败");
CString g_sLangID_FileOpenFalseS                       ;//= _T("sFileOpenFalseS");
CString g_sLangTxt_FileOpenFalseS                      ;//= _T("打开文件\"%s\"出错");
CString g_sLangID_TestFileOpenFalseS                   ;//= _T("sTestFileOpenFalseS");
CString g_sLangTxt_TestFileOpenFalseS                  ;//= _T("打开试验文件\"%s\"出错");
CString g_sLangID_CommunItemD                          ;//= _T("sCommunItemD");
CString g_sLangTxt_CommunItemD                         ;//= _T("通讯命令项目个数：%d    电气量项目个数：%d");
CString g_sLangID_TestStopS                            ;//= _T("sTestStopS");
CString g_sLangTxt_TestStopS                           ;//= _T("【%s】测试停止");
CString g_sLangID_CommunIgnored                        ;//= _T("sCommunIgnored");
CString g_sLangTxt_CommunIgnored                       ;//= _T("忽略的电气量测试功能消息......");
CString g_sLangID_OnlineFail                           ;//= _T("sOnlineFail");
CString g_sLangTxt_OnlineFail                          ;//= _T("联机失败");
CString g_sLangID_TestStartInf                         ;//= _T("sTestStartInf");
CString g_sLangTxt_TestStartInf                        ;//= _T("------收到电气量测试开始消息【%s】");
CString g_sLangID_ParaDnldFail                         ;//= _T("sParaDnldFail");
CString g_sLangTxt_ParaDnldFail                        ;//= _T("------参数下载失败");
CString g_sLangID_TestUnsuptFctn                       ;//= _T("sTestUnsuptFctn");
CString g_sLangTxt_TestUnsuptFctn                      ;//= _T("------测试仪器底层功能接口不支持测试功能[%s]");
CString g_sLangID_TestOverTimeS                        ;//= _T("sTestOverTimeS");
CString g_sLangTxt_TestOverTimeS                       ;//= _T("------测试仪器底层测试功能[%s]测试超时, %d ms后重新测试");
CString g_sLangID_CommunOverTime                       ;//= _T("sCommunOverTime");
CString g_sLangTxt_CommunOverTime                      ;//= _T("通讯超时，测试终止！");
CString g_sLangID_CommunTestStop                       ;//= _T("sCommunTestStop");
CString g_sLangTxt_CommunTestStop                      ;//= _T("通讯过程中出现错误，测试终止");
CString g_sLangID_ReCommunD                            ;//= _T("sReCommunD");
CString g_sLangTxt_ReCommunD                           ;//= _T("通讯过程中出现错误，重新通讯第%d次，共%d次");
CString g_sLangID_CommunFalse                          ;//= _T("sCommunFalse");
CString g_sLangTxt_CommunFalse                         ;//= _T("通讯过程中出现错误，pCommCmd;//=;//=NULL");

CString g_sLangID_StartCommun                          ;//= _T("sStartCommun");
CString g_sLangTxt_StartCommun                         ;//= _T("连接设备成功，开始执行通讯命令");
CString g_sLangID_ContNextItem                         ;//= _T("sContNextItem");
CString g_sLangTxt_ContNextItem                        ;//= _T("继续连接下一个设备");
CString g_sLangID_TestContS                     ;//= _T("sTestContS");
CString g_sLangTxt_TestContS                    ;//= _T("【%s】：【%s】忽略通讯过程中出现错误，测试继续");
CString g_sLangID_TestStop3                     ;//= _T("sTestStop3");
CString g_sLangTxt_TestStop3                    ;//= _T("通讯引擎异常，测试终止");
CString g_sLangID_ReportExpSucc                     ;//= _T("sReportExpSucc");
CString g_sLangTxt_ReportExpSucc                    ;//= _T("报告导出成功：\r\n");
CString g_sLangID_NoTestItem                     ;//= _T("sNoTestItem");
CString g_sLangTxt_NoTestItem                    ;//= _T("没有需要测试的项目！");
CString g_sLangID_ItemTestTimeD                     ;//= _T("sItemTestTimeD");
CString g_sLangTxt_ItemTestTimeD                    ;//= _T("------项目[%s]第%d次测试，共%d次");
CString g_sLangID_ItemTestTimeD2                     ;//= _T("sItemTestTimeD2");
CString g_sLangTxt_ItemTestTimeD2                    ;//= _T("------项目[%s]第1次测试，共1次");
CString g_sLangID_Communtioning                     ;//= _T("sCommuntioning ");
CString g_sLangTxt_Communtioning                    ;//= _T("通讯中.......");
CString g_sLangID_MdfParaData                     ;//= _T("sMdfParaData");
CString g_sLangTxt_MdfParaData                   ;//= _T("调试子模板方式，请手动修改保护装置的参数数据");
CString g_sLangID_CommunTestTimeD                     ;//= _T("sCommunTestTimeD");
CString g_sLangTxt_CommunTestTimeD                    ;//= _T("----%s通讯命令[%s]第%d次测试，共%d次");
CString g_sLangID_CommunCmdS                     ;//= _T("sCommunCmdS");
CString g_sLangTxt_CommunCmdS                    ;//= _T("----%s通讯命令[%s]");
CString g_sLangID_CommunCmdItem                     ;//= _T("sCommunCmdItem");
CString g_sLangTxt_CommunCmdItem                    ;//= _T("----------%s通讯命令项目[%s]");
CString g_sLangID_CallRecordFail                     ;//= _T("sCallRecordFail");
CString g_sLangTxt_CallRecordFail                    ;//= _T("调用录波文件失败");
CString g_sLangID_ReadRecordFileS                     ;//= _T("sReadRecordFileS");
CString g_sLangTxt_ReadRecordFileS                    ;//= _T("读取录波文件：【%s】");
CString g_sLangID_TestStop4                     ;//= _T("sTestStop4");
CString g_sLangTxt_TestStop4                    ;//= _T("    测试项目时序发生错误，测试停止");
CString g_sLangID_TestCotrAbnom                     ;//= _T("sTestCotrAbnom");
CString g_sLangTxt_TestCotrAbnom                    ;//= _T("------测试仪控制程序发生异常");
CString g_sLangID_ItemUncmpltS                     ;//= _T("sItemUncmpltS");
CString g_sLangTxt_ItemUncmpltS                    ;//= _T("------电气量项目\"%s\"还有子项目没有完成");
CString g_sLangID_TestCotrAbnom2                     ;//= _T("sTestCotrAbnom2");
CString g_sLangTxt_TestCotrAbnom2                    ;//= _T("      测试仪控制程序发生异常");
CString g_sLangID_EltrcProjectCmplt                     ;//= _T("sEltrcProjectCmplt");
CString g_sLangTxt_EltrcProjectCmplt                    ;//= _T("     电气量项目完成");
CString g_sLangID_NotCommunCmd                     ;//= _T("sNotCommunCmd");
CString g_sLangTxt_NotCommunCmd                    ;//= _T("通讯过程中出现错误，不是通讯命令");
CString g_sLangID_CommunFalse2                     ;//= _T("sCommunFalse2");
CString g_sLangTxt_CommunFalse2                    ;//= _T("通讯过程中出现错误，Item;//=;//=NULL");
CString g_sLangID_TestItemFalse                     ;//= _T("sTestItemFalse");
CString g_sLangTxt_TestItemFalse                    ;//= _T("    >>>>>>>ExcuteCommCmd:测试项目时序发生错误");
CString g_sLangID_CommunParaFalse                     ;//= _T("sCommunParaFalse");
CString g_sLangTxt_CommunParaFalse                    ;//= _T("    通讯命令项目【%s】定义的参数【%s】错误");
CString g_sLangID_ItemDataUnexistS                     ;//= _T("sItemDataUnexistS");
CString g_sLangTxt_ItemDataUnexistS                    ;//= _T("项目(%s)通讯引擎设备数据模型()%s不存在");
CString g_sLangID_ItemDataUnexist                     ;//= _T("sItemDataUnexist");
CString g_sLangTxt_ItemDataUnexist                    ;//= _T("项目(%s)通讯引擎设备数据模型不存在");
CString g_sLangID_ItemDataUnexist2                     ;//= _T("sItemDataUnexist2");
CString g_sLangTxt_ItemDataUnexist2                    ;//= _T("项目【%s】通讯引擎设备数据集【%s】不存在");
CString g_sLangID_ItemDataUnexist3                     ;//= _T("sItemDataUnexist3");
CString g_sLangTxt_ItemDataUnexist3                    ;//= _T("项目【%s】设备数据模型【%s】不存在");
CString g_sLangID_ItemDataUnexist4                     ;//= _T("sItemDataUnexist4");
CString g_sLangTxt_ItemDataUnexist4                    ;//= _T("项目【%s】通讯引擎设备数据模型不存在");
CString g_sLangID_SytmTestFalse                     ;//= _T("sSytmTestFalse");
CString g_sLangTxt_SytmTestFalse                    ;//= _T("系统测试错误：ExcuteCommCmdOnDelayBeforeFinish");
CString g_sLangID_TestAbnrm2                     ;//= _T("sTestAbnrm2");
CString g_sLangTxt_TestAbnrm2                    ;//= _T("测试发生异常，试验过程中通讯命令没有对应的项目");
CString g_sLangID_TestAbnrm3                     ;//= _T("sTestAbnrm3");
CString g_sLangTxt_TestAbnrm3                    ;//= _T("测试发生异常，试验过程中通讯命令没有对应的项目[TestNextSubItems]");
CString g_sLangID_DealCommunRst                     ;//= _T("sDealCommunRst");
CString g_sLangTxt_DealCommunRst                    ;//= _T("----处理通讯命令【%s】结果");
CString g_sLangID_CreatRptFail                     ;//= _T("sCreatRptFail");
CString g_sLangTxt_CreatRptFail                    ;//= _T("创建报告对象失败");
CString g_sLangID_WaitRtest                     ;//= _T("sWaitRtest");
CString g_sLangTxt_WaitRtest                    ;//= _T("***********标准源告警，等待%d分钟后重新开始测试************");
CString g_sLangID_CommunUnExist                     ;//= _T("sCommunUnExist");
CString g_sLangTxt_CommunUnExist                    ;//= _T("通讯设备不存在");
CString g_sLangID_CmdFalse                     ;//= _T("sCmdFalse");
CString g_sLangTxt_CmdFalse                    ;//= _T("通讯配置文件【%s】不正确，命令【%s】错误");
CString g_sLangID_CommunEngineFalse                     ;//= _T("sCommunEngineFalse");
CString g_sLangTxt_CommunEngineFalse                    ;//= _T("    执行通讯过程：通讯引擎错误");
CString g_sLangID_PrtcEngineFalse                     ;//= _T("sPrtcEngineFalse ");
CString g_sLangTxt_PrtcEngineFalse                     ;//= _T("规约引擎设备数据对象错误");
CString g_sLangID_PathData                     ;//= _T("sPathData");
CString g_sLangTxt_PathData                     ;//= _T("路径：%s：数据个数%d");
CString g_sLangID_PathFalse                     ;//= _T("sPathFalse");
CString g_sLangTxt_PathFalse                    ;//= _T("路径错误：%s");
CString g_sLangID_FunctionError                     ;//= _T("sFunctionError");
CString g_sLangTxt_FunctionError                    ;//= _T("MtRegistPpDataMsg函数调用错误");
CString g_sLangID_TestFctnNo                     ;//= _T("sTestFctnNo");
CString g_sLangTxt_TestFctnNo                    ;//= _T("测试功能组件没有实现GetExternMsgRcvWnd、G方法etExternMsgID");
CString g_sLangID_UnCreatFctn                     ;//= _T("sTUnCreatFctn");
CString g_sLangTxt_UnCreatFctn                    ;//= _T("还没有创建测试功能组件！");
CString g_sLangID_CallRecordFail2                     ;//= _T("sCallRecordFail2");
CString g_sLangTxt_CallRecordFail2                    ;//= _T("调用录波命令失败");
CString g_sLangID_CallCmdFail                     ;//= _T("sCallCmdFail");
CString g_sLangTxt_CallCmdFail                    ;//= _T("调用命令失败");
//GuideBookDefine里的输出信息
CString g_sLangID_Qualified                       ;//= _T("sQualified");
CString g_sLangTxt_Qualified                      ;//= _T("合格");
CString g_sLangID_Unqualified                     ;//= _T("sUnqualified");
CString g_sLangTxt_Unqualified                    ;//= _T("不合格");
CString g_sLangID_ErrorID                     ;//= _T("sErrorID");
CString g_sLangTxt_ErrorID                    ;//= _T("错误的数据集ID");

CString g_sLangID_CurrZoneIndex                     ;//= _T("sCurrZoneIndex");
CString g_sLangTxt_CurrZoneIndex                    ;//= _T("当前定值区");
CString g_sLangID_ZoneIndex                     ;//= _T("sZoneIndex");
CString g_sLangTxt_ZoneIndex                    ;//= _T("%d区");

CString g_sLangID_ModifyAndSave                     ;//= _T("sModifyAndSave");
CString g_sLangTxt_ModifyAndSave                    ;//= _T("文件已修改，是否保存？");
//CharTemplateSelDlg里的输出信息
CString g_sLangID_SelCharCurve                     ;//= _T("sSelCharCurve");
CString g_sLangTxt_SelCharCurve                    ;//= _T("选择特性曲线");

CString g_sLangID_ItemType                     ;//= _T("sItemType");
CString g_sLangTxt_ItemType                    ;//= _T("项目类型");
CString g_sLangID_Status                     ;//= _T("sStatus");
CString g_sLangTxt_Status                    ;//= _T("状态");
CString g_sLangID_ItemPath                     ;//= _T("sItemPath");
CString g_sLangTxt_ItemPath                    ;//= _T("项目路径");
CString g_sLangID_ReportInf                     ;//= _T("sReportInf");
CString g_sLangTxt_ReportInf                    ;//= _T("报告信息");
CString g_sLangID_RetestQualified                     ;//= _T("sRetestQualified ");
CString g_sLangTxt_RetestQualified                     ;//= _T("重测合格");
CString g_sLangID_ElectrQuanPrjc                     ;//= _T("sElectrQuanPrjc");
CString g_sLangTxt_ElectrQuanPrjc                   ;//= _T("电气量项目");
CString g_sLangID_ArtificialProject                     ;//= _T("sArtificialProject");
CString g_sLangTxt_ArtificialProject                    ;//= _T("人工项目");

CString g_sLangID_ErrorDll                 ;//= _T("sErrorDll");
CString g_sLangTxt_ErrorDll             ;//= _T("错误的DLL调用 %s::%s(\"%s\", \"%s\")");
CString g_sLangID_DllUnStopTest                 ;//= _T("sDllUnStopTest");
CString g_sLangTxt_DllUnStopTest            ;//= _T("DLL调用(%s::%s)处理中，不能终止测试...");

CString g_sLangID_CrtPrtlEgnFail                ;//= _T("sCrtPrtlEgnFail");
CString g_sLangTxt_CrtPrtlEgnFail               ;//= _T("创建规约引擎[%s]失败");
CString g_sLangID_RlsPrtlEgnFail                ;//= _T("sRlsPrtlEgnFail");
CString g_sLangTxt_RlsPrtlEgnFail               ;//= _T("释放规约引擎[%s]失败");
CString g_sLangID_TestLogMngmt                ;//= _T("sTestLogMngmt");
CString g_sLangTxt_TestLogMngmt               ;//= _T("测试记录文件管理");
CString g_sLangID_TestRptRecodFile                ;//= _T("sTestRptRecodFile");
CString g_sLangTxt_TestRptRecodFile                ;//= _T("测试报告记录文件");
CString g_sLangID_TestRptFile                ;//= _T("sTestRptFile");
CString g_sLangTxt_TestRptFile               ;//= _T("测试报告文件");
CString g_sLangID_TestTaskFile                ;//= _T("sTestTaskFile");
CString g_sLangTxt_TestTaskFile               ;//= _T("测试任务文件");
CString g_sLangID_SngDeviceRpt                ;//= _T("sSngDeviceRpt");
CString g_sLangTxt_SngDeviceRpt               ;//= _T("单装置多通道测试报告文件");
CString g_sLangID_MulDeviceRpt                ;//= _T("sMulDeviceRpt");
CString g_sLangTxt_MulDeviceRpt               ;//= _T("多装置测试报告文件");
CString g_sLangID_SngDeviceRpt2                ;//= _T("sSngDeviceRpt2");
CString g_sLangTxt_SngDeviceRpt2               ;//= _T("单装置多规约测试报告文件");
CString g_sLangID_MdvMgrpFile                ;//= _T("sMdvMgrpFile");
CString g_sLangTxt_MdvMgrpFile              ;//= _T("多装置多通道测试报告文件");
CString g_sLangID_CreateCpntFail                ;//= _T("sCreateCpntFail");
CString g_sLangTxt_CreateCpntFail             ;//= _T("创建测试组件失败");
CString g_sLangID_MulDeviceRptS                ;//= _T("sMulDeviceRptS");
CString g_sLangTxt_MulDeviceRptS               ;//= _T("多装置测试报告文件(*.%s)|*.%s||");
CString g_sLangID_SngDeviceRptS                ;//= _T("sSngDeviceRptS");
CString g_sLangTxt_SngDeviceRptS               ;//= _T("单装置多规约测试报告文件(*.%s)|*.%s||");
CString g_sLangID_MdvMgrpFilter                ;//= _T("sMdvMgrpFilter");
CString g_sLangTxt_MdvMgrpFilter               ;//= _T("多装置多组测试报告文件(*.%s)|*.%s||");
CString g_sLangID_FileRightError                ;//= _T("sFileRightError");
CString g_sLangTxt_FileRightError               ;//= _T("文件【%s】版本错误！");
CString g_sLangID_DataIDUnext                ;//= _T("sDataIDUnext");
CString g_sLangTxt_DataIDUnext               ;//= _T("数据ID(%s)不存在");
CString g_sLangID_TestCpntCopy                ;//= _T("sTestCpntCopy");
CString g_sLangTxt_TestCpntCopy                ;//= _T("        [%s]:[%s]测试完成(复制报告)");
CString g_sLangID_SngDevMulPrtc                ;//= _T("sSngDevMulPrtc");
CString g_sLangTxt_SngDevMulPrtc               ;//= _T("单装置多规约-路径1：%s");
CString g_sLangID_SngDevMulPrtc2                ;//= _T("sSngDevMulPrtc2");
CString g_sLangTxt_SngDevMulPrtc2               ;//= _T("单装置多规约-路径2：%s");
CString g_sLangID_WaitSetting                ;//= _T("sWaitSetting");
CString g_sLangTxt_WaitSetting                ;//= _T("配置操作中，等待配置完成......");
CString g_sLangID_RecordFileRead                ;//= _T("sRecordFileRead");
CString g_sLangTxt_RecordFileRead                ;//= _T("读取录波文件前延时0秒,共%d秒");
CString g_sLangID_RecordFileRead2                ;//= _T("sRecordFileRead2");
CString g_sLangTxt_RecordFileRead2               ;//= _T("读取录波文件前延时%d秒,共%d秒");
CString g_sLangID_ErrorMessage_a                ;//= _T("sErrorMessage");
CString g_sLangTxt_ErrorMessage_a              ;//= _T("错误的处理消息...............");

CString g_sLangID_ChrctCurDefn                ;//= _T("sChrctCurDefn");
CString g_sLangTxt_ChrctCurDefn               ;//= _T("特性曲线定义");
CString g_sLangID_ParaCurve                ;//= _T("sParaCurve");
CString g_sLangTxt_ParaCurve              ;//= _T("曲线参数");
CString g_sLangID_ExpressionError                ;//= _T("sExpressionError");
CString g_sLangTxt_ExpressionError              ;//= _T("表达式【%s】 错误");
CString g_sLangID_ExpressionVariable                ;//= _T("sExpressionVariable");
CString g_sLangTxt_ExpressionVariable              ;//= _T("表达式变量【%s】 错误");
CString g_sLangID_Arc                ;//= _T("sArc");
CString g_sLangTxt_Arc              ;//= _T("圆弧（arc）");
CString g_sLangID_Arcp                ;//= _T("sArcp");
CString g_sLangTxt_Arcp              ;//= _T("圆弧（arcp）");
CString g_sLangID_Lens                ;//= _T("sLens");
CString g_sLangTxt_Lens              ;//= _T("透镜（lens）");
CString g_sLangID_Lined                ;//= _T("sLined");
CString g_sLangTxt_Lined              ;//= _T("线段（lined）");
CString g_sLangID_Liner                ;//= _T("sLiner");
CString g_sLangTxt_Liner              ;//= _T("射线（liner）");
CString g_sLangID_Line                ;//= _T("sLine");
CString g_sLangTxt_Line              ;//= _T("直线（line）");
CString g_sLangID_Linep                ;//= _T("sLinep");
CString g_sLangTxt_Linep              ;//= _T("直线（linep）");
CString g_sLangID_Mho                ;//= _T("sMho");
CString g_sLangTxt_Mho              ;//= _T("圆（mho）");

CString g_sLangID_Expr                ;//= _T("sExpr");
CString g_sLangTxt_Expr              ;//= _T("表达式（Expr）");

CString g_sLangID_I2T                ;//= _T("sI2T"); //I2T
CString g_sLangTxt_I2T                ;//= _T("反时限I2T)");
CString g_sLangID_IAC                ;//= _T("sIAC"); //IAC
CString g_sLangTxt_IAC                ;//= _T("反时限IAC");
CString g_sLangID_IEC                ;//= _T("sIEC"); //IEC
CString g_sLangTxt_IEC                ;//= _T("反时限IEC");
CString g_sLangID_IEEE                ;//= _T("sIEEE"); //IEEE
CString g_sLangTxt_IEEE                ;//= _T("反时限IEEE");
CString g_sLangID_INVOWNDEF                ;//= _T("sINVOWNDEF"); //INVOWNDEF
CString g_sLangTxt_INVOWNDEF                ;//= _T("反时限INVOWNDEF)");

CString g_sLangID_CordnPtn                ;//= _T("sCordnPtn");
CString g_sLangTxt_CordnPtn              ;//= _T("坐标模式");
CString g_sLangID_TestFctnSel                ;//= _T("sTestFctnSel");
CString g_sLangTxt_TestFctnSel              ;//= _T("测试功能选择");
//CString g_sLangID_Location                ;//= _T("sLocation ");
//CString g_sLangTxt_Location               ;//= _T("位置");
CString g_sLangID_RotationAngle                ;//= _T("sRotationAngle");
CString g_sLangTxt_RotationAngle              ;//= _T("旋转角度");
CString g_sLangID_CustomAngle                ;//= _T("sCustomAngle");
CString g_sLangTxt_CustomAngle              ;//= _T("自定义线角度");
CString g_sLangID_CoordinatesConflict                ;//= _T("sCoordinatesConflict");
CString g_sLangTxt_CoordinatesConflict             ;//= _T("特性曲线的坐标系“%s”与与图形管理模块的坐标系“%s”冲突");
CString g_sLangID_VariableID                ;//= _T("sVariableID");
CString g_sLangTxt_VariableID             ;//= _T("变量ID");
CString g_sLangID_AssociationValue                ;//= _T("sAssociationValue");
CString g_sLangTxt_AssociationValue              ;//= _T("关联定值");
CString g_sLangID_EdgeType                ;//= _T("sEdgeType");
CString g_sLangTxt_EdgeType              ;//= _T("边类型");
CString g_sLangID_TestPoint                ;//= _T("sTestPoint");
CString g_sLangTxt_TestPoint              ;//= _T("测点数");
CString g_sLangID_ErrorBand                ;//= _T("sErrorBand");
CString g_sLangTxt_ErrorBand              ;//= _T("误差带");
CString g_sLangID_EdgeDetails                ;//= _T("sEdgeDetails");
CString g_sLangTxt_EdgeDetails              ;//= _T("边详细信息");
CString g_sLangID_CoordinateSystem                ;//= _T("sCoordinateSystem");
CString g_sLangTxt_CoordinateSystem              ;//= _T("坐标系");
CString g_sLangID_DataMatchScript                ;//= _T("sDataMatchScript");
CString g_sLangTxt_DataMatchScript              ;//= _T("数据匹配脚本");
CString g_sLangID_Include                ;//= _T("sInclude");
CString g_sLangTxt_Include              ;//= _T("包含");
CString g_sLangID_CertainUninclude                ;//= _T("sCertainUninclude");
CString g_sLangTxt_CertainUninclude              ;//= _T("必须不包含");
CString g_sLangID_DataItfcMng                ;//= _T("sDataItfcMng");
CString g_sLangTxt_DataItfcMng               ;//= _T("数据接口管理");
CString g_sLangID_DataItfc               ;//= _T("sDataItfc");
CString g_sLangTxt_DataItfc               ;//= _T("数据接口");
CString g_sLangID_DataItfcVari               ;//= _T("sDataItfcVari");
CString g_sLangTxt_DataItfcVari               ;//= _T("数据接口变量");
CString g_sLangID_DataDataUnExist               ;//= _T("sDataDataUnExist");
CString g_sLangTxt_DataDataUnExist               ;//= _T("数据【%s】在数据集【%s】不存在");
CString g_sLangID_SoftStrap               ;//= _T("sSoftStrap");
CString g_sLangTxt_SoftStrap               ;//= _T("软压板");
CString g_sLangID_SetValue               ;//= _T("sSetValue");
CString g_sLangTxt_SetValue               ;//= _T("整定值");
CString g_sLangID_TestPara               ;//= _T("sTestPara");
CString g_sLangTxt_TestPara               ;//= _T("测试参数");
CString g_sLangID_ControlWord               ;//= _T("sControlWord");
CString g_sLangTxt_ControlWord               ;//= _T("控制字");
CString g_sLangID_OutputValue               ;//= _T("sOutputValue");
CString g_sLangTxt_OutputValue               ;//= _T("开出量");
CString g_sLangID_InputValue               ;//= _T("sInputValue");
CString g_sLangTxt_InputValue               ;//= _T("开入量");
CString g_sLangID_AnalogValue               ;//= _T("sAnalogValue");
CString g_sLangTxt_AnalogValue               ;//= _T("模拟量");

CString g_sLangID_PreDelay               ;//= _T("sPreDelay");
CString g_sLangTxt_PreDelay               ;//= _T("[%s]通讯前延时 (%s);//=;//=>>(%s)");
CString g_sLangID_PostDelay               ;//= _T("sPostDelay");
CString g_sLangTxt_PostDelay               ;//= _T("[%s]通讯后延时 (%s);//=;//=>>(%s)");
CString g_sLangID_RetryDelay               ;//= _T("sRetryDelay");
CString g_sLangTxt_RetryDelay               ;//= _T("[%s]重试前延时 (%s);//=;//=>>(%s)");
CString g_sLangID_CommunCmdUnExist               ;//= _T("sCommunCmdUnExist");
CString g_sLangTxt_CommunCmdUnExist              ;//= _T("通讯项目【%s】对应的通讯命令【%s】不存在");
CString g_sLangID_CommunCmdTimes               ;//= _T("sCommunCmdTimes");
CString g_sLangTxt_CommunCmdTimes               ;//= _T("通讯命令参数：%s");
CString g_sLangID_AllRecord               ;//= _T("sAllRecord");
CString g_sLangTxt_AllRecord               ;//= _T("全部报文：%s");
CString g_sLangID_StandardRecord               ;//= _T("sStandardRecord");
CString g_sLangTxt_StandardRecord               ;//= _T("标准报文：%s");
CString g_sLangID_NoRecord               ;//= _T("sNoRecord");
CString g_sLangTxt_NoRecord               ;//= _T("检索结果中没有报文【%s】;//=【%s】");
CString g_sLangID_NoDefin               ;//= _T("sNoDefin");
CString g_sLangTxt_NoDefin                ;//= _T("没有定义【%s】");
CString g_sLangID_RecordTimes               ;//= _T("sRecordTimes");
CString g_sLangTxt_RecordTimes               ;//= _T("报文【%s】【%s】时间差【%s】-【%s】;//=%d ms");
CString g_sLangID_TimeDiff               ;//= _T("sTimeDiff");
CString g_sLangTxt_TimeDiff                ;//= _T("CalSoeTimeEx：【%s，%s】【%s，%s】时间差【%s】-【%s】;//=%d ms");
CString g_sLangID_RecordResult               ;//= _T("sRecordResult");
CString g_sLangTxt_RecordResult               ;//= _T("报文验证的结果中没有【%s】");
CString g_sLangID_Surplus               ;//= _T("sSurplus");
CString g_sLangTxt_Surplus               ;//= _T("多余：%s");
CString g_sLangID_AllExpRecord               ;//= _T("sAllExpRecord");
CString g_sLangTxt_AllExpRecord               ;//= _T("全部出口报文：%s");
CString g_sLangID_Lack               ;//= _T("sLack");
CString g_sLangTxt_Lack                 ;//= _T("缺少：%s");
CString g_sLangID_CreatCharPara               ;//= _T("sCreatCharPara");
CString g_sLangTxt_CreatCharPara                 ;//= _T("创建特性曲线搜索线：参数ID“%s”不存在");
CString g_sLangID_Act               ;//= _T("sAct");
CString g_sLangTxt_Act                 ;//= _T("动作");
CString g_sLangID_Unact               ;//= _T("sUnact");
CString g_sLangTxt_Unact                  ;//= _T("未动作");
CString g_sLangID_UndefinDataPara               ;//= _T("sUndefinDataPara");
CString g_sLangTxt_UndefinDataPara                 ;//= _T("没有定义“%s”数据变量");
CString g_sLangID_ShowResult               ;//= _T("sShowResult");
CString g_sLangTxt_ShowResult                  ;//= _T("表达式【%s】计算结果为【%s】");
CString g_sLangID_ParaMdf2               ;//= _T("sParaMdf2");
CString g_sLangTxt_ParaMdf2               ;//= _T("[%s]参数修改： [%s] ;//=;//=[%s] ->[%s]");
CString g_sLangID_LibraryFile               ;//= _T("sLibraryFile");
CString g_sLangTxt_LibraryFile                  ;//= _T("库文件不存在【%s】");
CString g_sLangID_FctnNotFound               ;//= _T("sFctnNotFound");
CString g_sLangTxt_FctnNotFound                  ;//= _T("【%s】write_qrcode_file 函数入口没找到");
CString g_sLangID_MsgPrompt               ;//= _T("sMsgPrompt");
CString g_sLangTxt_MsgPrompt                  ;//= _T("消息提示");
CString g_sLangID_TaskGuide2               ;//= _T("sTaskGuide2");
CString g_sLangTxt_TaskGuide2                   ;//= _T("作业指导");
CString g_sLangID_DelCommunPara               ;//= _T("sDelCommunPara");
CString g_sLangID_Delete2               ;//= _T("sDelete2");
CString g_sLangTxt_Delete2                  ;//= _T("删除：%s");
CString g_sLangTxt_DelCommunPara                  ;//= _T("删除通讯命令的参数：%s");
CString g_sLangID_ItemRstError               ;//= _T("sItemRstError");
CString g_sLangTxt_ItemRstError                  ;//= _T("项目【%s】结果脚本语法错误");
CString g_sLangID_DataD2               ;//= _T("sDataD2");
CString g_sLangTxt_DataD2                  ;//= _T("数据%d【%s】");
CString g_sLangID_NullReport               ;//= _T("sNullReport");
CString g_sLangTxt_NullReport                  ;//= _T("空白报告部分使用“%s”替换");
CString g_sLangID_AdjustReport               ;//= _T("sAdjustReport");
CString g_sLangTxt_AdjustReport                  ;//= _T("调整报告区域");
CString g_sLangID_ReDTest               ;//= _T("sReDTest");
CString g_sLangTxt_ReDTest                  ;//= _T("重复第%d次测试");
CString g_sLangID_AreaDefin               ;//= _T("sAreaDefin");
CString g_sLangTxt_AreaDefin                 ;//= _T("区域定义");
CString g_sLangID_ScriptOverwrite               ;//= _T("sScriptOverwrite");
CString g_sLangTxt_ScriptOverwrite                 ;//= _T("脚本【%s】已经存在，并且两个脚本不一致，是否覆盖?");
CString g_sLangID_DiffTypeData               ;//= _T("sDiffTypeData");
CString g_sLangTxt_DiffTypeData                 ;//= _T("变量[%s]存在不同类型数据类型定义");
CString g_sLangID_FileNewest               ;//= _T("sFileNewest ");
CString g_sLangTxt_FileNewest                  ;//= _T("引用脚本【%s】不存在，请检查脚本库文件是否为最新版本");
CString g_sLangID_ParaError2               ;//= _T("sParaError2");
CString g_sLangTxt_ParaError2                 ;//= _T("ExitExe(\"%s\")参数错误");
CString g_sLangID_NoDataReport               ;//= _T("sNoDataReport");
CString g_sLangTxt_NoDataReport                 ;//= _T("没有报告数据");
CString g_sLangID_ParaError3               ;//= _T("sParaError3");
CString g_sLangTxt_ParaError3                ;//= _T("CalAinErr函数:绝对误差限[%f]和相对误差限[%f]都小于0，参数错误！");
CString g_sLangID_ParaError4               ;//= _T("sParaError4");
CString g_sLangTxt_ParaError4                ;//= _T("CalAinStdError函数:绝对误差限[%f]和相对误差限[%f]都小于0，参数错误！");
CString g_sLangID_ParaError5               ;//= _T("sParaError5");
CString g_sLangTxt_ParaError5                ;//= _T("CalVariationEror函数:误差限[%f]都小于0，参数错误！");
CString g_sLangID_FctnVariousUnExist               ;//= _T("sFctnVariousUnExist");
CString g_sLangTxt_FctnVariousUnExist                ;//= _T("CalVariationErrorEx函数:误差限变量[%s]不存在！");
CString g_sLangID_ErrFctnTest               ;//= _T("sErrFctnTest");
CString g_sLangTxt_ErrFctnTest                 ;//= _T("CalAinErr函数只用用于测试量值测试项目");
CString g_sLangID_ErrFctnUnExist               ;//= _T("sErrFctnUnExist");
CString g_sLangTxt_ErrFctnUnExist                 ;//= _T("CalAinErr函数数据【%s】不存在");
CString g_sLangID_StdErrorFctnTest               ;//= _T("sStdErrorFctnTest");
CString g_sLangTxt_StdErrorFctnTest                 ;//= _T("CalAinStdError函数只用用于测试量值测试项目");
CString g_sLangID_StdErrorFctnUnExist               ;//= _T("sStdErrorFctnUnExist");
CString g_sLangTxt_StdErrorFctnUnExist                 ;//= _T("CalAinStdError函数数据【%s】不存在");
CString g_sLangID_StdErrorFctnUnExistData               ;//= _T("sStdErrorFctnUnExistData");
CString g_sLangTxt_StdErrorFctnUnExistData                 ;//= _T("CalAinStdError函数数据【%d】不存在不够");
CString g_sLangID_FlterFctnTest               ;//= _T("sFlterFctnTest");
CString g_sLangTxt_FlterFctnTest                 ;//= _T("FlterCalErrorMax函数只用用于测试量值测试项目");
CString g_sLangID_FlterFctnUnExist               ;//= _T("sFlterFctnUnExist");
CString g_sLangTxt_FlterFctnUnExist                 ;//= _T("FlterCalErrorMax函数数据【%s】不存在");
CString g_sLangID_FlterFctnUnExist2               ;//= _T("sFlterFctnUnExist2");
CString g_sLangTxt_FlterFctnUnExist2                 ;//= _T("FlterCalErrorMax函数绝对误差数据【%s】不存在");
CString g_sLangID_VariationFctnTest               ;//= _T("sVariationFctnTest");
CString g_sLangTxt_VariationFctnTest                  ;//= _T("CalVariationErrorEx函数只用用于测量值测试项目");
CString g_sLangID_VariationFctnItem               ;//= _T("sVariationFctnItem");
CString g_sLangTxt_VariationFctnItem                  ;//= _T("CalVariationErrorEx函数所在的项目的父项目不是电气量项目");
CString g_sLangID_VariationFctnUnExist               ;//= _T("sVariationFctnUnExist");
CString g_sLangTxt_VariationFctnUnExist                 ;//= _T("CalVariationErrorEx函数数据【%s】不存在");
CString g_sLangID_VariationFctnUnExist2               ;//= _T("sVariationFctnUnExist2");
CString g_sLangTxt_VariationFctnUnExist2                 ;//= _T("CalVariationErrorEx函数基准值【%s】不存在");
CString g_sLangID_VariationFctnUnExist3               ;//= _T("sVariationFctnUnExist3");
CString g_sLangTxt_VariationFctnUnExist3                 ;//= _T("CalVariationErrorEx函数数据【实测值】【%s】不存在");
CString g_sLangID_VariationFctnUnExist4               ;//= _T("sVariationFctnUnExist4");
CString g_sLangTxt_VariationFctnUnExist4                 ;//= _T("CalVariationErrorEx函数数据【理论值】【%s】不存在");
CString g_sLangID_VariationFctnUnExist5               ;//= _T("sVariationFctnUnExist5");
CString g_sLangTxt_VariationFctnUnExist5                 ;//= _T("CalVariationErrorEx函数：测试参数基准值【%s】不存在");
CString g_sLangID_VariationFctnUnExist6               ;//= _T("sVariationFctnUnExist6");
CString g_sLangTxt_VariationFctnUnExist6                ;//= _T("CalVariationErrorEx函数数据【结果变量】【%s】不存在");
CString g_sLangID_ResultJude               ;//= _T("sResultJude");
CString g_sLangTxt_ResultJude                ;//= _T("实测值;//=%.5f  ,理论值;//=%.5f  ,基准值;//=%.5f  变差;//=%.5f 误差限;//=%.5f  结果判断;//=%d");
CString g_sLangID_SetItemIDUnExist               ;//= _T("sSetItemIDUnExist");
CString g_sLangTxt_SetItemIDUnExist                 ;//= _T("SetItemParaValue ID不存在,Path(%s) ID(%s) items");
CString g_sLangID_SetItemIDUnExist2               ;//= _T("sSetItemIDUnExist2");
CString g_sLangTxt_SetItemIDUnExist2                 ;//= _T("SetReportValue ID不存在,Path(%s) ID(%s) items");
CString g_sLangID_PathItem               ;//= _T("sPathItem");
CString g_sLangTxt_PathItem                ;//= _T("路径检索的项目不唯一,Path(%s) select %d items");
CString g_sLangID_PathItem2               ;//= _T("sPathItem2");
CString g_sLangTxt_PathItem2                 ;//= _T("路径指定的项目不存在,Path(%s) select %d items");
CString g_sLangID_CalCall               ;//= _T("sCalCall");
CString g_sLangTxt_CalCall                 ;//= _T("CalTmGap只能在通讯命令项目中被调用");
CString g_sLangID_NoDataReport2               ;//= _T("sNoDataReport2");
CString g_sLangTxt_NoDataReport2                 ;//= _T("CalTmGap:没有报告数据");
CString g_sLangID_PathNoItem               ;//= _T("sPathNoItem");
CString g_sLangTxt_PathNoItem                 ;//= _T("路径[%s]没有选择的项目");
CString g_sLangID_PathSelItem               ;//= _T("sPathSelItem");
CString g_sLangTxt_PathSelItem                 ;//= _T("路径[%s]选择的项目不唯一");
CString g_sLangID_CannotUse               ;//= _T("sCannotUse");
CString g_sLangTxt_CannotUse                 ;//= _T("DownMacroPara不能在项目\"%s\"中使用");
CString g_sLangID_CannotUse2               ;//= _T("sCannotUse2");
CString g_sLangTxt_CannotUse2                 ;//= _T("DownMacroPara不能在项目\"%s\"中使用(项目的父对象错误)");
CString g_sLangID_CannotUse3               ;//= _T("sCannotUse3");
CString g_sLangTxt_CannotUse3                 ;//= _T("DownMacroPara不能在项目\"%s\"中使用(项目的父对象非电气量项目)");

CString g_sLangID_NullDataReport               ;//= _T("sNullDataReport");
CString g_sLangTxt_NullDataReport                 ;//= _T("FilterCombineReportEx函数：报告数据为空");
CString g_sLangID_DataReportID               ;//= _T("sDataReportID ");
CString g_sLangTxt_DataReportID                  ;//= _T("不存在ID为\"%s\"的报告数据");
CString g_sLangID_DataUnExist2               ;//= _T("sDataUnExist2");
CString g_sLangTxt_DataUnExist2                 ;//= _T("数据【%s】不存在");
CString g_sLangID_DataUnExist3               ;//= _T("sDataUnExist3");
CString g_sLangTxt_DataUnExist3                 ;//= _T("数据值【%s】不存在");
CString g_sLangID_DataPathUn               ;//= _T("sDataPathUn");
CString g_sLangTxt_DataPathUn                 ;//= _T("数据路径【%s】检索出的数据【%d】不存在");
CString g_sLangID_FtcnCmdUse               ;//= _T("sFtcnCmdUse");
CString g_sLangTxt_FtcnCmdUse                  ;//= _T("CalSoeTime函数只能在通讯命令中使用");
CString g_sLangID_FtcnCmdUse2               ;//= _T("sFtcnCmdUse2");
CString g_sLangTxt_FtcnCmdUse2                 ;//= _T("SetCmdZoneIndex函数只能用于通讯命令");
CString g_sLangID_FtcnScriptCall               ;//= _T("sFtcnScriptCall");
CString g_sLangTxt_FtcnScriptCall                 ;//= _T("函数ValidBeginEndValRange只能作为电气量项目的脚本调用");
CString g_sLangID_FctnUnExist               ;//= _T("sFctnUnExist");
CString g_sLangTxt_FctnUnExist                 ;//= _T("函数ValidBeginEndValRange:[%s]不存在");
CString g_sLangID_FixedValueData               ;//= _T("sFixedValueData");
CString g_sLangTxt_FixedValueData                 ;//= _T("%s(%s)定值单数据");
CString g_sLangID_Marking               ;//= _T("sMarking");
CString g_sLangTxt_Marking                 ;//= _T("标示");
CString g_sLangID_PdfFile               ;//= _T("sPdfFile");
CString g_sLangTxt_PdfFile                 ;//= _T("Pdf定值文件");
CString g_sLangID_XMLFile               ;//= _T("sXMLFile");
CString g_sLangTxt_XMLFile                 ;//= _T("XML定值文件");
CString g_sLangID_WordFile               ;//= _T("sWordFile");
CString g_sLangTxt_WordFile                 ;//= _T("Word定值文件");
CString g_sLangID_ExcelFile               ;//= _T("sExcelFile");
CString g_sLangTxt_ExcelFile                 ;//= _T("Excel定值文件");
CString g_sLangID_OATSFile               ;//= _T("sOATSFile");
CString g_sLangTxt_OATSFile                  ;//= _T("OATS自定义定值文件");
CString g_sLangID_DataTypeUnExist2               ;//= _T("sDataTypeUnExist2");
CString g_sLangTxt_DataTypeUnExist2                  ;//= _T("数据类型文件 [%s] 不存在");
CString g_sLangID_CommunSetUnExist               ;//= _T("sCommunSetUnExist");
CString g_sLangTxt_CommunSetUnExist                  ;//= _T("通讯配置文件\"%s\"不存在");
CString g_sLangID_TestTypeUnExist               ;//= _T("sTestTypeUnExist");
CString g_sLangTxt_TestTypeUnExist                  ;//= _T("测试类型配置文件\"%s\"不存在");
CString g_sLangID_CreatDomFail               ;//= _T("sCreatDomFail");
CString g_sLangTxt_CreatDomFail                  ;//= _T("MSXML2创建DOMDocument失败");
CString g_sLangID_OpenMsxmlFail               ;//= _T("sOpenMsxmlFail");
CString g_sLangTxt_OpenMsxmlFail                  ;//= _T("MSXML2打开文件【%s】失败");
CString g_sLangID_YearMonDay               ;//= _T("sYearMonDay");
CString g_sLangTxt_YearMonDay                  ;//= _T("%Y年%m月%d日");
CString g_sLangID_UnitPara               ;//= _T("sUnitPara");
CString g_sLangTxt_UnitPara                  ;//= _T("装置参数");
CString g_sLangID_FixedValue               ;//= _T("sFixedValue");
CString g_sLangTxt_FixedValue                  ;//= _T("定值");
CString g_sLangID_Platen               ;//= _T("sPlaten");
CString g_sLangTxt_Platen                  ;//= _T("压板");
CString g_sLangID_Telemetering               ;//= _T("sTelemetering");
CString g_sLangTxt_Telemetering                  ;//= _T("遥测");
CString g_sLangID_Telecommunicating               ;//= _T("sTelecommunicating");
CString g_sLangTxt_Telecommunicating                  ;//= _T("遥信");
CString g_sLangID_FaultReport               ;//= _T("sFaultReport");
CString g_sLangTxt_FaultReport                 ;//= _T("故障报告");
CString g_sLangID_ProtectEvent               ;//= _T("sProtectEvent");
CString g_sLangTxt_ProtectEvent                  ;//= _T("保护事件");
CString g_sLangID_FaultSignal               ;//= _T("sFaultSignal");
CString g_sLangTxt_FaultSignal                  ;//= _T("故障信号");
CString g_sLangID_AlarmSignal              ;//= _T("sAlarmSignal");
CString g_sLangTxt_AlarmSignal                  ;//= _T("告警信号");
CString g_sLangID_SamplingValue               ;//= _T("sSamplingValue");
CString g_sLangTxt_SamplingValue                  ;//= _T("采样值");
CString g_sLangID_Telecontrolling               ;//= _T("sTelecontrolling");
CString g_sLangTxt_Telecontrolling                 ;//= _T("遥控");
CString g_sLangID_Custom               ;//= _T("sCustom");
CString g_sLangTxt_Custom                  ;//= _T("自定义");
CString g_sLangID_SingDataMode               ;//= _T("sSingDataMode");
CString g_sLangTxt_SingDataMode                  ;//= _T("单一数据填写模式");
CString g_sLangID_ExcelDataMode               ;//= _T("sExcelDataMode");
CString g_sLangTxt_ExcelDataMode                  ;//= _T("表格行填写模式");
CString g_sLangID_ExcelDataMode2               ;//= _T("sExcelDataMode2");
CString g_sLangTxt_ExcelDataMode2                  ;//= _T("表格列填写模式");

CString g_sLangID_NewCreatTask               ;//= _T("sNewCreatTask");
CString g_sLangTxt_NewCreatTask                  ;//= _T("新建任务");
CString g_sLangID_NewProject               ;//= _T("sNewProject");
CString g_sLangTxt_NewProject                  ;//= _T("新建工程");
CString g_sLangID_DeleteTask               ;//= _T("sDeleteTask");
CString g_sLangTxt_DeleteTask                  ;//= _T("删除任务");
CString g_sLangID_TaskArchive               ;//= _T("sTaskArchive");
CString g_sLangID_DeleteProject               ;//= _T("sDeleteProject");
CString g_sLangTxt_DeleteProject                  ;//= _T("删除工程");
CString g_sLangTxt_TaskArchive                  ;//= _T("任务归档");
CString g_sLangID_ProjectArchive               ;//= _T("sProjectArchive");
CString g_sLangTxt_ProjectArchive                  ;//= _T("工程归档");
CString g_sLangID_OpenProject               ;//= _T("sOpenProject");
CString g_sLangTxt_OpenProject                  ;//= _T("打开工程");
CString g_sLangID_CloseProject               ;//= _T("sCloseProject");
CString g_sLangTxt_CloseProject                  ;//= _T("关闭工程");
CString g_sLangID_TestRecordFile               ;//= _T("sTestRecordFile");
CString g_sLangTxt_TestRecordFile                 ;//= _T("测试记录文件");
CString g_sLangID_RecordFile               ;//= _T("sRecordFile");
CString g_sLangTxt_RecordFile                  ;//= _T("记录文件大小");
CString g_sLangID_LastAccessedTimes               ;//= _T("sLastAccessedTimes");
CString g_sLangTxt_LastAccessedTimes                 ;//= _T("最后访问时间");
CString g_sLangID_ReportFile               ;//= _T("sReportFile");
CString g_sLangTxt_ReportFile                   ;//= _T("报告文件");
CString g_sLangID_ReportFileSize               ;//= _T("sReportFileSize");
CString g_sLangTxt_ReportFileSize                  ;//= _T("报告文件大小");
CString g_sLangID_NewTask               ;//= _T("sNewTask");
CString g_sLangTxt_NewTask                  ;//= _T("新任务");
CString g_sLangID_EnterTask               ;//= _T("sEnterTask");
CString g_sLangTxt_EnterTask                  ;//= _T("进入测试");
CString g_sLangID_NewReport               ;//= _T("sNewReport ");
CString g_sLangTxt_NewReport                   ;//= _T("新报告");

CString g_sLangID_TestComplete               ;//= _T("sTestComplete");
CString g_sLangTxt_TestComplete                  ;//= _T("测试完成");
CString g_sLangID_TerminationTest               ;//= _T("sTerminationTest");
CString g_sLangTxt_TerminationTest                 ;//= _T("终止测试");
CString g_sLangID_Testing               ;//= _T("sTesting");
CString g_sLangTxt_Testing                  ;//= _T("测试中");
CString g_sLangID_UnTest               ;//= _T("sUnTest");
CString g_sLangTxt_UnTest                  ;//= _T("未测试");
CString g_sLangID_SystemPara               ;//= _T("sSystemPara");
CString g_sLangTxt_SystemPara                  ;//= _T("系统参数");
CString g_sLangID_CreatWordFail               ;//= _T("sCreatWordFail");
CString g_sLangTxt_CreatWordFail                  ;//= _T("创建Word失败！导出任务报告失败！");
CString g_sLangID_TestReport               ;//= _T("sTestReport");
CString g_sLangTxt_TestReport                 ;//= _T("测试报告");
CString g_sLangID_Conclusion               ;//= _T("sConclusion");
CString g_sLangTxt_Conclusion                  ;//= _T("结论");
CString g_sLangID_UnqualifiedItem               ;//= _T("sUnqualifiedItem");
CString g_sLangTxt_UnqualifiedItem                  ;//= _T("有不合格项");
CString g_sLangID_ViewPara               ;//= _T("sViewPara");
CString g_sLangTxt_ViewPara                  ;//= _T("查看参数");
CString g_sLangID_FctnGbNotFound               ;//= _T("sFctnGbNotFound");
CString g_sLangTxt_FctnGbNotFound                  ;//= _T("函数GbUICreate入口地址没有找到");
CString g_sLangID_DataBatch               ;//= _T("sDataBatch");
CString g_sLangTxt_DataBatch                  ;//= _T("数据集遍历批量");
CString g_sLangID_Developing               ;//= _T("sDeveloping");
CString g_sLangTxt_Developing                  ;//= _T("开发中");
CString g_sLangID_ReportManager               ;//= _T("sReportManager");
CString g_sLangTxt_ReportManager                  ;//= _T("报告管理");
CString g_sLangID_TestReady               ;//= _T("sTestReady");
CString g_sLangTxt_TestReady                  ;//= _T("测试准备");
CString g_sLangID_TestWork               ;//= _T("sTestWork");
CString g_sLangTxt_TestWork                   ;//= _T("测试工作恢复");
CString g_sLangID_CellpAdding               ;//= _T("sCellpAdding");
CString g_sLangTxt_CellpAdding                   ;//= _T("单元格填充");
CString g_sLangID_ColumnFillMmode               ;//= _T("sColumnFillMmode");
CString g_sLangTxt_ColumnFillMmode                   ;//= _T("列填充模式");
CString g_sLangID_HnagFillMmode               ;//= _T("sHnagFillMmode");
CString g_sLangTxt_HnagFillMmode                  ;//= _T("行填充模式");
CString g_sLangID_ParaVarious               ;//= _T("sParaVarious");
CString g_sLangTxt_ParaVarious                  ;//= _T("参数变量");
CString g_sLangID_Format               ;//= _T("sFormat");
CString g_sLangTxt_Format                  ;//= _T("格式");
CString g_sLangID_Id               ;//= _T("sId");
CString g_sLangTxt_Id                  ;//= _T("ID");
// CString g_sLangID_Variable               ;//= _T("sVariable");
// CString g_sLangTxt_Variable                  ;//= _T("变量");
CString g_sLangID_DataVariousDefin               ;//= _T("sDataVariousDefin");
CString g_sLangTxt_DataVariousDefin                  ;//= _T("数据接口变量定义");

CString g_sLangID_ProPaInf             ;//= _T("sProPaInf");
CString g_sLangTxt_ProPaInf            ;//= _T("项目的路径信息");
CString g_sLangID_TestProjInf          ;//= _T("sTestProjInf");
CString g_sLangTxt_TestProjInf         ;//= _T("测试项目信息");
CString g_sLangID_SetAsReport          ;//= _T("sSetAsReport");
CString g_sLangTxt_SetAsReport         ;//= _T("设为最终报告");
CString g_sLangID_ViewMessJud          ;//= _T("sViewMessJud");
CString g_sLangTxt_ViewMessJud         ;//= _T("查看报文判断");
CString g_sLangID_TestProTestRep       ;//= _T("sTestProTestRep");
CString g_sLangTxt_TestProTestRep      ;//= _T("测试项目实验报告");
CString g_sLangID_InstrutionInfo       ;//= _T("sInstrutionInfo");
CString g_sLangTxt_InstrutionInfo      ;//= _T("说明信息");
CString g_sLangID_GuideAutoWizardFile       ;//= _T("sGuideAutoWizardFile");
CString g_sLangTxt_GuideAutoWizardFile      ;//= _T("作业指导书自动向导文件");

CString g_sLangID_NextStep       ;//= _T("sNextStep");
CString g_sLangTxt_NextStep      ;//= _T("下一步");
CString g_sLangID_ClickToNextStep       ;//= _T("sClickToNextStep");
CString g_sLangTxt_ClickToNextStep      ;//= _T("点击进入到向导的下一步骤");
CString g_sLangID_OperCompleteToNext       ;//= _T("sOperCompleteToNext");
CString g_sLangTxt_OperCompleteToNext      ;//= _T("操作完成，点击【下一步】按钮");
CString g_sLangID_TestItemNotExist                 ;//= _T("sTestItemNotExist");
CString g_sLangTxt_TestItemNotExist             ;//= _T("测试项目【%s】不存在");
CString g_sLangID_SetItem                 ;//= _T("sSetItem");
CString g_sLangTxt_SetItem             ;//= _T("设置项目【%s】\r\n设置通讯命令数据：数据集、参数数据");
CString g_sLangID_DestRefData                 ;//= _T("sDestRefData");
CString g_sLangTxt_DestRefData             ;//= _T("目标引用数据");
CString g_sLangID_DataMap                 ;//= _T("sDataMap");
CString g_sLangTxt_DataMap            ;//= _T("数据映射");
CString g_sLangID_TestItem                 ;//= _T("sTestItem");
CString g_sLangTxt_TestItem            ;//= _T("测试项目");
CString g_sLangID_NumberGroup                 ;//= _T("sNumberGroup");
CString g_sLangTxt_NumberGroup            ;//= _T("第%d组");
CString g_sLangID_ItemClassName                ;//= _T("sItemClassName");
CString g_sLangTxt_ItemClassName            ;//= _T("项目分类名称");
CString g_sLangID_ItemClassId                 ;//= _T("sItemClassId");
CString g_sLangTxt_ItemClassId            ;//= _T("项目分类ID");
CString g_sLangID_BatchEnumGroup                 ;//= _T("sBatchEnumGroup");
CString g_sLangTxt_BatchEnumGroup            ;//= _T("批量枚举组");
CString g_sLangID_BatchItemNoName                ;//= _T("sBatchItemNoName");
CString g_sLangTxt_BatchItemNoName            ;//= _T("批量项目没有输入名称");
CString g_sLangID_BatchItemNoId                 ;//= _T("sBatchItemNoId");
CString g_sLangTxt_BatchItemNoId            ;//= _T("批量项目没有输入ID");
CString g_sLangID_BatchItemNoDataset                 ;//= _T("sBatchItemNoDataset");
CString g_sLangTxt_BatchItemNoDataset            ;//= _T("批量项目没有关联数据集");
CString g_sLangID_DatasetNotExist                 ;//= _T("sDatasetNotExist");
CString g_sLangTxt_DatasetNotExist            ;//= _T("【%s】对应的数据集数据不存在");
CString g_sLangID_DataMapNotOnly                 ;//= _T("sDataMapNotOnly");
CString g_sLangTxt_DataMapNotOnly            ;//= _T("数据接口映射【%s】不唯一");
CString g_sLangID_ChannelCfg                 ;//= _T("sChannelCfg");
CString g_sLangTxt_ChannelCfg            ;//= _T("通道配置：%s");
CString g_sLangID_InsertReportTem                 ;//= _T("sInsertReportTem");
CString g_sLangTxt_InsertReportTem            ;//= _T("插入报告模板【%s】");
CString g_sLangID_CannotInstant                 ;//= _T("sCannotInstant");
CString g_sLangTxt_CannotInstant            ;//= _T("映射【%s】【%s】没有建立任何映射关系，不能被实例化！");
CString g_sLangID_InsertTestTem                 ;//= _T("sInsertTestTem");
CString g_sLangTxt_InsertTestTem            ;//= _T("插入测试模板【%s】");
CString g_sLangID_CommCmdNoDataset                 ;//= _T("sCommCmdNoDataset");
CString g_sLangTxt_CommCmdNoDataset            ;//= _T("通讯命令【%s】没有对应的数据集");
CString g_sLangID_Initial                 ;//= _T("sInitial");
CString g_sLangTxt_Initial            ;//= _T("初始化........");
CString g_sLangID_DealSubTemTestPara                ;//= _T("sDealSubTemTestPara");
CString g_sLangTxt_DealSubTemTestPara            ;//= _T("处理子模板测试参数........");
CString g_sLangID_OpenedWizardFile                 ;//= _T("sOpenedWizardFile");
CString g_sLangTxt_OpenedWizardFile            ;//= _T("打开的向导文件：\r\n【%s】\r\n子模板：\r\n【%s】\r\n与当前子模板：\r\n【%s】\r\n不一致！");
CString g_sLangID_SelSubTem                ;//= _T("sSelSubTem");
CString g_sLangTxt_SelSubTem            ;//= _T("选择子模板，点击按钮【打开】添加子模板，点击【取消】按钮结束选择");
CString g_sLangID_SelTestSubTem                 ;//= _T("sSelTestSubTem");
CString g_sLangTxt_SelTestSubTem           ;//= _T("选择测试子模板");
CString g_sLangID_SelTestSubTemInsert                 ;//= _T("sSelTestSubTemInsert");
CString g_sLangTxt_SelTestSubTemInsert           ;//= _T("选择测试子模板插入的位置，合法的位置为“设备”和“项目分类”");
CString g_sLangID_SelTestSubTemInsert2                 ;//= _T("sSelTestSubTemInsert2");
CString g_sLangTxt_SelTestSubTemInsert2           ;//= _T("%s: 选择测试子模板插入的位置");
CString g_sLangID_SaveTestTem                 ;//= _T("sSaveTestTem");
CString g_sLangTxt_SaveTestTem           ;//= _T("保存测试模板");
CString g_sLangID_SaveTestTemWizardOver                 ;//= _T("sSaveTestTemWizardOver");
CString g_sLangTxt_SaveTestTemWizardOver           ;//= _T("保存测试模板，结束向导");
CString g_sLangID_SetTestTemAttr                 ;//= _T("sSetTestTemAttr");
CString g_sLangTxt_SetTestTemAttr           ;//= _T("设置测试模板的属性");
CString g_sLangID_SetTestTemAttr2                 ;//= _T("sSetTestTemAttr2");
CString g_sLangTxt_SetTestTemAttr2           ;//= _T("设置测试模板的属性：主要设置测试功能文件、规约种类选择");
CString g_sLangID_SetSubTemInterface                 ;//= _T("sSetSubTemInterface");
CString g_sLangTxt_SetSubTemInterface           ;//= _T("设置子模板的接口，插入子模板到模板中");
CString g_sLangID_SetDeviceDataModel                 ;//= _T("sSetDeviceDataModel");
CString g_sLangTxt_SetDeviceDataModel           ;//= _T("设置设备数据模型");
CString g_sLangID_SetDeviceAttr                ;//= _T("sSetDeviceAttr");
CString g_sLangTxt_SetDeviceAttr           ;//= _T("设置设备的属性，建议将名称和ID设置为保护型号的名字");
CString g_sLangID_SetDeviceDataType                 ;//= _T("sSetDeviceDataType");
CString g_sLangTxt_SetDeviceDataType           ;//= _T("设置设备的数据模型，选择磁盘上已经存在的设备数据模型文件，此文件通过MMS客户端从保护装置枚举得到");
CString g_sLangID_SetDeviceCharCurve                 ;//= _T("sSetDeviceCharCurve");
CString g_sLangTxt_SetDeviceCharCurve           ;//= _T("设置设备的特性曲线，此步骤可以暂时不设置，设置子模板时再设置特性曲线");
CString g_sLangID_SetDeviceAttr2                ;//= _T("sSetDeviceAttr2");
CString g_sLangTxt_SetDeviceAttr2           ;//= _T(" ;//=;//=>> 设置设备的属性");
CString g_sLangID_SetDeviceDataType2                 ;//= _T("sSetDeviceDataType2");
CString g_sLangTxt_SetDeviceDataType2           ;//= _T(" ;//=;//=>> 设置设备的数据模型");
CString g_sLangID_SetDeviceCharCurve2                 ;//= _T("sSetDeviceCharCurve2");
CString g_sLangTxt_SetDeviceCharCurve2           ;//= _T(" ;//=;//=>> 设置设备的特性曲线");
CString g_sLangID_Execute                 ;//= _T("sExecute");
CString g_sLangTxt_Execute           ;//= _T("执行");
CString g_sLangID_CommCmdError                ;//= _T("sCommCmdError");
CString g_sLangTxt_CommCmdError           ;//= _T("通讯命令【%s】错误");
CString g_sLangID_DataPathNoData                 ;//= _T("sDataPathNoData");
CString g_sLangTxt_DataPathNoData           ;//= _T("数据路径【%s】对应的数据不存在");
CString g_sLangID_IdReplace                 ;//= _T("sIdReplace");
CString g_sLangTxt_IdReplace           ;//= _T("【第%d个 共%d个】ID替换：【%s】;//=;//=>>【%s】");
CString g_sLangID_NameReplaceCompleted                ;//= _T("sNameReplaceCompleted");
CString g_sLangTxt_NameReplaceCompleted           ;//= _T("名称替换完成");
CString g_sLangID_ReplaceCompleted2                 ;//= _T("sReplaceCompleted2");
CString g_sLangTxt_ReplaceCompleted2           ;//= _T("替换完成.......");
CString g_sLangID_AddObjMatchUnsucc                 ;//= _T("sAddObjMatchUnsucc");
CString g_sLangTxt_AddObjMatchUnsucc          ;//= _T("添加没有匹配成功的对象");
CString g_sLangID_DealCommCmd                 ;//= _T("sDealCommCmd");
CString g_sLangTxt_DealCommCmd          ;//= _T("处理通讯命令：%s");
CString g_sLangID_RelNotOnly                ;//= _T("sRelNotOnly");
CString g_sLangTxt_RelNotOnly         ;//= _T("【%s】关联关系不唯一");
CString g_sLangID_DataInterfaceName                 ;//= _T("sDataInterfaceName");
CString g_sLangTxt_DataInterfaceName          ;//= _T("数据接口名称");
CString g_sLangID_DealMode                 ;//= _T("sDealMode");
CString g_sLangTxt_DealMode          ;//= _T("处理模式");
CString g_sLangID_StartValue                ;//= _T("sStartValue");
CString g_sLangTxt_StartValue         ;//= _T("起始值");
CString g_sLangID_StepNumber                ;//= _T("sStepNumber");
CString g_sLangTxt_StepNumber         ;//= _T("步数");
CString g_sLangID_SCLChannelName                 ;//= _T("sSCLChannelName");
CString g_sLangTxt_SCLChannelName          ;//= _T("SCL通道名");
CString g_sLangID_DataName                 ;//= _T("sDataName");
CString g_sLangTxt_DataName          ;//= _T("数据名称");
CString g_sLangID_ChannelIndex                ;//= _T("sChannelIndex");
CString g_sLangTxt_ChannelIndex         ;//= _T("通道编号");
CString g_sLangID_DatasetTraverse                 ;//= _T("sDatasetTraverse");
CString g_sLangTxt_DatasetTraverse          ;//= _T("数据集遍历");
CString g_sLangID_NumberArithmetic                ;//= _T("sNumberArithmetic");
CString g_sLangTxt_NumberArithmetic         ;//= _T("数值等差变化");
CString g_sLangID_InitOptimizeList                 ;//= _T("sInitOptimizeList");
CString g_sLangTxt_InitOptimizeList          ;//= _T("7-1：初始化优化项目链表............");
CString g_sLangID_InitPreTestList                ;//= _T("sInitPreTestList");
CString g_sLangTxt_InitPreTestList         ;//= _T("7-2：初始化试验前测试准备项目链表............");
CString g_sLangID_InitTestRecoverList                 ;//= _T("sInitTestRecoverList");
CString g_sLangTxt_InitTestRecoverList          ;//= _T("7-3：初始化试验恢复项目链表............");
CString g_sLangID_OptimizePreTestItem                ;//= _T("sOptimizePreTestItem");
CString g_sLangTxt_OptimizePreTestItem          ;//= _T("7-4：优化试验前测试准备项目............");
CString g_sLangID_OptimizeTestRecoverItem                ;//= _T("sOptimizeTestRecoverItem");
CString g_sLangTxt_OptimizeTestRecoverItem         ;//= _T("7-5：优化试验恢复项目............");
CString g_sLangID_OptimizeIecCfgDownload                 ;//= _T("sOptimizeIecCfgDownload");
CString g_sLangTxt_OptimizeIecCfgDownload          ;//= _T("7-6：优化IEC61850配置下载............");
CString g_sLangID_OptimizeSysParaEditItem                ;//= _T("sOptimizeSysParaEditItem");
CString g_sLangTxt_OptimizeSysParaEditItem         ;//= _T("7-7：优化系统参数编辑项目............");
CString g_sLangID_ItemClassAllSubItem                ;//= _T("sItemClassAllSubItem");
CString g_sLangTxt_ItemClassAllSubItem         ;//= _T("项目分类的全部子项目（包含子分类）");
CString g_sLangID_ItemClassSubItem                 ;//= _T("sItemClassSubItem");
CString g_sLangTxt_ItemClassSubItem          ;//= _T("项目分类的子项目（不包含子分类）");
CString g_sLangID_SelItemClassMode                ;//= _T("sSelItemClassMode");
CString g_sLangTxt_SelItemClassMode         ;//= _T("选择项目分类以及子项目选择模式");
CString g_sLangID_ImportTo                ;//= _T("sImportTo");
CString g_sLangTxt_ImportTo         ;//= _T("导入到 %s");
CString g_sLangID_NoDataObjDef                ;//= _T("sNoDataObjDef");
CString g_sLangTxt_NoDataObjDef         ;//= _T("没有[%s]对应的数据对象定义");
CString g_sLangID_FileNameWithout                ;//= _T("sFileNameWithout");
CString g_sLangTxt_FileNameWithout         ;//= _T("文件名不能包含下列任何字符之一: \r\n  \\ / : * ? < > |");
CString g_sLangID_FileMngr                ;//= _T("sFileMngr");
CString g_sLangTxt_FileMngr         ;//= _T("文件管理");
CString g_sLangID_Average                 ;//= _T("sAverage");
CString g_sLangTxt_Average            ;//= _T("平均值");
CString g_sLangID_LastOne                 ;//= _T("sLastOne");
CString g_sLangTxt_LastOne            ;//= _T("最后一个");
CString g_sLangID_ErrorMax                 ;//= _T("sErrorMax");
CString g_sLangTxt_ErrorMax            ;//= _T("误差最大值");
CString g_sLangID_Standdeviation                 ;//= _T("sStanddeviation");
CString g_sLangTxt_Standdeviation            ;//= _T("标准差");
CString g_sLangID_CommCmdCheckComplete                 ;//= _T("sCommCmdCheckComplete");
CString g_sLangTxt_CommCmdCheckComplete            ;//= _T("通讯命令数据检查完成！");
CString g_sLangID_CommCmdParaAbnormal                 ;//= _T("sCommCmdParaAbnormal");
CString g_sLangTxt_CommCmdParaAbnormal            ;//= _T("通讯命令:\r\n%s\r\n\r\n参数异常，请手动修改。修改完成，点击“确定”继续\r\n");
CString g_sLangID_DeleteInvalidPara       ;//= _T("sDeleteInvalidPara");
CString g_sLangTxt_DeleteInvalidPara   ;//= _T("删除无效参数：【%s】;//=【%s】");
CString g_sLangID_ElectricCheckComplete                 ;//= _T("sElectricCheckComplete");
CString g_sLangTxt_ElectricCheckComplete            ;//= _T("电气量测试功能数据检查完成！");
CString g_sLangID_ElectricParaAbnormal                 ;//= _T("sElectricParaAbnormal");
CString g_sLangTxt_ElectricParaAbnormal            ;//= _T("电气量测试:\r\n%s\r\n\r\n参数异常，请手动修改。修改完成，点击“确定”继续\r\n");
CString g_sLangID_OpenWordFail                 ;//= _T("sOpenWordFail");
CString g_sLangTxt_OpenWordFail            ;//= _T("打开Word失败");
CString g_sLangID_HaveMarkSureReplace       ;//= _T("sHaveMarkSureReplace");
CString g_sLangTxt_HaveMarkSureReplace   ;//= _T("当前位置有标签，确定替换");
CString g_sLangID_NoWord                 ;//= _T("sNoWord");
CString g_sLangTxt_NoWord            ;//= _T("没有安装Word");
CString g_sLangID_OpenDocFail                 ;//= _T("sOpenDocFail");
CString g_sLangTxt_OpenDocFail            ;//= _T("打开文档失败！");
CString g_sLangID_BookMarkExist                 ;//= _T("sBookMarkExist");
CString g_sLangTxt_BookMarkExist            ;//= _T("书签【%s】在数据报告中【%s】已经存在");
CString g_sLangID_InsertTitleFail       ;//= _T("sInsertTitleFail");
CString g_sLangTxt_InsertTitleFail   ;//= _T("插入标题【%s】失败");
// CString g_sLangID_Title                 ;//= _T("sTitle");
// CString g_sLangTxt_Title            ;//= _T("标题 %d");
CString g_sLangID_InsertFail                 ;//= _T("sInsertFail");
CString g_sLangTxt_InsertFail            ;//= _T("插入%s失败");
CString g_sLangID_Finish                 ;//= _T("sFinish");
CString g_sLangTxt_Finish            ;//= _T("完 成");
CString g_sLangID_Unqualified2                 ;//= _T("sUnqualified2");
CString g_sLangTxt_Unqualified2            ;//= _T("[%s]不合格");
CString g_sLangID_TestFinish                 ;//= _T("sTestFinish");
CString g_sLangTxt_TestFinish            ;//= _T("********测试结束********");


CString g_sLangID_SelNoArea ;//= _T("sSelNoArea");
CString g_sLangTxt_SelNoArea ;//= _T("没有选择表格区域！");
CString g_sLangID_SelOnlyOneRowCol ;//= _T("sSelOnlyOneRowCol");
CString g_sLangTxt_SelOnlyOneRowCol ;//= _T("选择表格区域只有一行一列，不具备批量插入条件！");
CString g_sLangID_ColRowsNotSame ;//= _T("sColRowsNotSame");
CString g_sLangTxt_ColRowsNotSame ;//= _T("选择表格区域每列的行列数不相同，不具备批量插入条件！");
CString g_sLangID_SelNoItem ;//= _T("sSelNoItem");
CString g_sLangTxt_SelNoItem ;//= _T("没有选择测试项目！");
CString g_sLangID_MustSelYcItem ;//= _T("sMustSelYcItem");
CString g_sLangTxt_MustSelYcItem ;//= _T("请选择包含遥测项目的项目分类！");
CString g_sLangID_HasNoMacroTest ;//= _T("sHasNoMacroTest");
CString g_sLangTxt_HasNoMacroTest ;//= _T("【%s】下没有电气量测试功能");
CString g_sLangID_HasNoYcItem ;//= _T("sHasNoYcItem");
CString g_sLangTxt_HasNoYcItem ;//= _T("【%s】下没有遥测测试电气量测试功能");
CString g_sLangID_RepeatTimeNotSame ;//= _T("sRepeatTimeNotSame");
CString g_sLangTxt_RepeatTimeNotSame ;//= _T("【%s】的重复次数%d与【%s】的重复次数%d不一致!");
CString g_sLangID_MacroTestNotSame ;//= _T("sMacroTestNotSame");
CString g_sLangTxt_MacroTestNotSame ;//= _T("【%s】与【%s】的测试功能不一致!");

CString g_sLangID_AttrID_Value ;//= _T("sAttrID_Value");
CString g_sLangTxt_AttrID_Value ;//= _T("数值(value)");
CString g_sLangID_AttrID_Name ;//= _T("sAttrID_Name");
CString g_sLangTxt_AttrID_Name ;//= _T("名称(Name)");

CString g_sLangID_TestPrjNotFinish ;//= _T("sTestPrjNotFinish");
CString g_sLangTxt_TestPrjNotFinish ;//= _T("测试报告[%s]没有测试完成");

CString g_sLangID_RsltExprScript ;//= _T("sRsltExprScript");
CString g_sLangTxt_RsltExprScript ;//= _T("结果判断表达式");
CString g_sLangID_IgnoreAbnormal       ;//= _T("sIgnoreAbnormal");
CString g_sLangTxt_IgnoreAbnormal  ;//= _T("忽略异常");

CString g_sLangID_SGroupS           ;//= _T("sSGroupS");
CString g_sLangTxt_SGroupS          ;//= _T("%s%s-组%d.%s");
CString g_sLangID_SGroupFileName           ;//= _T("sSGroupFnm");
CString g_sLangTxt_SGroupFileName          ;//= _T("%s-组%d");

// CString g_sLangID_IEC_Open;
// CString g_sLangTxt_IEC_Open;
CString g_sLangID_IEC_AddSCL;
CString g_sLangTxt_IEC_AddSCL;
CString g_sLangID_IEC_DeleteNow;
CString g_sLangTxt_IEC_DeleteNow;
CString g_sLangID_IEC_Emptyout;
CString g_sLangTxt_IEC_Emptyout;
 CString g_sLangID_Native_FileName ;//= _T("Native_FileName");
 CString g_sLangTxt_Native_FileName ;//= _T("文件名称");
CString g_sLangID_FilePath;
CString g_sLangTxt_FilePath;
CString g_sLangID_FileSize;
CString g_sLangTxt_FileSize;
// CString g_sLangID_Native_Choose ;//= _T("Native_Choose");
// CString g_sLangTxt_Native_Choose ;//= _T("选择");
CString g_sLangID_Dates;
CString g_sLangTxt_Dates;
// CString g_sLangID_Native_Form; //格式
// CString g_sLangTxt_Native_Form;


CString g_sLangID_currentfile;
CString g_sLangTxt_currentfile;
CString g_sLangID_parsefile;
CString g_sLangTxt_parsefile;
CString g_sLangID_confirmfiles;
CString g_sLangTxt_confirmfiles;
CString g_sLangID_IEDdialog;
CString g_sLangTxt_IEDdialog;
CString g_sLangID_sameopen;
CString g_sLangTxt_sameopen;

CString g_sLangID_Native_ChooseOpenFile ;//= _T("Native_ChooseOpenFile");
CString g_sLangTxt_Native_ChooseOpenFile ;//= _T("选择需要打开的文件");

CString g_sLangID_Gradient_ShowUpath;
CString g_sLangTxt_Gradient_ShowUpath;

CString g_sLangID_warning;
CString g_sLangTxt_warning;


CString g_sLangID_UpdataFail                 ;//= _T("sUpdataFail");
CString g_sLangTxt_UpdataFail                ;//= _T("测试仪更新:查询[系统标识:%d,版本标识:%d]更新信息失败!");
CString g_sLangID_DownloadFile				 ;//= _T("sDownloadFile");
CString g_sLangTxt_DownloadFile              ;//= _T("测试仪更新:查询信息完成，开始下载文件，请稍后...[系统标识:%d,版本标识:%d]");
CString g_sLangID_DownloadFail               ;//= _T("sDownloadFail");
CString g_sLangTxt_DownloadFail              ;//= _T("测试仪更新:下载版本文件[%s]失败!");
CString g_sLangID_DownloadCompress           ;//= _T("sDownloadCompress ");
CString g_sLangTxt_DownloadCompress          ;//= _T("测试仪更新:下载版本文件[%s]完成,准备解压缩!");
CString g_sLangID_LocalUpgrades              ;//= _T("sLocalUpgrades");
CString g_sLangTxt_LocalUpgrades             ;//= _T("测试仪更新:已结束与云平台交互,开始解压缩更新包并进行本地升级!");
CString g_sLangID_Reboot                     ;//= _T("sReboot");
CString g_sLangTxt_Reboot                    ;//= _T("测试仪更新:升级成功后,需将测试仪重启,请稍等......");	
CString g_sLangID_UnpackSucc                 ;//= _T("sUnpackSucc");
CString g_sLangTxt_UnpackSucc                ;//= _T("测试仪更新：解压本地更新包【%s】成功!");
CString g_sLangID_UnpackFail                 ;//= _T("sUnpackFail");
CString g_sLangTxt_UnpackFail                ;//= _T("测试仪更新：解压本地更新包【%s】失败!");
CString g_sLangID_Update_UpdateSuccess       ;//= _T("sUpdate_UpdateSuccess");
CString g_sLangTxt_Update_UpdateSuccess      ;//= _T("程序升级成功，请手动重启仪器");

CString g_sLangID_Escalating		         ;//= _T("sEscalating");
CString g_sLangTxt_Escalating			     ;//= _T("正在准备升级文件，请稍后...");
CString g_sLangID_TesterUpdate				 ;//= _T("sTesterUpdate")
CString g_sLangTxt_TesterUpdate		         ;//= _T("测试仪更新：已更新%.02f%")
CString g_sLangID_BackupSucc			     ;//= _T("sBackupSucc")
CString g_sLangTxt_BackupSucc				 ;//=_T("测试仪更新：文件【%s】备份成功!")
CString g_sLangID_BackupFail				 ;//= _T("sBackupFail")
CString g_sLangTxt_BackupFail				 ;//=_T("测试仪更新：文件【%s】备份失败!")
CString g_sLangID_CopySucc				     ;//= _T("sCopySucc")
CString g_sLangTxt_CopySucc				     ;//=_T("测试仪更新：文件【%s】拷贝成功!")
CString g_sLangID_TesterUpdataFail			 ;//= _T("sTesterUpdataFail")
CString g_sLangTxt_TesterUpdataFail			 ;//=_T("测试仪更新：文件【%s】更新失败!")

CString g_sLangID_ExpSucc;
CString g_sLangTxt_ExpSucc;
CString g_sLangID_ExpFail;
CString g_sLangTxt_ExpFail;
CString g_sLangID_ImpSucc;
CString g_sLangTxt_ImpSucc;
CString g_sLangID_ImpFail;
CString g_sLangTxt_ImpFail;
CString g_sLangID_RemainingMemorySize;
CString g_sLangTxt_RemainingMemorySize;
CString g_sLangID_InsufficientSystemMemory;
CString g_sLangTxt_InsufficientSystemMemory;
CString g_sLangID_ExistenceSCDFiles;
CString g_sLangTxt_ExistenceSCDFiles;
CString g_sLangID_NoExistenceSCLFiles;
CString g_sLangTxt_NoExistenceSCLFiles;
CString g_sLangID_AnalysisSCLFiles;
CString g_sLangTxt_AnalysisSCLFiles;
CString g_sLangID_LoadSCLFiles;
CString g_sLangTxt_LoadSCLFiles;
CString g_sLangID_LoadSCLFilesProgressBar;
CString g_sLangTxt_LoadSCLFilesProgressBar;
CString g_sLangID_SaveSCLFiles;
CString g_sLangTxt_SaveSCLFiles;
CString g_sLangID_State_No;					 //= _T("State_No");
CString g_sLangTxt_State_No;				 //= _T("否");
CString g_sLangID_State_Yes;				 //= _T("State_Yes");
CString g_sLangTxt_State_Yes;				 //= _T("是");

//shaolei 2024-12-9
CString g_sLangID_AutoTest_SvrName;                       //= _T("sAutoTest_SvrName")
CString g_sLangTxt_AutoTest_SvrName;                      //= _T("自动测试服务名称")
CString g_sLangID_AutoTest_SvrVersion;				      //= _T("sAutoTest_SvrVersion")
CString g_sLangTxt_AutoTest_SvrVersion;                   //= _T("自动测试服务版本")

//国际版移植 20250207 xueyangfan
CString g_sLangID_Xrio_EnterNumbers;                 //=_T("Xrio_EnterNumbers");
CString g_sLangTxt_Xrio_EnterNumbers;                //=_T("请输入一个数字。");
CString g_sLangID_Xrio_ValueLessThanOREqual;         //=_T("Xrio_ValueLessThanOREqual");
CString g_sLangTxt_Xrio_ValueLessThanOREqual;        //=_T("值必须 <= ");
CString g_sLangID_Xrio_ValueGreaterThanOREqual;      //=_T("Xrio_ValueGreaterThanOREqual");
CString g_sLangTxt_Xrio_ValueGreaterThanOREqual;     //=_T("值必须 >= ");
CString g_sLangID_Xrio_InvalidDoublePrecisionValue;  //= _T("Xrio_InvalidDoublePrecisionValue")
CString g_sLangTxt_Xrio_InvalidDoublePrecisionValue; //= _T("无效的双精度值！")
CString g_sLangID_Xrio_InvalidIntValue;              //= _T("Xrio_InvalidIntValue")
CString g_sLangTxt_Xrio_InvalidIntValue;             //= _T("无效的整形值！")
CString g_sLangID_Xrio_LogInfo_ParamDataType;        //= _T("Xrio_LogInfo_ParamDataType")
CString g_sLangTxt_Xrio_LogInfo_ParamDataType;       //= _T("参数数据类型")
CString g_sLangID_Xrio_LogInfo_NamePath;             //= _T("Xrio_LogInfo_NamePath")
CString g_sLangTxt_Xrio_LogInfo_NamePath;            //= _T("名称路径")
CString g_sLangID_Xrio_LogInfo_IDPath;               //= _T("Xrio_LogInfo_IDPath")
CString g_sLangTxt_Xrio_LogInfo_IDPath;              //= _T("ID路径")
CString g_sLangID_Xrio_LogInfo_InvalidParamDataType; //= _T("Xrio_LogInfo_InvalidParamDataType")
CString g_sLangTxt_Xrio_LogInfo_InvalidParamDataType;//= _T("参数含无效数据类型！数据类型改为字符串型！")
CString g_sLangID_Xrio_LogInfo_MinGreaterThanMax;    //= _T("Xrio_LogInfo_MinGreaterThanMax")
CString g_sLangTxt_Xrio_LogInfo_MinGreaterThanMax;   //= _T("最小值大于最大值！")
CString g_sLangID_Xrio_InvalidEnumValue;             //= _T("Xrio_InvalidEnumValue")
CString g_sLangTxt_Xrio_InvalidEnumValue;            //= _T("无效的枚举值！")
CString g_sLangID_Xrio_InvalidBinaryValue;           //= _T("Xrio_InvalidBinaryValue")
CString g_sLangTxt_Xrio_InvalidBinaryValue;          //= _T("无效的二进制值！")
