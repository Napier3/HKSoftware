// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CompensationPara.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CompensationPara.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Compensation {
class CompensationItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CompensationItem> {
} _CompensationItem_default_instance_;
class CompensationItemDcDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CompensationItemDc> {
} _CompensationItemDc_default_instance_;
class ChanelCompensationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChanelCompensation> {
} _ChanelCompensation_default_instance_;
class moduleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<module> {
} _module_default_instance_;
class CompensationItemData_PTU100DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CompensationItemData_PTU100> {
} _CompensationItemData_PTU100_default_instance_;
class modulesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<modules> {
} _modules_default_instance_;

namespace protobuf_CompensationPara_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[6];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompensationItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompensationItem, fampcompensation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompensationItem, fphcompensation_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompensationItemDc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompensationItemDc, fampcompensation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompensationItemDc, fzeroshift_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChanelCompensation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChanelCompensation, fzeroshift_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChanelCompensation, oharms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChanelCompensation, ftempxs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChanelCompensation, fdczeroshft_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChanelCompensation, fmaxcurrentratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChanelCompensation, odcoutput_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(module, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(module, chanelitem_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(module, nmodule_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(module, filename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(module, frexs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(module, faxudc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(module, faxuzeroshift_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(module, moduleno_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(module, nmaxvalue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(module, chanelnum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(module, fgain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(module, faxumaxdc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(module, faxugain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(module, nvoltorcur_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(module, powermode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(module, foldagesetvolt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(module, facvoltmax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(module, fsetacvoltmax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(module, fdcvoltmax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(module, fsetdcvoltmax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(module, fvolt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(module, nfpgaversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(module, fdigitaldelay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(module, ntemp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(module, ntemp1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(module, ftemp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(module, ftemp1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(module, bmultiple_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompensationItemData_PTU100, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompensationItemData_PTU100, fampcompensation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompensationItemData_PTU100, fphcompensation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompensationItemData_PTU100, fzeroshift_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompensationItemData_PTU100, other1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompensationItemData_PTU100, other2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompensationItemData_PTU100, other3_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modules, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modules, modulechanel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modules, nudctest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modules, nidctest_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(CompensationItem)},
  { 6, -1, sizeof(CompensationItemDc)},
  { 12, -1, sizeof(ChanelCompensation)},
  { 22, -1, sizeof(module)},
  { 53, -1, sizeof(CompensationItemData_PTU100)},
  { 63, -1, sizeof(modules)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CompensationItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CompensationItemDc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChanelCompensation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_module_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CompensationItemData_PTU100_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_modules_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "CompensationPara.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace

void TableStruct::Shutdown() {
  _CompensationItem_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CompensationItemDc_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ChanelCompensation_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _module_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CompensationItemData_PTU100_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _modules_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _CompensationItem_default_instance_.DefaultConstruct();
  _CompensationItemDc_default_instance_.DefaultConstruct();
  _ChanelCompensation_default_instance_.DefaultConstruct();
  _module_default_instance_.DefaultConstruct();
  _CompensationItemData_PTU100_default_instance_.DefaultConstruct();
  _modules_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\026CompensationPara.proto\022\014Compensation\"E"
      "\n\020CompensationItem\022\030\n\020fampcompensation\030\001"
      " \001(\002\022\027\n\017fphcompensation\030\002 \001(\002\"B\n\022Compens"
      "ationItemDc\022\030\n\020fampcompensation\030\001 \001(\002\022\022\n"
      "\nfzeroshift\030\002 \001(\002\"\315\001\n\022ChanelCompensation"
      "\022\022\n\nfzeroshift\030\001 \001(\002\022.\n\006oharms\030\002 \003(\0132\036.C"
      "ompensation.CompensationItem\022\017\n\007fTempXs\030"
      "\003 \003(\002\022\023\n\013fdczeroshft\030\004 \001(\002\022\030\n\020fMaxCurren"
      "tRatio\030\005 \001(\002\0223\n\toDCoutput\030\006 \003(\0132 .Compen"
      "sation.CompensationItemDc\"\245\004\n\006module\0224\n\n"
      "chanelItem\030\001 \003(\0132 .Compensation.ChanelCo"
      "mpensation\022\017\n\007nmodule\030\002 \001(\r\022\020\n\010filename\030"
      "\003 \001(\t\022\r\n\005frexs\030\004 \001(\002\022\016\n\006faxudc\030\005 \001(\002\022\025\n\r"
      "faxuzeroshift\030\006 \001(\002\022\020\n\010ModuleNo\030\007 \001(\t\022\021\n"
      "\tnmaxValue\030\010 \001(\r\022\021\n\tchanelNum\030\t \001(\r\022\r\n\005f"
      "gain\030\n \001(\002\022\021\n\tfaxumaxdc\030\013 \001(\002\022\020\n\010faxugai"
      "n\030\014 \001(\002\022\022\n\nnvoltorcur\030\r \001(\r\022\021\n\tpowermode"
      "\030\016 \001(\r\022\026\n\016foldagesetvolt\030\017 \001(\002\022\022\n\nfACVol"
      "tMax\030\020 \001(\002\022\025\n\rfsetACVoltMax\030\021 \001(\002\022\022\n\nfDC"
      "VoltMax\030\022 \001(\002\022\025\n\rfsetDCVoltMax\030\023 \001(\002\022\r\n\005"
      "fVolt\030\024 \003(\002\022\024\n\014nFPGAVersion\030\025 \001(\r\022\025\n\rfdi"
      "gitaldelay\030\026 \001(\002\022\r\n\005nTemp\030\027 \001(\r\022\016\n\006nTemp"
      "1\030\030 \001(\r\022\r\n\005fTemp\030\031 \001(\002\022\016\n\006fTemp1\030\032 \001(\002\022\021"
      "\n\tbMultiple\030\033 \001(\010\"\224\001\n\033CompensationItemDa"
      "ta_PTU100\022\030\n\020fampcompensation\030\001 \003(\002\022\027\n\017f"
      "phcompensation\030\002 \003(\002\022\022\n\nfzeroshift\030\003 \003(\002"
      "\022\016\n\006Other1\030\004 \003(\002\022\016\n\006Other2\030\005 \003(\002\022\016\n\006Othe"
      "r3\030\006 \003(\002\"Y\n\007modules\022*\n\014moduleChanel\030\001 \003("
      "\0132\024.Compensation.module\022\020\n\010nUDCtest\030\002 \001("
      "\r\022\020\n\010nIDCtest\030\003 \001(\rb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1187);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CompensationPara.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_CompensationPara_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompensationItem::kFampcompensationFieldNumber;
const int CompensationItem::kFphcompensationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompensationItem::CompensationItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CompensationPara_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Compensation.CompensationItem)
}
CompensationItem::CompensationItem(const CompensationItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fampcompensation_, &from.fampcompensation_,
    reinterpret_cast<char*>(&fphcompensation_) -
    reinterpret_cast<char*>(&fampcompensation_) + sizeof(fphcompensation_));
  // @@protoc_insertion_point(copy_constructor:Compensation.CompensationItem)
}

void CompensationItem::SharedCtor() {
  ::memset(&fampcompensation_, 0, reinterpret_cast<char*>(&fphcompensation_) -
    reinterpret_cast<char*>(&fampcompensation_) + sizeof(fphcompensation_));
  _cached_size_ = 0;
}

CompensationItem::~CompensationItem() {
  // @@protoc_insertion_point(destructor:Compensation.CompensationItem)
  SharedDtor();
}

void CompensationItem::SharedDtor() {
}

void CompensationItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompensationItem::descriptor() {
  protobuf_CompensationPara_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CompensationPara_2eproto::file_level_metadata[0].descriptor;
}

const CompensationItem& CompensationItem::default_instance() {
  protobuf_CompensationPara_2eproto::InitDefaults();
  return *internal_default_instance();
}

CompensationItem* CompensationItem::New(::google::protobuf::Arena* arena) const {
  CompensationItem* n = new CompensationItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CompensationItem::Clear() {
// @@protoc_insertion_point(message_clear_start:Compensation.CompensationItem)
  ::memset(&fampcompensation_, 0, reinterpret_cast<char*>(&fphcompensation_) -
    reinterpret_cast<char*>(&fampcompensation_) + sizeof(fphcompensation_));
}

bool CompensationItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Compensation.CompensationItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float fampcompensation = 1;
      case 1: {
        if (tag == 13u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fampcompensation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fphcompensation = 2;
      case 2: {
        if (tag == 21u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fphcompensation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Compensation.CompensationItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Compensation.CompensationItem)
  return false;
#undef DO_
}

void CompensationItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Compensation.CompensationItem)
  // float fampcompensation = 1;
  if (this->fampcompensation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->fampcompensation(), output);
  }

  // float fphcompensation = 2;
  if (this->fphcompensation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->fphcompensation(), output);
  }

  // @@protoc_insertion_point(serialize_end:Compensation.CompensationItem)
}

::google::protobuf::uint8* CompensationItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Compensation.CompensationItem)
  // float fampcompensation = 1;
  if (this->fampcompensation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->fampcompensation(), target);
  }

  // float fphcompensation = 2;
  if (this->fphcompensation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->fphcompensation(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Compensation.CompensationItem)
  return target;
}

size_t CompensationItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Compensation.CompensationItem)
  size_t total_size = 0;

  // float fampcompensation = 1;
  if (this->fampcompensation() != 0) {
    total_size += 1 + 4;
  }

  // float fphcompensation = 2;
  if (this->fphcompensation() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompensationItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Compensation.CompensationItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CompensationItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CompensationItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Compensation.CompensationItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Compensation.CompensationItem)
    MergeFrom(*source);
  }
}

void CompensationItem::MergeFrom(const CompensationItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Compensation.CompensationItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.fampcompensation() != 0) {
    set_fampcompensation(from.fampcompensation());
  }
  if (from.fphcompensation() != 0) {
    set_fphcompensation(from.fphcompensation());
  }
}

void CompensationItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Compensation.CompensationItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompensationItem::CopyFrom(const CompensationItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Compensation.CompensationItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompensationItem::IsInitialized() const {
  return true;
}

void CompensationItem::Swap(CompensationItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompensationItem::InternalSwap(CompensationItem* other) {
  std::swap(fampcompensation_, other->fampcompensation_);
  std::swap(fphcompensation_, other->fphcompensation_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CompensationItem::GetMetadata() const {
  protobuf_CompensationPara_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CompensationPara_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CompensationItem

// float fampcompensation = 1;
void CompensationItem::clear_fampcompensation() {
  fampcompensation_ = 0;
}
float CompensationItem::fampcompensation() const {
  // @@protoc_insertion_point(field_get:Compensation.CompensationItem.fampcompensation)
  return fampcompensation_;
}
void CompensationItem::set_fampcompensation(float value) {
  
  fampcompensation_ = value;
  // @@protoc_insertion_point(field_set:Compensation.CompensationItem.fampcompensation)
}

// float fphcompensation = 2;
void CompensationItem::clear_fphcompensation() {
  fphcompensation_ = 0;
}
float CompensationItem::fphcompensation() const {
  // @@protoc_insertion_point(field_get:Compensation.CompensationItem.fphcompensation)
  return fphcompensation_;
}
void CompensationItem::set_fphcompensation(float value) {
  
  fphcompensation_ = value;
  // @@protoc_insertion_point(field_set:Compensation.CompensationItem.fphcompensation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompensationItemDc::kFampcompensationFieldNumber;
const int CompensationItemDc::kFzeroshiftFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompensationItemDc::CompensationItemDc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CompensationPara_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Compensation.CompensationItemDc)
}
CompensationItemDc::CompensationItemDc(const CompensationItemDc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fampcompensation_, &from.fampcompensation_,
    reinterpret_cast<char*>(&fzeroshift_) -
    reinterpret_cast<char*>(&fampcompensation_) + sizeof(fzeroshift_));
  // @@protoc_insertion_point(copy_constructor:Compensation.CompensationItemDc)
}

void CompensationItemDc::SharedCtor() {
  ::memset(&fampcompensation_, 0, reinterpret_cast<char*>(&fzeroshift_) -
    reinterpret_cast<char*>(&fampcompensation_) + sizeof(fzeroshift_));
  _cached_size_ = 0;
}

CompensationItemDc::~CompensationItemDc() {
  // @@protoc_insertion_point(destructor:Compensation.CompensationItemDc)
  SharedDtor();
}

void CompensationItemDc::SharedDtor() {
}

void CompensationItemDc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompensationItemDc::descriptor() {
  protobuf_CompensationPara_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CompensationPara_2eproto::file_level_metadata[1].descriptor;
}

const CompensationItemDc& CompensationItemDc::default_instance() {
  protobuf_CompensationPara_2eproto::InitDefaults();
  return *internal_default_instance();
}

CompensationItemDc* CompensationItemDc::New(::google::protobuf::Arena* arena) const {
  CompensationItemDc* n = new CompensationItemDc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CompensationItemDc::Clear() {
// @@protoc_insertion_point(message_clear_start:Compensation.CompensationItemDc)
  ::memset(&fampcompensation_, 0, reinterpret_cast<char*>(&fzeroshift_) -
    reinterpret_cast<char*>(&fampcompensation_) + sizeof(fzeroshift_));
}

bool CompensationItemDc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Compensation.CompensationItemDc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float fampcompensation = 1;
      case 1: {
        if (tag == 13u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fampcompensation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fzeroshift = 2;
      case 2: {
        if (tag == 21u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fzeroshift_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Compensation.CompensationItemDc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Compensation.CompensationItemDc)
  return false;
#undef DO_
}

void CompensationItemDc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Compensation.CompensationItemDc)
  // float fampcompensation = 1;
  if (this->fampcompensation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->fampcompensation(), output);
  }

  // float fzeroshift = 2;
  if (this->fzeroshift() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->fzeroshift(), output);
  }

  // @@protoc_insertion_point(serialize_end:Compensation.CompensationItemDc)
}

::google::protobuf::uint8* CompensationItemDc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Compensation.CompensationItemDc)
  // float fampcompensation = 1;
  if (this->fampcompensation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->fampcompensation(), target);
  }

  // float fzeroshift = 2;
  if (this->fzeroshift() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->fzeroshift(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Compensation.CompensationItemDc)
  return target;
}

size_t CompensationItemDc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Compensation.CompensationItemDc)
  size_t total_size = 0;

  // float fampcompensation = 1;
  if (this->fampcompensation() != 0) {
    total_size += 1 + 4;
  }

  // float fzeroshift = 2;
  if (this->fzeroshift() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompensationItemDc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Compensation.CompensationItemDc)
  GOOGLE_DCHECK_NE(&from, this);
  const CompensationItemDc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CompensationItemDc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Compensation.CompensationItemDc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Compensation.CompensationItemDc)
    MergeFrom(*source);
  }
}

void CompensationItemDc::MergeFrom(const CompensationItemDc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Compensation.CompensationItemDc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.fampcompensation() != 0) {
    set_fampcompensation(from.fampcompensation());
  }
  if (from.fzeroshift() != 0) {
    set_fzeroshift(from.fzeroshift());
  }
}

void CompensationItemDc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Compensation.CompensationItemDc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompensationItemDc::CopyFrom(const CompensationItemDc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Compensation.CompensationItemDc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompensationItemDc::IsInitialized() const {
  return true;
}

void CompensationItemDc::Swap(CompensationItemDc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompensationItemDc::InternalSwap(CompensationItemDc* other) {
  std::swap(fampcompensation_, other->fampcompensation_);
  std::swap(fzeroshift_, other->fzeroshift_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CompensationItemDc::GetMetadata() const {
  protobuf_CompensationPara_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CompensationPara_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CompensationItemDc

// float fampcompensation = 1;
void CompensationItemDc::clear_fampcompensation() {
  fampcompensation_ = 0;
}
float CompensationItemDc::fampcompensation() const {
  // @@protoc_insertion_point(field_get:Compensation.CompensationItemDc.fampcompensation)
  return fampcompensation_;
}
void CompensationItemDc::set_fampcompensation(float value) {
  
  fampcompensation_ = value;
  // @@protoc_insertion_point(field_set:Compensation.CompensationItemDc.fampcompensation)
}

// float fzeroshift = 2;
void CompensationItemDc::clear_fzeroshift() {
  fzeroshift_ = 0;
}
float CompensationItemDc::fzeroshift() const {
  // @@protoc_insertion_point(field_get:Compensation.CompensationItemDc.fzeroshift)
  return fzeroshift_;
}
void CompensationItemDc::set_fzeroshift(float value) {
  
  fzeroshift_ = value;
  // @@protoc_insertion_point(field_set:Compensation.CompensationItemDc.fzeroshift)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChanelCompensation::kFzeroshiftFieldNumber;
const int ChanelCompensation::kOharmsFieldNumber;
const int ChanelCompensation::kFTempXsFieldNumber;
const int ChanelCompensation::kFdczeroshftFieldNumber;
const int ChanelCompensation::kFMaxCurrentRatioFieldNumber;
const int ChanelCompensation::kODCoutputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChanelCompensation::ChanelCompensation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CompensationPara_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Compensation.ChanelCompensation)
}
ChanelCompensation::ChanelCompensation(const ChanelCompensation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      oharms_(from.oharms_),
      ftempxs_(from.ftempxs_),
      odcoutput_(from.odcoutput_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fzeroshift_, &from.fzeroshift_,
    reinterpret_cast<char*>(&fmaxcurrentratio_) -
    reinterpret_cast<char*>(&fzeroshift_) + sizeof(fmaxcurrentratio_));
  // @@protoc_insertion_point(copy_constructor:Compensation.ChanelCompensation)
}

void ChanelCompensation::SharedCtor() {
  ::memset(&fzeroshift_, 0, reinterpret_cast<char*>(&fmaxcurrentratio_) -
    reinterpret_cast<char*>(&fzeroshift_) + sizeof(fmaxcurrentratio_));
  _cached_size_ = 0;
}

ChanelCompensation::~ChanelCompensation() {
  // @@protoc_insertion_point(destructor:Compensation.ChanelCompensation)
  SharedDtor();
}

void ChanelCompensation::SharedDtor() {
}

void ChanelCompensation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChanelCompensation::descriptor() {
  protobuf_CompensationPara_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CompensationPara_2eproto::file_level_metadata[2].descriptor;
}

const ChanelCompensation& ChanelCompensation::default_instance() {
  protobuf_CompensationPara_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChanelCompensation* ChanelCompensation::New(::google::protobuf::Arena* arena) const {
  ChanelCompensation* n = new ChanelCompensation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChanelCompensation::Clear() {
// @@protoc_insertion_point(message_clear_start:Compensation.ChanelCompensation)
  oharms_.Clear();
  ftempxs_.Clear();
  odcoutput_.Clear();
  ::memset(&fzeroshift_, 0, reinterpret_cast<char*>(&fmaxcurrentratio_) -
    reinterpret_cast<char*>(&fzeroshift_) + sizeof(fmaxcurrentratio_));
}

bool ChanelCompensation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Compensation.ChanelCompensation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float fzeroshift = 1;
      case 1: {
        if (tag == 13u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fzeroshift_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Compensation.CompensationItem oharms = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_oharms()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated float fTempXs = 3;
      case 3: {
        if (tag == 26u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_ftempxs())));
        } else if (tag == 29u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_ftempxs())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fdczeroshft = 4;
      case 4: {
        if (tag == 37u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fdczeroshft_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fMaxCurrentRatio = 5;
      case 5: {
        if (tag == 45u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fmaxcurrentratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Compensation.CompensationItemDc oDCoutput = 6;
      case 6: {
        if (tag == 50u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_odcoutput()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Compensation.ChanelCompensation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Compensation.ChanelCompensation)
  return false;
#undef DO_
}

void ChanelCompensation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Compensation.ChanelCompensation)
  // float fzeroshift = 1;
  if (this->fzeroshift() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->fzeroshift(), output);
  }

  // repeated .Compensation.CompensationItem oharms = 2;
  for (unsigned int i = 0, n = this->oharms_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->oharms(i), output);
  }

  // repeated float fTempXs = 3;
  if (this->ftempxs_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ftempxs_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->ftempxs().data(), this->ftempxs_size(), output);
  }

  // float fdczeroshft = 4;
  if (this->fdczeroshft() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->fdczeroshft(), output);
  }

  // float fMaxCurrentRatio = 5;
  if (this->fmaxcurrentratio() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->fmaxcurrentratio(), output);
  }

  // repeated .Compensation.CompensationItemDc oDCoutput = 6;
  for (unsigned int i = 0, n = this->odcoutput_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->odcoutput(i), output);
  }

  // @@protoc_insertion_point(serialize_end:Compensation.ChanelCompensation)
}

::google::protobuf::uint8* ChanelCompensation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Compensation.ChanelCompensation)
  // float fzeroshift = 1;
  if (this->fzeroshift() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->fzeroshift(), target);
  }

  // repeated .Compensation.CompensationItem oharms = 2;
  for (unsigned int i = 0, n = this->oharms_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->oharms(i), false, target);
  }

  // repeated float fTempXs = 3;
  if (this->ftempxs_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _ftempxs_cached_byte_size_, target);
  }
  for (int i = 0; i < this->ftempxs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->ftempxs(i), target);
  }

  // float fdczeroshft = 4;
  if (this->fdczeroshft() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->fdczeroshft(), target);
  }

  // float fMaxCurrentRatio = 5;
  if (this->fmaxcurrentratio() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->fmaxcurrentratio(), target);
  }

  // repeated .Compensation.CompensationItemDc oDCoutput = 6;
  for (unsigned int i = 0, n = this->odcoutput_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->odcoutput(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Compensation.ChanelCompensation)
  return target;
}

size_t ChanelCompensation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Compensation.ChanelCompensation)
  size_t total_size = 0;

  // repeated .Compensation.CompensationItem oharms = 2;
  {
    unsigned int count = this->oharms_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oharms(i));
    }
  }

  // repeated float fTempXs = 3;
  {
    unsigned int count = this->ftempxs_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ftempxs_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .Compensation.CompensationItemDc oDCoutput = 6;
  {
    unsigned int count = this->odcoutput_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->odcoutput(i));
    }
  }

  // float fzeroshift = 1;
  if (this->fzeroshift() != 0) {
    total_size += 1 + 4;
  }

  // float fdczeroshft = 4;
  if (this->fdczeroshft() != 0) {
    total_size += 1 + 4;
  }

  // float fMaxCurrentRatio = 5;
  if (this->fmaxcurrentratio() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChanelCompensation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Compensation.ChanelCompensation)
  GOOGLE_DCHECK_NE(&from, this);
  const ChanelCompensation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChanelCompensation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Compensation.ChanelCompensation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Compensation.ChanelCompensation)
    MergeFrom(*source);
  }
}

void ChanelCompensation::MergeFrom(const ChanelCompensation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Compensation.ChanelCompensation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  oharms_.MergeFrom(from.oharms_);
  ftempxs_.MergeFrom(from.ftempxs_);
  odcoutput_.MergeFrom(from.odcoutput_);
  if (from.fzeroshift() != 0) {
    set_fzeroshift(from.fzeroshift());
  }
  if (from.fdczeroshft() != 0) {
    set_fdczeroshft(from.fdczeroshft());
  }
  if (from.fmaxcurrentratio() != 0) {
    set_fmaxcurrentratio(from.fmaxcurrentratio());
  }
}

void ChanelCompensation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Compensation.ChanelCompensation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChanelCompensation::CopyFrom(const ChanelCompensation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Compensation.ChanelCompensation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChanelCompensation::IsInitialized() const {
  return true;
}

void ChanelCompensation::Swap(ChanelCompensation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChanelCompensation::InternalSwap(ChanelCompensation* other) {
  oharms_.UnsafeArenaSwap(&other->oharms_);
  ftempxs_.UnsafeArenaSwap(&other->ftempxs_);
  odcoutput_.UnsafeArenaSwap(&other->odcoutput_);
  std::swap(fzeroshift_, other->fzeroshift_);
  std::swap(fdczeroshft_, other->fdczeroshft_);
  std::swap(fmaxcurrentratio_, other->fmaxcurrentratio_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChanelCompensation::GetMetadata() const {
  protobuf_CompensationPara_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CompensationPara_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChanelCompensation

// float fzeroshift = 1;
void ChanelCompensation::clear_fzeroshift() {
  fzeroshift_ = 0;
}
float ChanelCompensation::fzeroshift() const {
  // @@protoc_insertion_point(field_get:Compensation.ChanelCompensation.fzeroshift)
  return fzeroshift_;
}
void ChanelCompensation::set_fzeroshift(float value) {
  
  fzeroshift_ = value;
  // @@protoc_insertion_point(field_set:Compensation.ChanelCompensation.fzeroshift)
}

// repeated .Compensation.CompensationItem oharms = 2;
int ChanelCompensation::oharms_size() const {
  return oharms_.size();
}
void ChanelCompensation::clear_oharms() {
  oharms_.Clear();
}
const ::Compensation::CompensationItem& ChanelCompensation::oharms(int index) const {
  // @@protoc_insertion_point(field_get:Compensation.ChanelCompensation.oharms)
  return oharms_.Get(index);
}
::Compensation::CompensationItem* ChanelCompensation::mutable_oharms(int index) {
  // @@protoc_insertion_point(field_mutable:Compensation.ChanelCompensation.oharms)
  return oharms_.Mutable(index);
}
::Compensation::CompensationItem* ChanelCompensation::add_oharms() {
  // @@protoc_insertion_point(field_add:Compensation.ChanelCompensation.oharms)
  return oharms_.Add();
}
::google::protobuf::RepeatedPtrField< ::Compensation::CompensationItem >*
ChanelCompensation::mutable_oharms() {
  // @@protoc_insertion_point(field_mutable_list:Compensation.ChanelCompensation.oharms)
  return &oharms_;
}
const ::google::protobuf::RepeatedPtrField< ::Compensation::CompensationItem >&
ChanelCompensation::oharms() const {
  // @@protoc_insertion_point(field_list:Compensation.ChanelCompensation.oharms)
  return oharms_;
}

// repeated float fTempXs = 3;
int ChanelCompensation::ftempxs_size() const {
  return ftempxs_.size();
}
void ChanelCompensation::clear_ftempxs() {
  ftempxs_.Clear();
}
float ChanelCompensation::ftempxs(int index) const {
  // @@protoc_insertion_point(field_get:Compensation.ChanelCompensation.fTempXs)
  return ftempxs_.Get(index);
}
void ChanelCompensation::set_ftempxs(int index, float value) {
  ftempxs_.Set(index, value);
  // @@protoc_insertion_point(field_set:Compensation.ChanelCompensation.fTempXs)
}
void ChanelCompensation::add_ftempxs(float value) {
  ftempxs_.Add(value);
  // @@protoc_insertion_point(field_add:Compensation.ChanelCompensation.fTempXs)
}
const ::google::protobuf::RepeatedField< float >&
ChanelCompensation::ftempxs() const {
  // @@protoc_insertion_point(field_list:Compensation.ChanelCompensation.fTempXs)
  return ftempxs_;
}
::google::protobuf::RepeatedField< float >*
ChanelCompensation::mutable_ftempxs() {
  // @@protoc_insertion_point(field_mutable_list:Compensation.ChanelCompensation.fTempXs)
  return &ftempxs_;
}

// float fdczeroshft = 4;
void ChanelCompensation::clear_fdczeroshft() {
  fdczeroshft_ = 0;
}
float ChanelCompensation::fdczeroshft() const {
  // @@protoc_insertion_point(field_get:Compensation.ChanelCompensation.fdczeroshft)
  return fdczeroshft_;
}
void ChanelCompensation::set_fdczeroshft(float value) {
  
  fdczeroshft_ = value;
  // @@protoc_insertion_point(field_set:Compensation.ChanelCompensation.fdczeroshft)
}

// float fMaxCurrentRatio = 5;
void ChanelCompensation::clear_fmaxcurrentratio() {
  fmaxcurrentratio_ = 0;
}
float ChanelCompensation::fmaxcurrentratio() const {
  // @@protoc_insertion_point(field_get:Compensation.ChanelCompensation.fMaxCurrentRatio)
  return fmaxcurrentratio_;
}
void ChanelCompensation::set_fmaxcurrentratio(float value) {
  
  fmaxcurrentratio_ = value;
  // @@protoc_insertion_point(field_set:Compensation.ChanelCompensation.fMaxCurrentRatio)
}

// repeated .Compensation.CompensationItemDc oDCoutput = 6;
int ChanelCompensation::odcoutput_size() const {
  return odcoutput_.size();
}
void ChanelCompensation::clear_odcoutput() {
  odcoutput_.Clear();
}
const ::Compensation::CompensationItemDc& ChanelCompensation::odcoutput(int index) const {
  // @@protoc_insertion_point(field_get:Compensation.ChanelCompensation.oDCoutput)
  return odcoutput_.Get(index);
}
::Compensation::CompensationItemDc* ChanelCompensation::mutable_odcoutput(int index) {
  // @@protoc_insertion_point(field_mutable:Compensation.ChanelCompensation.oDCoutput)
  return odcoutput_.Mutable(index);
}
::Compensation::CompensationItemDc* ChanelCompensation::add_odcoutput() {
  // @@protoc_insertion_point(field_add:Compensation.ChanelCompensation.oDCoutput)
  return odcoutput_.Add();
}
::google::protobuf::RepeatedPtrField< ::Compensation::CompensationItemDc >*
ChanelCompensation::mutable_odcoutput() {
  // @@protoc_insertion_point(field_mutable_list:Compensation.ChanelCompensation.oDCoutput)
  return &odcoutput_;
}
const ::google::protobuf::RepeatedPtrField< ::Compensation::CompensationItemDc >&
ChanelCompensation::odcoutput() const {
  // @@protoc_insertion_point(field_list:Compensation.ChanelCompensation.oDCoutput)
  return odcoutput_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int module::kChanelItemFieldNumber;
const int module::kNmoduleFieldNumber;
const int module::kFilenameFieldNumber;
const int module::kFrexsFieldNumber;
const int module::kFaxudcFieldNumber;
const int module::kFaxuzeroshiftFieldNumber;
const int module::kModuleNoFieldNumber;
const int module::kNmaxValueFieldNumber;
const int module::kChanelNumFieldNumber;
const int module::kFgainFieldNumber;
const int module::kFaxumaxdcFieldNumber;
const int module::kFaxugainFieldNumber;
const int module::kNvoltorcurFieldNumber;
const int module::kPowermodeFieldNumber;
const int module::kFoldagesetvoltFieldNumber;
const int module::kFACVoltMaxFieldNumber;
const int module::kFsetACVoltMaxFieldNumber;
const int module::kFDCVoltMaxFieldNumber;
const int module::kFsetDCVoltMaxFieldNumber;
const int module::kFVoltFieldNumber;
const int module::kNFPGAVersionFieldNumber;
const int module::kFdigitaldelayFieldNumber;
const int module::kNTempFieldNumber;
const int module::kNTemp1FieldNumber;
const int module::kFTempFieldNumber;
const int module::kFTemp1FieldNumber;
const int module::kBMultipleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

module::module()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CompensationPara_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Compensation.module)
}
module::module(const module& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      chanelitem_(from.chanelitem_),
      fvolt_(from.fvolt_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filename().size() > 0) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  moduleno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.moduleno().size() > 0) {
    moduleno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.moduleno_);
  }
  ::memcpy(&nmodule_, &from.nmodule_,
    reinterpret_cast<char*>(&bmultiple_) -
    reinterpret_cast<char*>(&nmodule_) + sizeof(bmultiple_));
  // @@protoc_insertion_point(copy_constructor:Compensation.module)
}

void module::SharedCtor() {
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  moduleno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&nmodule_, 0, reinterpret_cast<char*>(&bmultiple_) -
    reinterpret_cast<char*>(&nmodule_) + sizeof(bmultiple_));
  _cached_size_ = 0;
}

module::~module() {
  // @@protoc_insertion_point(destructor:Compensation.module)
  SharedDtor();
}

void module::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  moduleno_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void module::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* module::descriptor() {
  protobuf_CompensationPara_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CompensationPara_2eproto::file_level_metadata[3].descriptor;
}

const module& module::default_instance() {
  protobuf_CompensationPara_2eproto::InitDefaults();
  return *internal_default_instance();
}

module* module::New(::google::protobuf::Arena* arena) const {
  module* n = new module;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void module::Clear() {
// @@protoc_insertion_point(message_clear_start:Compensation.module)
  chanelitem_.Clear();
  fvolt_.Clear();
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  moduleno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&nmodule_, 0, reinterpret_cast<char*>(&bmultiple_) -
    reinterpret_cast<char*>(&nmodule_) + sizeof(bmultiple_));
}

bool module::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Compensation.module)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Compensation.ChanelCompensation chanelItem = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_chanelitem()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // uint32 nmodule = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nmodule_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filename = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Compensation.module.filename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float frexs = 4;
      case 4: {
        if (tag == 37u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &frexs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float faxudc = 5;
      case 5: {
        if (tag == 45u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &faxudc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float faxuzeroshift = 6;
      case 6: {
        if (tag == 53u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &faxuzeroshift_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ModuleNo = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_moduleno()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->moduleno().data(), this->moduleno().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Compensation.module.ModuleNo"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nmaxValue = 8;
      case 8: {
        if (tag == 64u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nmaxvalue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 chanelNum = 9;
      case 9: {
        if (tag == 72u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chanelnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fgain = 10;
      case 10: {
        if (tag == 85u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fgain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float faxumaxdc = 11;
      case 11: {
        if (tag == 93u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &faxumaxdc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float faxugain = 12;
      case 12: {
        if (tag == 101u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &faxugain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nvoltorcur = 13;
      case 13: {
        if (tag == 104u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nvoltorcur_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 powermode = 14;
      case 14: {
        if (tag == 112u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &powermode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float foldagesetvolt = 15;
      case 15: {
        if (tag == 125u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &foldagesetvolt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fACVoltMax = 16;
      case 16: {
        if (tag == 133u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &facvoltmax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fsetACVoltMax = 17;
      case 17: {
        if (tag == 141u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fsetacvoltmax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fDCVoltMax = 18;
      case 18: {
        if (tag == 149u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fdcvoltmax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fsetDCVoltMax = 19;
      case 19: {
        if (tag == 157u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fsetdcvoltmax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float fVolt = 20;
      case 20: {
        if (tag == 162u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_fvolt())));
        } else if (tag == 165u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 162u, input, this->mutable_fvolt())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nFPGAVersion = 21;
      case 21: {
        if (tag == 168u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nfpgaversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fdigitaldelay = 22;
      case 22: {
        if (tag == 181u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fdigitaldelay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nTemp = 23;
      case 23: {
        if (tag == 184u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ntemp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nTemp1 = 24;
      case 24: {
        if (tag == 192u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ntemp1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fTemp = 25;
      case 25: {
        if (tag == 205u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ftemp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fTemp1 = 26;
      case 26: {
        if (tag == 213u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ftemp1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bMultiple = 27;
      case 27: {
        if (tag == 216u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bmultiple_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Compensation.module)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Compensation.module)
  return false;
#undef DO_
}

void module::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Compensation.module)
  // repeated .Compensation.ChanelCompensation chanelItem = 1;
  for (unsigned int i = 0, n = this->chanelitem_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->chanelitem(i), output);
  }

  // uint32 nmodule = 2;
  if (this->nmodule() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nmodule(), output);
  }

  // string filename = 3;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Compensation.module.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->filename(), output);
  }

  // float frexs = 4;
  if (this->frexs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->frexs(), output);
  }

  // float faxudc = 5;
  if (this->faxudc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->faxudc(), output);
  }

  // float faxuzeroshift = 6;
  if (this->faxuzeroshift() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->faxuzeroshift(), output);
  }

  // string ModuleNo = 7;
  if (this->moduleno().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->moduleno().data(), this->moduleno().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Compensation.module.ModuleNo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->moduleno(), output);
  }

  // uint32 nmaxValue = 8;
  if (this->nmaxvalue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->nmaxvalue(), output);
  }

  // uint32 chanelNum = 9;
  if (this->chanelnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->chanelnum(), output);
  }

  // float fgain = 10;
  if (this->fgain() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->fgain(), output);
  }

  // float faxumaxdc = 11;
  if (this->faxumaxdc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->faxumaxdc(), output);
  }

  // float faxugain = 12;
  if (this->faxugain() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->faxugain(), output);
  }

  // uint32 nvoltorcur = 13;
  if (this->nvoltorcur() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->nvoltorcur(), output);
  }

  // uint32 powermode = 14;
  if (this->powermode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->powermode(), output);
  }

  // float foldagesetvolt = 15;
  if (this->foldagesetvolt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->foldagesetvolt(), output);
  }

  // float fACVoltMax = 16;
  if (this->facvoltmax() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->facvoltmax(), output);
  }

  // float fsetACVoltMax = 17;
  if (this->fsetacvoltmax() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->fsetacvoltmax(), output);
  }

  // float fDCVoltMax = 18;
  if (this->fdcvoltmax() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->fdcvoltmax(), output);
  }

  // float fsetDCVoltMax = 19;
  if (this->fsetdcvoltmax() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->fsetdcvoltmax(), output);
  }

  // repeated float fVolt = 20;
  if (this->fvolt_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(20, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_fvolt_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->fvolt().data(), this->fvolt_size(), output);
  }

  // uint32 nFPGAVersion = 21;
  if (this->nfpgaversion() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->nfpgaversion(), output);
  }

  // float fdigitaldelay = 22;
  if (this->fdigitaldelay() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->fdigitaldelay(), output);
  }

  // uint32 nTemp = 23;
  if (this->ntemp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->ntemp(), output);
  }

  // uint32 nTemp1 = 24;
  if (this->ntemp1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->ntemp1(), output);
  }

  // float fTemp = 25;
  if (this->ftemp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->ftemp(), output);
  }

  // float fTemp1 = 26;
  if (this->ftemp1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->ftemp1(), output);
  }

  // bool bMultiple = 27;
  if (this->bmultiple() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->bmultiple(), output);
  }

  // @@protoc_insertion_point(serialize_end:Compensation.module)
}

::google::protobuf::uint8* module::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Compensation.module)
  // repeated .Compensation.ChanelCompensation chanelItem = 1;
  for (unsigned int i = 0, n = this->chanelitem_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->chanelitem(i), false, target);
  }

  // uint32 nmodule = 2;
  if (this->nmodule() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nmodule(), target);
  }

  // string filename = 3;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Compensation.module.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filename(), target);
  }

  // float frexs = 4;
  if (this->frexs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->frexs(), target);
  }

  // float faxudc = 5;
  if (this->faxudc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->faxudc(), target);
  }

  // float faxuzeroshift = 6;
  if (this->faxuzeroshift() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->faxuzeroshift(), target);
  }

  // string ModuleNo = 7;
  if (this->moduleno().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->moduleno().data(), this->moduleno().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Compensation.module.ModuleNo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->moduleno(), target);
  }

  // uint32 nmaxValue = 8;
  if (this->nmaxvalue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->nmaxvalue(), target);
  }

  // uint32 chanelNum = 9;
  if (this->chanelnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->chanelnum(), target);
  }

  // float fgain = 10;
  if (this->fgain() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->fgain(), target);
  }

  // float faxumaxdc = 11;
  if (this->faxumaxdc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->faxumaxdc(), target);
  }

  // float faxugain = 12;
  if (this->faxugain() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->faxugain(), target);
  }

  // uint32 nvoltorcur = 13;
  if (this->nvoltorcur() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->nvoltorcur(), target);
  }

  // uint32 powermode = 14;
  if (this->powermode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->powermode(), target);
  }

  // float foldagesetvolt = 15;
  if (this->foldagesetvolt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->foldagesetvolt(), target);
  }

  // float fACVoltMax = 16;
  if (this->facvoltmax() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->facvoltmax(), target);
  }

  // float fsetACVoltMax = 17;
  if (this->fsetacvoltmax() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->fsetacvoltmax(), target);
  }

  // float fDCVoltMax = 18;
  if (this->fdcvoltmax() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->fdcvoltmax(), target);
  }

  // float fsetDCVoltMax = 19;
  if (this->fsetdcvoltmax() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->fsetdcvoltmax(), target);
  }

  // repeated float fVolt = 20;
  if (this->fvolt_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      20,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _fvolt_cached_byte_size_, target);
  }
  for (int i = 0; i < this->fvolt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->fvolt(i), target);
  }

  // uint32 nFPGAVersion = 21;
  if (this->nfpgaversion() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->nfpgaversion(), target);
  }

  // float fdigitaldelay = 22;
  if (this->fdigitaldelay() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->fdigitaldelay(), target);
  }

  // uint32 nTemp = 23;
  if (this->ntemp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->ntemp(), target);
  }

  // uint32 nTemp1 = 24;
  if (this->ntemp1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->ntemp1(), target);
  }

  // float fTemp = 25;
  if (this->ftemp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->ftemp(), target);
  }

  // float fTemp1 = 26;
  if (this->ftemp1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->ftemp1(), target);
  }

  // bool bMultiple = 27;
  if (this->bmultiple() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->bmultiple(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Compensation.module)
  return target;
}

size_t module::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Compensation.module)
  size_t total_size = 0;

  // repeated .Compensation.ChanelCompensation chanelItem = 1;
  {
    unsigned int count = this->chanelitem_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chanelitem(i));
    }
  }

  // repeated float fVolt = 20;
  {
    unsigned int count = this->fvolt_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _fvolt_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string filename = 3;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  // string ModuleNo = 7;
  if (this->moduleno().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->moduleno());
  }

  // uint32 nmodule = 2;
  if (this->nmodule() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nmodule());
  }

  // float frexs = 4;
  if (this->frexs() != 0) {
    total_size += 1 + 4;
  }

  // float faxudc = 5;
  if (this->faxudc() != 0) {
    total_size += 1 + 4;
  }

  // float faxuzeroshift = 6;
  if (this->faxuzeroshift() != 0) {
    total_size += 1 + 4;
  }

  // uint32 nmaxValue = 8;
  if (this->nmaxvalue() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nmaxvalue());
  }

  // uint32 chanelNum = 9;
  if (this->chanelnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->chanelnum());
  }

  // float fgain = 10;
  if (this->fgain() != 0) {
    total_size += 1 + 4;
  }

  // float faxumaxdc = 11;
  if (this->faxumaxdc() != 0) {
    total_size += 1 + 4;
  }

  // float faxugain = 12;
  if (this->faxugain() != 0) {
    total_size += 1 + 4;
  }

  // uint32 nvoltorcur = 13;
  if (this->nvoltorcur() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nvoltorcur());
  }

  // uint32 powermode = 14;
  if (this->powermode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->powermode());
  }

  // float foldagesetvolt = 15;
  if (this->foldagesetvolt() != 0) {
    total_size += 1 + 4;
  }

  // float fACVoltMax = 16;
  if (this->facvoltmax() != 0) {
    total_size += 2 + 4;
  }

  // float fsetACVoltMax = 17;
  if (this->fsetacvoltmax() != 0) {
    total_size += 2 + 4;
  }

  // float fDCVoltMax = 18;
  if (this->fdcvoltmax() != 0) {
    total_size += 2 + 4;
  }

  // float fsetDCVoltMax = 19;
  if (this->fsetdcvoltmax() != 0) {
    total_size += 2 + 4;
  }

  // uint32 nFPGAVersion = 21;
  if (this->nfpgaversion() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nfpgaversion());
  }

  // float fdigitaldelay = 22;
  if (this->fdigitaldelay() != 0) {
    total_size += 2 + 4;
  }

  // uint32 nTemp = 23;
  if (this->ntemp() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ntemp());
  }

  // uint32 nTemp1 = 24;
  if (this->ntemp1() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ntemp1());
  }

  // float fTemp = 25;
  if (this->ftemp() != 0) {
    total_size += 2 + 4;
  }

  // float fTemp1 = 26;
  if (this->ftemp1() != 0) {
    total_size += 2 + 4;
  }

  // bool bMultiple = 27;
  if (this->bmultiple() != 0) {
    total_size += 2 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void module::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Compensation.module)
  GOOGLE_DCHECK_NE(&from, this);
  const module* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const module>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Compensation.module)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Compensation.module)
    MergeFrom(*source);
  }
}

void module::MergeFrom(const module& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Compensation.module)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chanelitem_.MergeFrom(from.chanelitem_);
  fvolt_.MergeFrom(from.fvolt_);
  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.moduleno().size() > 0) {

    moduleno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.moduleno_);
  }
  if (from.nmodule() != 0) {
    set_nmodule(from.nmodule());
  }
  if (from.frexs() != 0) {
    set_frexs(from.frexs());
  }
  if (from.faxudc() != 0) {
    set_faxudc(from.faxudc());
  }
  if (from.faxuzeroshift() != 0) {
    set_faxuzeroshift(from.faxuzeroshift());
  }
  if (from.nmaxvalue() != 0) {
    set_nmaxvalue(from.nmaxvalue());
  }
  if (from.chanelnum() != 0) {
    set_chanelnum(from.chanelnum());
  }
  if (from.fgain() != 0) {
    set_fgain(from.fgain());
  }
  if (from.faxumaxdc() != 0) {
    set_faxumaxdc(from.faxumaxdc());
  }
  if (from.faxugain() != 0) {
    set_faxugain(from.faxugain());
  }
  if (from.nvoltorcur() != 0) {
    set_nvoltorcur(from.nvoltorcur());
  }
  if (from.powermode() != 0) {
    set_powermode(from.powermode());
  }
  if (from.foldagesetvolt() != 0) {
    set_foldagesetvolt(from.foldagesetvolt());
  }
  if (from.facvoltmax() != 0) {
    set_facvoltmax(from.facvoltmax());
  }
  if (from.fsetacvoltmax() != 0) {
    set_fsetacvoltmax(from.fsetacvoltmax());
  }
  if (from.fdcvoltmax() != 0) {
    set_fdcvoltmax(from.fdcvoltmax());
  }
  if (from.fsetdcvoltmax() != 0) {
    set_fsetdcvoltmax(from.fsetdcvoltmax());
  }
  if (from.nfpgaversion() != 0) {
    set_nfpgaversion(from.nfpgaversion());
  }
  if (from.fdigitaldelay() != 0) {
    set_fdigitaldelay(from.fdigitaldelay());
  }
  if (from.ntemp() != 0) {
    set_ntemp(from.ntemp());
  }
  if (from.ntemp1() != 0) {
    set_ntemp1(from.ntemp1());
  }
  if (from.ftemp() != 0) {
    set_ftemp(from.ftemp());
  }
  if (from.ftemp1() != 0) {
    set_ftemp1(from.ftemp1());
  }
  if (from.bmultiple() != 0) {
    set_bmultiple(from.bmultiple());
  }
}

void module::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Compensation.module)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void module::CopyFrom(const module& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Compensation.module)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool module::IsInitialized() const {
  return true;
}

void module::Swap(module* other) {
  if (other == this) return;
  InternalSwap(other);
}
void module::InternalSwap(module* other) {
  chanelitem_.UnsafeArenaSwap(&other->chanelitem_);
  fvolt_.UnsafeArenaSwap(&other->fvolt_);
  filename_.Swap(&other->filename_);
  moduleno_.Swap(&other->moduleno_);
  std::swap(nmodule_, other->nmodule_);
  std::swap(frexs_, other->frexs_);
  std::swap(faxudc_, other->faxudc_);
  std::swap(faxuzeroshift_, other->faxuzeroshift_);
  std::swap(nmaxvalue_, other->nmaxvalue_);
  std::swap(chanelnum_, other->chanelnum_);
  std::swap(fgain_, other->fgain_);
  std::swap(faxumaxdc_, other->faxumaxdc_);
  std::swap(faxugain_, other->faxugain_);
  std::swap(nvoltorcur_, other->nvoltorcur_);
  std::swap(powermode_, other->powermode_);
  std::swap(foldagesetvolt_, other->foldagesetvolt_);
  std::swap(facvoltmax_, other->facvoltmax_);
  std::swap(fsetacvoltmax_, other->fsetacvoltmax_);
  std::swap(fdcvoltmax_, other->fdcvoltmax_);
  std::swap(fsetdcvoltmax_, other->fsetdcvoltmax_);
  std::swap(nfpgaversion_, other->nfpgaversion_);
  std::swap(fdigitaldelay_, other->fdigitaldelay_);
  std::swap(ntemp_, other->ntemp_);
  std::swap(ntemp1_, other->ntemp1_);
  std::swap(ftemp_, other->ftemp_);
  std::swap(ftemp1_, other->ftemp1_);
  std::swap(bmultiple_, other->bmultiple_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata module::GetMetadata() const {
  protobuf_CompensationPara_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CompensationPara_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// module

// repeated .Compensation.ChanelCompensation chanelItem = 1;
int module::chanelitem_size() const {
  return chanelitem_.size();
}
void module::clear_chanelitem() {
  chanelitem_.Clear();
}
const ::Compensation::ChanelCompensation& module::chanelitem(int index) const {
  // @@protoc_insertion_point(field_get:Compensation.module.chanelItem)
  return chanelitem_.Get(index);
}
::Compensation::ChanelCompensation* module::mutable_chanelitem(int index) {
  // @@protoc_insertion_point(field_mutable:Compensation.module.chanelItem)
  return chanelitem_.Mutable(index);
}
::Compensation::ChanelCompensation* module::add_chanelitem() {
  // @@protoc_insertion_point(field_add:Compensation.module.chanelItem)
  return chanelitem_.Add();
}
::google::protobuf::RepeatedPtrField< ::Compensation::ChanelCompensation >*
module::mutable_chanelitem() {
  // @@protoc_insertion_point(field_mutable_list:Compensation.module.chanelItem)
  return &chanelitem_;
}
const ::google::protobuf::RepeatedPtrField< ::Compensation::ChanelCompensation >&
module::chanelitem() const {
  // @@protoc_insertion_point(field_list:Compensation.module.chanelItem)
  return chanelitem_;
}

// uint32 nmodule = 2;
void module::clear_nmodule() {
  nmodule_ = 0u;
}
::google::protobuf::uint32 module::nmodule() const {
  // @@protoc_insertion_point(field_get:Compensation.module.nmodule)
  return nmodule_;
}
void module::set_nmodule(::google::protobuf::uint32 value) {
  
  nmodule_ = value;
  // @@protoc_insertion_point(field_set:Compensation.module.nmodule)
}

// string filename = 3;
void module::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& module::filename() const {
  // @@protoc_insertion_point(field_get:Compensation.module.filename)
  return filename_.GetNoArena();
}
void module::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Compensation.module.filename)
}
#if LANG_CXX11
void module::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Compensation.module.filename)
}
#endif
void module::set_filename(const char* value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Compensation.module.filename)
}
void module::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Compensation.module.filename)
}
::std::string* module::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:Compensation.module.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* module::release_filename() {
  // @@protoc_insertion_point(field_release:Compensation.module.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void module::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:Compensation.module.filename)
}

// float frexs = 4;
void module::clear_frexs() {
  frexs_ = 0;
}
float module::frexs() const {
  // @@protoc_insertion_point(field_get:Compensation.module.frexs)
  return frexs_;
}
void module::set_frexs(float value) {
  
  frexs_ = value;
  // @@protoc_insertion_point(field_set:Compensation.module.frexs)
}

// float faxudc = 5;
void module::clear_faxudc() {
  faxudc_ = 0;
}
float module::faxudc() const {
  // @@protoc_insertion_point(field_get:Compensation.module.faxudc)
  return faxudc_;
}
void module::set_faxudc(float value) {
  
  faxudc_ = value;
  // @@protoc_insertion_point(field_set:Compensation.module.faxudc)
}

// float faxuzeroshift = 6;
void module::clear_faxuzeroshift() {
  faxuzeroshift_ = 0;
}
float module::faxuzeroshift() const {
  // @@protoc_insertion_point(field_get:Compensation.module.faxuzeroshift)
  return faxuzeroshift_;
}
void module::set_faxuzeroshift(float value) {
  
  faxuzeroshift_ = value;
  // @@protoc_insertion_point(field_set:Compensation.module.faxuzeroshift)
}

// string ModuleNo = 7;
void module::clear_moduleno() {
  moduleno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& module::moduleno() const {
  // @@protoc_insertion_point(field_get:Compensation.module.ModuleNo)
  return moduleno_.GetNoArena();
}
void module::set_moduleno(const ::std::string& value) {
  
  moduleno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Compensation.module.ModuleNo)
}
#if LANG_CXX11
void module::set_moduleno(::std::string&& value) {
  
  moduleno_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Compensation.module.ModuleNo)
}
#endif
void module::set_moduleno(const char* value) {
  
  moduleno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Compensation.module.ModuleNo)
}
void module::set_moduleno(const char* value, size_t size) {
  
  moduleno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Compensation.module.ModuleNo)
}
::std::string* module::mutable_moduleno() {
  
  // @@protoc_insertion_point(field_mutable:Compensation.module.ModuleNo)
  return moduleno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* module::release_moduleno() {
  // @@protoc_insertion_point(field_release:Compensation.module.ModuleNo)
  
  return moduleno_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void module::set_allocated_moduleno(::std::string* moduleno) {
  if (moduleno != NULL) {
    
  } else {
    
  }
  moduleno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), moduleno);
  // @@protoc_insertion_point(field_set_allocated:Compensation.module.ModuleNo)
}

// uint32 nmaxValue = 8;
void module::clear_nmaxvalue() {
  nmaxvalue_ = 0u;
}
::google::protobuf::uint32 module::nmaxvalue() const {
  // @@protoc_insertion_point(field_get:Compensation.module.nmaxValue)
  return nmaxvalue_;
}
void module::set_nmaxvalue(::google::protobuf::uint32 value) {
  
  nmaxvalue_ = value;
  // @@protoc_insertion_point(field_set:Compensation.module.nmaxValue)
}

// uint32 chanelNum = 9;
void module::clear_chanelnum() {
  chanelnum_ = 0u;
}
::google::protobuf::uint32 module::chanelnum() const {
  // @@protoc_insertion_point(field_get:Compensation.module.chanelNum)
  return chanelnum_;
}
void module::set_chanelnum(::google::protobuf::uint32 value) {
  
  chanelnum_ = value;
  // @@protoc_insertion_point(field_set:Compensation.module.chanelNum)
}

// float fgain = 10;
void module::clear_fgain() {
  fgain_ = 0;
}
float module::fgain() const {
  // @@protoc_insertion_point(field_get:Compensation.module.fgain)
  return fgain_;
}
void module::set_fgain(float value) {
  
  fgain_ = value;
  // @@protoc_insertion_point(field_set:Compensation.module.fgain)
}

// float faxumaxdc = 11;
void module::clear_faxumaxdc() {
  faxumaxdc_ = 0;
}
float module::faxumaxdc() const {
  // @@protoc_insertion_point(field_get:Compensation.module.faxumaxdc)
  return faxumaxdc_;
}
void module::set_faxumaxdc(float value) {
  
  faxumaxdc_ = value;
  // @@protoc_insertion_point(field_set:Compensation.module.faxumaxdc)
}

// float faxugain = 12;
void module::clear_faxugain() {
  faxugain_ = 0;
}
float module::faxugain() const {
  // @@protoc_insertion_point(field_get:Compensation.module.faxugain)
  return faxugain_;
}
void module::set_faxugain(float value) {
  
  faxugain_ = value;
  // @@protoc_insertion_point(field_set:Compensation.module.faxugain)
}

// uint32 nvoltorcur = 13;
void module::clear_nvoltorcur() {
  nvoltorcur_ = 0u;
}
::google::protobuf::uint32 module::nvoltorcur() const {
  // @@protoc_insertion_point(field_get:Compensation.module.nvoltorcur)
  return nvoltorcur_;
}
void module::set_nvoltorcur(::google::protobuf::uint32 value) {
  
  nvoltorcur_ = value;
  // @@protoc_insertion_point(field_set:Compensation.module.nvoltorcur)
}

// uint32 powermode = 14;
void module::clear_powermode() {
  powermode_ = 0u;
}
::google::protobuf::uint32 module::powermode() const {
  // @@protoc_insertion_point(field_get:Compensation.module.powermode)
  return powermode_;
}
void module::set_powermode(::google::protobuf::uint32 value) {
  
  powermode_ = value;
  // @@protoc_insertion_point(field_set:Compensation.module.powermode)
}

// float foldagesetvolt = 15;
void module::clear_foldagesetvolt() {
  foldagesetvolt_ = 0;
}
float module::foldagesetvolt() const {
  // @@protoc_insertion_point(field_get:Compensation.module.foldagesetvolt)
  return foldagesetvolt_;
}
void module::set_foldagesetvolt(float value) {
  
  foldagesetvolt_ = value;
  // @@protoc_insertion_point(field_set:Compensation.module.foldagesetvolt)
}

// float fACVoltMax = 16;
void module::clear_facvoltmax() {
  facvoltmax_ = 0;
}
float module::facvoltmax() const {
  // @@protoc_insertion_point(field_get:Compensation.module.fACVoltMax)
  return facvoltmax_;
}
void module::set_facvoltmax(float value) {
  
  facvoltmax_ = value;
  // @@protoc_insertion_point(field_set:Compensation.module.fACVoltMax)
}

// float fsetACVoltMax = 17;
void module::clear_fsetacvoltmax() {
  fsetacvoltmax_ = 0;
}
float module::fsetacvoltmax() const {
  // @@protoc_insertion_point(field_get:Compensation.module.fsetACVoltMax)
  return fsetacvoltmax_;
}
void module::set_fsetacvoltmax(float value) {
  
  fsetacvoltmax_ = value;
  // @@protoc_insertion_point(field_set:Compensation.module.fsetACVoltMax)
}

// float fDCVoltMax = 18;
void module::clear_fdcvoltmax() {
  fdcvoltmax_ = 0;
}
float module::fdcvoltmax() const {
  // @@protoc_insertion_point(field_get:Compensation.module.fDCVoltMax)
  return fdcvoltmax_;
}
void module::set_fdcvoltmax(float value) {
  
  fdcvoltmax_ = value;
  // @@protoc_insertion_point(field_set:Compensation.module.fDCVoltMax)
}

// float fsetDCVoltMax = 19;
void module::clear_fsetdcvoltmax() {
  fsetdcvoltmax_ = 0;
}
float module::fsetdcvoltmax() const {
  // @@protoc_insertion_point(field_get:Compensation.module.fsetDCVoltMax)
  return fsetdcvoltmax_;
}
void module::set_fsetdcvoltmax(float value) {
  
  fsetdcvoltmax_ = value;
  // @@protoc_insertion_point(field_set:Compensation.module.fsetDCVoltMax)
}

// repeated float fVolt = 20;
int module::fvolt_size() const {
  return fvolt_.size();
}
void module::clear_fvolt() {
  fvolt_.Clear();
}
float module::fvolt(int index) const {
  // @@protoc_insertion_point(field_get:Compensation.module.fVolt)
  return fvolt_.Get(index);
}
void module::set_fvolt(int index, float value) {
  fvolt_.Set(index, value);
  // @@protoc_insertion_point(field_set:Compensation.module.fVolt)
}
void module::add_fvolt(float value) {
  fvolt_.Add(value);
  // @@protoc_insertion_point(field_add:Compensation.module.fVolt)
}
const ::google::protobuf::RepeatedField< float >&
module::fvolt() const {
  // @@protoc_insertion_point(field_list:Compensation.module.fVolt)
  return fvolt_;
}
::google::protobuf::RepeatedField< float >*
module::mutable_fvolt() {
  // @@protoc_insertion_point(field_mutable_list:Compensation.module.fVolt)
  return &fvolt_;
}

// uint32 nFPGAVersion = 21;
void module::clear_nfpgaversion() {
  nfpgaversion_ = 0u;
}
::google::protobuf::uint32 module::nfpgaversion() const {
  // @@protoc_insertion_point(field_get:Compensation.module.nFPGAVersion)
  return nfpgaversion_;
}
void module::set_nfpgaversion(::google::protobuf::uint32 value) {
  
  nfpgaversion_ = value;
  // @@protoc_insertion_point(field_set:Compensation.module.nFPGAVersion)
}

// float fdigitaldelay = 22;
void module::clear_fdigitaldelay() {
  fdigitaldelay_ = 0;
}
float module::fdigitaldelay() const {
  // @@protoc_insertion_point(field_get:Compensation.module.fdigitaldelay)
  return fdigitaldelay_;
}
void module::set_fdigitaldelay(float value) {
  
  fdigitaldelay_ = value;
  // @@protoc_insertion_point(field_set:Compensation.module.fdigitaldelay)
}

// uint32 nTemp = 23;
void module::clear_ntemp() {
  ntemp_ = 0u;
}
::google::protobuf::uint32 module::ntemp() const {
  // @@protoc_insertion_point(field_get:Compensation.module.nTemp)
  return ntemp_;
}
void module::set_ntemp(::google::protobuf::uint32 value) {
  
  ntemp_ = value;
  // @@protoc_insertion_point(field_set:Compensation.module.nTemp)
}

// uint32 nTemp1 = 24;
void module::clear_ntemp1() {
  ntemp1_ = 0u;
}
::google::protobuf::uint32 module::ntemp1() const {
  // @@protoc_insertion_point(field_get:Compensation.module.nTemp1)
  return ntemp1_;
}
void module::set_ntemp1(::google::protobuf::uint32 value) {
  
  ntemp1_ = value;
  // @@protoc_insertion_point(field_set:Compensation.module.nTemp1)
}

// float fTemp = 25;
void module::clear_ftemp() {
  ftemp_ = 0;
}
float module::ftemp() const {
  // @@protoc_insertion_point(field_get:Compensation.module.fTemp)
  return ftemp_;
}
void module::set_ftemp(float value) {
  
  ftemp_ = value;
  // @@protoc_insertion_point(field_set:Compensation.module.fTemp)
}

// float fTemp1 = 26;
void module::clear_ftemp1() {
  ftemp1_ = 0;
}
float module::ftemp1() const {
  // @@protoc_insertion_point(field_get:Compensation.module.fTemp1)
  return ftemp1_;
}
void module::set_ftemp1(float value) {
  
  ftemp1_ = value;
  // @@protoc_insertion_point(field_set:Compensation.module.fTemp1)
}

// bool bMultiple = 27;
void module::clear_bmultiple() {
  bmultiple_ = false;
}
bool module::bmultiple() const {
  // @@protoc_insertion_point(field_get:Compensation.module.bMultiple)
  return bmultiple_;
}
void module::set_bmultiple(bool value) {
  
  bmultiple_ = value;
  // @@protoc_insertion_point(field_set:Compensation.module.bMultiple)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompensationItemData_PTU100::kFampcompensationFieldNumber;
const int CompensationItemData_PTU100::kFphcompensationFieldNumber;
const int CompensationItemData_PTU100::kFzeroshiftFieldNumber;
const int CompensationItemData_PTU100::kOther1FieldNumber;
const int CompensationItemData_PTU100::kOther2FieldNumber;
const int CompensationItemData_PTU100::kOther3FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompensationItemData_PTU100::CompensationItemData_PTU100()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CompensationPara_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Compensation.CompensationItemData_PTU100)
}
CompensationItemData_PTU100::CompensationItemData_PTU100(const CompensationItemData_PTU100& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      fampcompensation_(from.fampcompensation_),
      fphcompensation_(from.fphcompensation_),
      fzeroshift_(from.fzeroshift_),
      other1_(from.other1_),
      other2_(from.other2_),
      other3_(from.other3_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Compensation.CompensationItemData_PTU100)
}

void CompensationItemData_PTU100::SharedCtor() {
  _cached_size_ = 0;
}

CompensationItemData_PTU100::~CompensationItemData_PTU100() {
  // @@protoc_insertion_point(destructor:Compensation.CompensationItemData_PTU100)
  SharedDtor();
}

void CompensationItemData_PTU100::SharedDtor() {
}

void CompensationItemData_PTU100::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompensationItemData_PTU100::descriptor() {
  protobuf_CompensationPara_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CompensationPara_2eproto::file_level_metadata[4].descriptor;
}

const CompensationItemData_PTU100& CompensationItemData_PTU100::default_instance() {
  protobuf_CompensationPara_2eproto::InitDefaults();
  return *internal_default_instance();
}

CompensationItemData_PTU100* CompensationItemData_PTU100::New(::google::protobuf::Arena* arena) const {
  CompensationItemData_PTU100* n = new CompensationItemData_PTU100;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CompensationItemData_PTU100::Clear() {
// @@protoc_insertion_point(message_clear_start:Compensation.CompensationItemData_PTU100)
  fampcompensation_.Clear();
  fphcompensation_.Clear();
  fzeroshift_.Clear();
  other1_.Clear();
  other2_.Clear();
  other3_.Clear();
}

bool CompensationItemData_PTU100::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Compensation.CompensationItemData_PTU100)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float fampcompensation = 1;
      case 1: {
        if (tag == 10u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_fampcompensation())));
        } else if (tag == 13u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_fampcompensation())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float fphcompensation = 2;
      case 2: {
        if (tag == 18u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_fphcompensation())));
        } else if (tag == 21u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_fphcompensation())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float fzeroshift = 3;
      case 3: {
        if (tag == 26u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_fzeroshift())));
        } else if (tag == 29u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_fzeroshift())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float Other1 = 4;
      case 4: {
        if (tag == 34u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_other1())));
        } else if (tag == 37u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34u, input, this->mutable_other1())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float Other2 = 5;
      case 5: {
        if (tag == 42u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_other2())));
        } else if (tag == 45u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 42u, input, this->mutable_other2())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float Other3 = 6;
      case 6: {
        if (tag == 50u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_other3())));
        } else if (tag == 53u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 50u, input, this->mutable_other3())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Compensation.CompensationItemData_PTU100)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Compensation.CompensationItemData_PTU100)
  return false;
#undef DO_
}

void CompensationItemData_PTU100::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Compensation.CompensationItemData_PTU100)
  // repeated float fampcompensation = 1;
  if (this->fampcompensation_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_fampcompensation_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->fampcompensation().data(), this->fampcompensation_size(), output);
  }

  // repeated float fphcompensation = 2;
  if (this->fphcompensation_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_fphcompensation_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->fphcompensation().data(), this->fphcompensation_size(), output);
  }

  // repeated float fzeroshift = 3;
  if (this->fzeroshift_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_fzeroshift_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->fzeroshift().data(), this->fzeroshift_size(), output);
  }

  // repeated float Other1 = 4;
  if (this->other1_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_other1_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->other1().data(), this->other1_size(), output);
  }

  // repeated float Other2 = 5;
  if (this->other2_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_other2_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->other2().data(), this->other2_size(), output);
  }

  // repeated float Other3 = 6;
  if (this->other3_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_other3_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->other3().data(), this->other3_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:Compensation.CompensationItemData_PTU100)
}

::google::protobuf::uint8* CompensationItemData_PTU100::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Compensation.CompensationItemData_PTU100)
  // repeated float fampcompensation = 1;
  if (this->fampcompensation_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _fampcompensation_cached_byte_size_, target);
  }
  for (int i = 0; i < this->fampcompensation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->fampcompensation(i), target);
  }

  // repeated float fphcompensation = 2;
  if (this->fphcompensation_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _fphcompensation_cached_byte_size_, target);
  }
  for (int i = 0; i < this->fphcompensation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->fphcompensation(i), target);
  }

  // repeated float fzeroshift = 3;
  if (this->fzeroshift_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _fzeroshift_cached_byte_size_, target);
  }
  for (int i = 0; i < this->fzeroshift_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->fzeroshift(i), target);
  }

  // repeated float Other1 = 4;
  if (this->other1_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _other1_cached_byte_size_, target);
  }
  for (int i = 0; i < this->other1_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->other1(i), target);
  }

  // repeated float Other2 = 5;
  if (this->other2_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _other2_cached_byte_size_, target);
  }
  for (int i = 0; i < this->other2_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->other2(i), target);
  }

  // repeated float Other3 = 6;
  if (this->other3_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _other3_cached_byte_size_, target);
  }
  for (int i = 0; i < this->other3_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->other3(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Compensation.CompensationItemData_PTU100)
  return target;
}

size_t CompensationItemData_PTU100::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Compensation.CompensationItemData_PTU100)
  size_t total_size = 0;

  // repeated float fampcompensation = 1;
  {
    unsigned int count = this->fampcompensation_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _fampcompensation_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float fphcompensation = 2;
  {
    unsigned int count = this->fphcompensation_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _fphcompensation_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float fzeroshift = 3;
  {
    unsigned int count = this->fzeroshift_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _fzeroshift_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float Other1 = 4;
  {
    unsigned int count = this->other1_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _other1_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float Other2 = 5;
  {
    unsigned int count = this->other2_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _other2_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float Other3 = 6;
  {
    unsigned int count = this->other3_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _other3_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompensationItemData_PTU100::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Compensation.CompensationItemData_PTU100)
  GOOGLE_DCHECK_NE(&from, this);
  const CompensationItemData_PTU100* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CompensationItemData_PTU100>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Compensation.CompensationItemData_PTU100)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Compensation.CompensationItemData_PTU100)
    MergeFrom(*source);
  }
}

void CompensationItemData_PTU100::MergeFrom(const CompensationItemData_PTU100& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Compensation.CompensationItemData_PTU100)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fampcompensation_.MergeFrom(from.fampcompensation_);
  fphcompensation_.MergeFrom(from.fphcompensation_);
  fzeroshift_.MergeFrom(from.fzeroshift_);
  other1_.MergeFrom(from.other1_);
  other2_.MergeFrom(from.other2_);
  other3_.MergeFrom(from.other3_);
}

void CompensationItemData_PTU100::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Compensation.CompensationItemData_PTU100)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompensationItemData_PTU100::CopyFrom(const CompensationItemData_PTU100& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Compensation.CompensationItemData_PTU100)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompensationItemData_PTU100::IsInitialized() const {
  return true;
}

void CompensationItemData_PTU100::Swap(CompensationItemData_PTU100* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompensationItemData_PTU100::InternalSwap(CompensationItemData_PTU100* other) {
  fampcompensation_.UnsafeArenaSwap(&other->fampcompensation_);
  fphcompensation_.UnsafeArenaSwap(&other->fphcompensation_);
  fzeroshift_.UnsafeArenaSwap(&other->fzeroshift_);
  other1_.UnsafeArenaSwap(&other->other1_);
  other2_.UnsafeArenaSwap(&other->other2_);
  other3_.UnsafeArenaSwap(&other->other3_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CompensationItemData_PTU100::GetMetadata() const {
  protobuf_CompensationPara_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CompensationPara_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CompensationItemData_PTU100

// repeated float fampcompensation = 1;
int CompensationItemData_PTU100::fampcompensation_size() const {
  return fampcompensation_.size();
}
void CompensationItemData_PTU100::clear_fampcompensation() {
  fampcompensation_.Clear();
}
float CompensationItemData_PTU100::fampcompensation(int index) const {
  // @@protoc_insertion_point(field_get:Compensation.CompensationItemData_PTU100.fampcompensation)
  return fampcompensation_.Get(index);
}
void CompensationItemData_PTU100::set_fampcompensation(int index, float value) {
  fampcompensation_.Set(index, value);
  // @@protoc_insertion_point(field_set:Compensation.CompensationItemData_PTU100.fampcompensation)
}
void CompensationItemData_PTU100::add_fampcompensation(float value) {
  fampcompensation_.Add(value);
  // @@protoc_insertion_point(field_add:Compensation.CompensationItemData_PTU100.fampcompensation)
}
const ::google::protobuf::RepeatedField< float >&
CompensationItemData_PTU100::fampcompensation() const {
  // @@protoc_insertion_point(field_list:Compensation.CompensationItemData_PTU100.fampcompensation)
  return fampcompensation_;
}
::google::protobuf::RepeatedField< float >*
CompensationItemData_PTU100::mutable_fampcompensation() {
  // @@protoc_insertion_point(field_mutable_list:Compensation.CompensationItemData_PTU100.fampcompensation)
  return &fampcompensation_;
}

// repeated float fphcompensation = 2;
int CompensationItemData_PTU100::fphcompensation_size() const {
  return fphcompensation_.size();
}
void CompensationItemData_PTU100::clear_fphcompensation() {
  fphcompensation_.Clear();
}
float CompensationItemData_PTU100::fphcompensation(int index) const {
  // @@protoc_insertion_point(field_get:Compensation.CompensationItemData_PTU100.fphcompensation)
  return fphcompensation_.Get(index);
}
void CompensationItemData_PTU100::set_fphcompensation(int index, float value) {
  fphcompensation_.Set(index, value);
  // @@protoc_insertion_point(field_set:Compensation.CompensationItemData_PTU100.fphcompensation)
}
void CompensationItemData_PTU100::add_fphcompensation(float value) {
  fphcompensation_.Add(value);
  // @@protoc_insertion_point(field_add:Compensation.CompensationItemData_PTU100.fphcompensation)
}
const ::google::protobuf::RepeatedField< float >&
CompensationItemData_PTU100::fphcompensation() const {
  // @@protoc_insertion_point(field_list:Compensation.CompensationItemData_PTU100.fphcompensation)
  return fphcompensation_;
}
::google::protobuf::RepeatedField< float >*
CompensationItemData_PTU100::mutable_fphcompensation() {
  // @@protoc_insertion_point(field_mutable_list:Compensation.CompensationItemData_PTU100.fphcompensation)
  return &fphcompensation_;
}

// repeated float fzeroshift = 3;
int CompensationItemData_PTU100::fzeroshift_size() const {
  return fzeroshift_.size();
}
void CompensationItemData_PTU100::clear_fzeroshift() {
  fzeroshift_.Clear();
}
float CompensationItemData_PTU100::fzeroshift(int index) const {
  // @@protoc_insertion_point(field_get:Compensation.CompensationItemData_PTU100.fzeroshift)
  return fzeroshift_.Get(index);
}
void CompensationItemData_PTU100::set_fzeroshift(int index, float value) {
  fzeroshift_.Set(index, value);
  // @@protoc_insertion_point(field_set:Compensation.CompensationItemData_PTU100.fzeroshift)
}
void CompensationItemData_PTU100::add_fzeroshift(float value) {
  fzeroshift_.Add(value);
  // @@protoc_insertion_point(field_add:Compensation.CompensationItemData_PTU100.fzeroshift)
}
const ::google::protobuf::RepeatedField< float >&
CompensationItemData_PTU100::fzeroshift() const {
  // @@protoc_insertion_point(field_list:Compensation.CompensationItemData_PTU100.fzeroshift)
  return fzeroshift_;
}
::google::protobuf::RepeatedField< float >*
CompensationItemData_PTU100::mutable_fzeroshift() {
  // @@protoc_insertion_point(field_mutable_list:Compensation.CompensationItemData_PTU100.fzeroshift)
  return &fzeroshift_;
}

// repeated float Other1 = 4;
int CompensationItemData_PTU100::other1_size() const {
  return other1_.size();
}
void CompensationItemData_PTU100::clear_other1() {
  other1_.Clear();
}
float CompensationItemData_PTU100::other1(int index) const {
  // @@protoc_insertion_point(field_get:Compensation.CompensationItemData_PTU100.Other1)
  return other1_.Get(index);
}
void CompensationItemData_PTU100::set_other1(int index, float value) {
  other1_.Set(index, value);
  // @@protoc_insertion_point(field_set:Compensation.CompensationItemData_PTU100.Other1)
}
void CompensationItemData_PTU100::add_other1(float value) {
  other1_.Add(value);
  // @@protoc_insertion_point(field_add:Compensation.CompensationItemData_PTU100.Other1)
}
const ::google::protobuf::RepeatedField< float >&
CompensationItemData_PTU100::other1() const {
  // @@protoc_insertion_point(field_list:Compensation.CompensationItemData_PTU100.Other1)
  return other1_;
}
::google::protobuf::RepeatedField< float >*
CompensationItemData_PTU100::mutable_other1() {
  // @@protoc_insertion_point(field_mutable_list:Compensation.CompensationItemData_PTU100.Other1)
  return &other1_;
}

// repeated float Other2 = 5;
int CompensationItemData_PTU100::other2_size() const {
  return other2_.size();
}
void CompensationItemData_PTU100::clear_other2() {
  other2_.Clear();
}
float CompensationItemData_PTU100::other2(int index) const {
  // @@protoc_insertion_point(field_get:Compensation.CompensationItemData_PTU100.Other2)
  return other2_.Get(index);
}
void CompensationItemData_PTU100::set_other2(int index, float value) {
  other2_.Set(index, value);
  // @@protoc_insertion_point(field_set:Compensation.CompensationItemData_PTU100.Other2)
}
void CompensationItemData_PTU100::add_other2(float value) {
  other2_.Add(value);
  // @@protoc_insertion_point(field_add:Compensation.CompensationItemData_PTU100.Other2)
}
const ::google::protobuf::RepeatedField< float >&
CompensationItemData_PTU100::other2() const {
  // @@protoc_insertion_point(field_list:Compensation.CompensationItemData_PTU100.Other2)
  return other2_;
}
::google::protobuf::RepeatedField< float >*
CompensationItemData_PTU100::mutable_other2() {
  // @@protoc_insertion_point(field_mutable_list:Compensation.CompensationItemData_PTU100.Other2)
  return &other2_;
}

// repeated float Other3 = 6;
int CompensationItemData_PTU100::other3_size() const {
  return other3_.size();
}
void CompensationItemData_PTU100::clear_other3() {
  other3_.Clear();
}
float CompensationItemData_PTU100::other3(int index) const {
  // @@protoc_insertion_point(field_get:Compensation.CompensationItemData_PTU100.Other3)
  return other3_.Get(index);
}
void CompensationItemData_PTU100::set_other3(int index, float value) {
  other3_.Set(index, value);
  // @@protoc_insertion_point(field_set:Compensation.CompensationItemData_PTU100.Other3)
}
void CompensationItemData_PTU100::add_other3(float value) {
  other3_.Add(value);
  // @@protoc_insertion_point(field_add:Compensation.CompensationItemData_PTU100.Other3)
}
const ::google::protobuf::RepeatedField< float >&
CompensationItemData_PTU100::other3() const {
  // @@protoc_insertion_point(field_list:Compensation.CompensationItemData_PTU100.Other3)
  return other3_;
}
::google::protobuf::RepeatedField< float >*
CompensationItemData_PTU100::mutable_other3() {
  // @@protoc_insertion_point(field_mutable_list:Compensation.CompensationItemData_PTU100.Other3)
  return &other3_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int modules::kModuleChanelFieldNumber;
const int modules::kNUDCtestFieldNumber;
const int modules::kNIDCtestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

modules::modules()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CompensationPara_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Compensation.modules)
}
modules::modules(const modules& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      modulechanel_(from.modulechanel_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&nudctest_, &from.nudctest_,
    reinterpret_cast<char*>(&nidctest_) -
    reinterpret_cast<char*>(&nudctest_) + sizeof(nidctest_));
  // @@protoc_insertion_point(copy_constructor:Compensation.modules)
}

void modules::SharedCtor() {
  ::memset(&nudctest_, 0, reinterpret_cast<char*>(&nidctest_) -
    reinterpret_cast<char*>(&nudctest_) + sizeof(nidctest_));
  _cached_size_ = 0;
}

modules::~modules() {
  // @@protoc_insertion_point(destructor:Compensation.modules)
  SharedDtor();
}

void modules::SharedDtor() {
}

void modules::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* modules::descriptor() {
  protobuf_CompensationPara_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CompensationPara_2eproto::file_level_metadata[5].descriptor;
}

const modules& modules::default_instance() {
  protobuf_CompensationPara_2eproto::InitDefaults();
  return *internal_default_instance();
}

modules* modules::New(::google::protobuf::Arena* arena) const {
  modules* n = new modules;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void modules::Clear() {
// @@protoc_insertion_point(message_clear_start:Compensation.modules)
  modulechanel_.Clear();
  ::memset(&nudctest_, 0, reinterpret_cast<char*>(&nidctest_) -
    reinterpret_cast<char*>(&nudctest_) + sizeof(nidctest_));
}

bool modules::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Compensation.modules)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Compensation.module moduleChanel = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_modulechanel()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // uint32 nUDCtest = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nudctest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nIDCtest = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nidctest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Compensation.modules)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Compensation.modules)
  return false;
#undef DO_
}

void modules::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Compensation.modules)
  // repeated .Compensation.module moduleChanel = 1;
  for (unsigned int i = 0, n = this->modulechanel_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->modulechanel(i), output);
  }

  // uint32 nUDCtest = 2;
  if (this->nudctest() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nudctest(), output);
  }

  // uint32 nIDCtest = 3;
  if (this->nidctest() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->nidctest(), output);
  }

  // @@protoc_insertion_point(serialize_end:Compensation.modules)
}

::google::protobuf::uint8* modules::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Compensation.modules)
  // repeated .Compensation.module moduleChanel = 1;
  for (unsigned int i = 0, n = this->modulechanel_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->modulechanel(i), false, target);
  }

  // uint32 nUDCtest = 2;
  if (this->nudctest() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nudctest(), target);
  }

  // uint32 nIDCtest = 3;
  if (this->nidctest() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->nidctest(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Compensation.modules)
  return target;
}

size_t modules::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Compensation.modules)
  size_t total_size = 0;

  // repeated .Compensation.module moduleChanel = 1;
  {
    unsigned int count = this->modulechanel_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->modulechanel(i));
    }
  }

  // uint32 nUDCtest = 2;
  if (this->nudctest() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nudctest());
  }

  // uint32 nIDCtest = 3;
  if (this->nidctest() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nidctest());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void modules::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Compensation.modules)
  GOOGLE_DCHECK_NE(&from, this);
  const modules* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const modules>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Compensation.modules)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Compensation.modules)
    MergeFrom(*source);
  }
}

void modules::MergeFrom(const modules& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Compensation.modules)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  modulechanel_.MergeFrom(from.modulechanel_);
  if (from.nudctest() != 0) {
    set_nudctest(from.nudctest());
  }
  if (from.nidctest() != 0) {
    set_nidctest(from.nidctest());
  }
}

void modules::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Compensation.modules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void modules::CopyFrom(const modules& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Compensation.modules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool modules::IsInitialized() const {
  return true;
}

void modules::Swap(modules* other) {
  if (other == this) return;
  InternalSwap(other);
}
void modules::InternalSwap(modules* other) {
  modulechanel_.UnsafeArenaSwap(&other->modulechanel_);
  std::swap(nudctest_, other->nudctest_);
  std::swap(nidctest_, other->nidctest_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata modules::GetMetadata() const {
  protobuf_CompensationPara_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CompensationPara_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// modules

// repeated .Compensation.module moduleChanel = 1;
int modules::modulechanel_size() const {
  return modulechanel_.size();
}
void modules::clear_modulechanel() {
  modulechanel_.Clear();
}
const ::Compensation::module& modules::modulechanel(int index) const {
  // @@protoc_insertion_point(field_get:Compensation.modules.moduleChanel)
  return modulechanel_.Get(index);
}
::Compensation::module* modules::mutable_modulechanel(int index) {
  // @@protoc_insertion_point(field_mutable:Compensation.modules.moduleChanel)
  return modulechanel_.Mutable(index);
}
::Compensation::module* modules::add_modulechanel() {
  // @@protoc_insertion_point(field_add:Compensation.modules.moduleChanel)
  return modulechanel_.Add();
}
::google::protobuf::RepeatedPtrField< ::Compensation::module >*
modules::mutable_modulechanel() {
  // @@protoc_insertion_point(field_mutable_list:Compensation.modules.moduleChanel)
  return &modulechanel_;
}
const ::google::protobuf::RepeatedPtrField< ::Compensation::module >&
modules::modulechanel() const {
  // @@protoc_insertion_point(field_list:Compensation.modules.moduleChanel)
  return modulechanel_;
}

// uint32 nUDCtest = 2;
void modules::clear_nudctest() {
  nudctest_ = 0u;
}
::google::protobuf::uint32 modules::nudctest() const {
  // @@protoc_insertion_point(field_get:Compensation.modules.nUDCtest)
  return nudctest_;
}
void modules::set_nudctest(::google::protobuf::uint32 value) {
  
  nudctest_ = value;
  // @@protoc_insertion_point(field_set:Compensation.modules.nUDCtest)
}

// uint32 nIDCtest = 3;
void modules::clear_nidctest() {
  nidctest_ = 0u;
}
::google::protobuf::uint32 modules::nidctest() const {
  // @@protoc_insertion_point(field_get:Compensation.modules.nIDCtest)
  return nidctest_;
}
void modules::set_nidctest(::google::protobuf::uint32 value) {
  
  nidctest_ = value;
  // @@protoc_insertion_point(field_set:Compensation.modules.nIDCtest)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Compensation

// @@protoc_insertion_point(global_scope)
